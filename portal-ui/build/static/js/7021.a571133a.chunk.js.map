{"version":3,"file":"static/js/7021.a571133a.chunk.js","mappings":"8OAqBaA,EAAkB,WAC7B,OACE,UAAC,KAAD,CAAMC,WAAS,EAACC,UAAW,EAA3B,WACE,SAAC,KAAD,WACE,SAAC,MAAD,CAAUC,MAAO,OAAQC,OAAQ,YAEnC,SAAC,KAAD,CAAMC,MAAI,EAAV,uBAGL,EAEYC,EAAkB,WAC7B,OACE,UAAC,KAAD,CAAML,WAAS,EAACC,UAAW,EAA3B,WACE,SAAC,KAAD,WACE,SAAC,IAAD,CAAUC,MAAO,OAAQC,OAAQ,YAEnC,SAAC,KAAD,CAAMC,MAAI,EAAV,uCAGL,EAEYE,EAAqB,WAChC,OACE,UAAC,KAAD,CAAMN,WAAS,EAACC,UAAW,EAA3B,WACE,SAAC,KAAD,WACE,SAAC,MAAD,CAAWC,MAAO,OAAQC,OAAQ,YAEpC,SAAC,KAAD,CAAMC,MAAI,EAAV,wBAGL,C,iYC4wBKG,GAAYC,EAAAA,EAAAA,KAND,SAACC,GAAD,MAAsB,CACrCC,cAAeD,EAAME,QAAQD,cAC7BE,eAAgBH,EAAME,QAAQE,cAC9BC,OAAQL,EAAME,QAAQI,WAHP,GAMmB,MAEpC,WAAeC,EAAAA,EAAAA,IAvvBA,SAACC,GAAD,OACbC,EAAAA,EAAAA,IAAa,wDACXC,aAAc,CACZC,QAAS,OACTC,aAAc,IAEhBC,WAAY,CACVC,WAAY,GACZH,QAAS,OACTjB,OAAQ,GACR,WAAY,CACVqB,WAAY,YAGhBC,cAAe,CACbF,WAAY,GACZ,QAAS,CACPG,SAAU,GACVC,UAAW,IAEb,WAAY,CACVH,WAAY,aAGbI,EAAAA,IACAC,EAAAA,IAxBO,IAyBVC,YAAa,CACXC,UAAW,UAEbC,KAAM,CAAEC,WAAY,QACpBC,OAAQ,CAAEC,UAAW,UACrBC,SAAU,CACRC,YAAa,GACbjB,QAAS,OACT,cAAe,CACbkB,SAAU,IAGZ,4BAA6B,CAC3BC,SAAU,aAGXC,EAAAA,EAAAA,IAAmBvB,EAAMwB,QAAQ,KACjCC,EAAAA,IACAC,EAAAA,IACAC,EAAAA,IACAC,EAAAA,IA9CQ,GAuvBf,CAAkCtC,GAtsBH,SAAC,GAA0C,IAAxCuC,EAAuC,EAAvCA,QAC1BC,GAAWC,EAAAA,EAAAA,MAEXlC,GAASmC,EAAAA,EAAAA,KAAY,SAACxC,GAAD,OAAqBA,EAAME,QAAQI,UAAnC,IACrBL,GAAgBuC,EAAAA,EAAAA,KACpB,SAACxC,GAAD,OAAqBA,EAAME,QAAQD,aAAnC,IAGF,GAAkCwC,EAAAA,EAAAA,WAAkB,GAApD,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAoCF,EAAAA,EAAAA,WAAkB,GAAtD,eAAOG,EAAP,KAAmBC,EAAnB,KACA,GAAwCJ,EAAAA,EAAAA,UAAiB,YAAzD,eAAOK,EAAP,KAAqBC,EAArB,KACA,GACEN,EAAAA,EAAAA,UAAiB,IADnB,eAAOO,EAAP,KAA+BC,EAA/B,KAEA,GAA4CR,EAAAA,EAAAA,UAAiB,IAA7D,eAAOS,EAAP,KAAuBC,EAAvB,KACA,GAA4CV,EAAAA,EAAAA,UAAiB,IAA7D,gBAAOW,GAAP,MAAuBC,GAAvB,MACA,IAAgDZ,EAAAA,EAAAA,WAAkB,GAAlE,iBAAOa,GAAP,MAAyBC,GAAzB,MACA,IAAkDd,EAAAA,EAAAA,UAAiB,IAAnE,iBAAOe,GAAP,MAA0BC,GAA1B,MACA,IAA8ChB,EAAAA,EAAAA,UAAiB,IAA/D,iBAAOiB,GAAP,MAAwBC,GAAxB,MACA,IAAwClB,EAAAA,EAAAA,UAAiB,IAAzD,iBAAOmB,GAAP,MAAqBC,GAArB,MACA,IAA0BpB,EAAAA,EAAAA,UAAiB,IAA3C,iBAAOqB,GAAP,MAAcC,GAAd,MACA,IAA4CtB,EAAAA,EAAAA,UAAiB,IAA7D,iBAAOuB,GAAP,MAAuBC,GAAvB,MACA,IAAwDxB,EAAAA,EAAAA,UAAiB,IAAzE,iBAAOyB,GAAP,MAA6BC,GAA7B,MACA,IACE1B,EAAAA,EAAAA,WAAkB,GADpB,iBAAO2B,GAAP,MAAiCC,GAAjC,MAEA,IAAwD5B,EAAAA,EAAAA,UAAiB,IAAzE,iBAAO6B,GAAP,MAA6BC,GAA7B,MACA,IAAwD9B,EAAAA,EAAAA,UAAiB,IAAzE,iBAAO+B,GAAP,MAA6BC,GAA7B,MACA,IAAsDhC,EAAAA,EAAAA,UAAiB,IAAvE,iBAAOiC,GAAP,MAA4BC,GAA5B,MACA,IAAsDlC,EAAAA,EAAAA,UAAiB,IAAvE,iBAAOmC,GAAP,MAA4BC,GAA5B,MACA,IAAkCpC,EAAAA,EAAAA,WAAkB,GAApD,iBAAOqC,GAAP,MAAkBC,GAAlB,MACA,IAAgDtC,EAAAA,EAAAA,WAAkB,GAAlE,iBAAOuC,GAAP,MAAyBC,GAAzB,MACA,IAAgDxC,EAAAA,EAAAA,WAAkB,GAAlE,iBAAOyC,GAAP,MAAyBC,GAAzB,MACA,IAAkC1C,EAAAA,EAAAA,UAAmB,CAAC,KAAtD,iBAAO2C,GAAP,MAAkBC,GAAlB,MACA,IAAoC5C,EAAAA,EAAAA,UAAmB,CAAC,KAAxD,iBAAO6C,GAAP,MAAmBC,GAAnB,MACA,IAAgD9C,EAAAA,EAAAA,UAAc,CAAC,GAA/D,iBAAO+C,GAAP,MAAyBC,GAAzB,MACMC,GAAkB,SAACC,GACvBF,IAAoBG,EAAAA,EAAAA,IAAqBJ,GAAkBG,GAC5D,EACD,IAAsClD,EAAAA,EAAAA,WAAkB,GAAxD,iBAAOoD,GAAP,MAAoBC,GAApB,OAGAC,EAAAA,EAAAA,YAAU,WACR,IAAIC,EAA4C,GAE3B,WAAjBlD,IACFkD,EAA0B,kBACrBA,GADqB,CAExB,CACEC,SAAU,2BACVC,UAAU,EACVC,MAAOnD,GAET,CACEiD,SAAU,kBACVC,UAAU,EACVC,MAAOjD,GAET,CACE+C,SAAU,kBACVC,UAAU,EACVC,MAAO/C,IAET,CACE6C,SAAU,mBACVC,UAAU,EACVC,MAAOzC,OAKQ,OAAjBZ,IACFkD,EAA0B,kBACrBA,GADqB,CAExB,CACEC,SAAU,SACVC,UAAU,EACVC,MAAOrC,IAET,CACEmC,SAAU,kBACVC,UAAU,EACVC,MAAOnC,OAKb,IAAMoC,GAAYC,EAAAA,EAAAA,GAAqBL,GAEvCF,GAAiD,IAAlCQ,OAAOC,KAAKH,GAAWI,QAEtCf,GAAoBW,EACrB,GAAE,CACDtD,EACAE,EACAE,EACAE,GACAM,GACAI,GACAE,KAGF,IAAMyC,IAAgCC,EAAAA,EAAAA,cAAY,WAChDC,EAAAA,EAAAA,OAEI,MAFJ,oCAG0BtG,QAH1B,IAG0BA,OAH1B,EAG0BA,EAAQuG,UAHlC,2BAGuDvG,QAHvD,IAGuDA,OAHvD,EAGuDA,EAAQwG,KAH/D,uBAKGC,MAAK,SAACC,GACDA,IACEA,EAAIC,MACNjE,EAAgB,UAChBE,EAA0B8D,EAAIC,KAAKC,mBACnC9D,EAAkB4D,EAAIC,KAAKE,WAC3B7D,GAAkB0D,EAAIC,KAAKG,WAC3B1D,GAAqBsD,EAAIC,KAAKI,cAC9BzD,GAAmBoD,EAAIC,KAAKK,YAC5BxD,GAAgBkD,EAAIC,KAAKM,SAChBP,EAAIQ,mBACbxE,EAAgB,MAChBgB,GAASgD,EAAIQ,iBAAiBC,KAC9BvD,GAAkB8C,EAAIQ,iBAAiBE,gBACvCtD,GAAwB4C,EAAIQ,iBAAiBG,sBAC7CnD,GACEwC,EAAIQ,iBAAiBI,wBAEvBlD,GAAwBsC,EAAIQ,iBAAiBK,uBAC7CjD,GAAuBoC,EAAIQ,iBAAiBM,sBAC5ChD,GAAuBkC,EAAIQ,iBAAiBO,qBAC5C/C,GAAagC,EAAIQ,iBAAiBQ,uBAClC9C,GAAoB8B,EAAIQ,iBAAiBS,iBACzC7C,GAAoB4B,EAAIQ,iBAAiBU,mBAG9C,IACAC,OAAM,SAACC,GACN7F,GAAS8F,EAAAA,EAAAA,IAAqBD,GAC/B,GACJ,GAAE,CAAC9H,EAAQiC,KAEZyD,EAAAA,EAAAA,YAAU,WACJ1F,GACFoG,IAEH,GAAE,CAACpG,EAAQoG,KAqFZ,OACE,UAAC,WAAD,YACE,SAAC,IAAD,CACE4B,MAAO,mBACPC,YAAa,UACbC,WAAW,SACXC,WAAW,SAAC,MAAD,IACXC,UAAW/F,EACXgG,QAAS,kBAAM7F,GAAc,EAApB,EACT8F,OAAQ/F,EACRgG,UA7F+B,WACnCjG,GAAa,GACb,IAAIkG,EAA2C,CAAC,EAChD,OAAQ/F,GACN,IAAK,KACH+F,EAAQtB,iBAAmB,CACzBC,IAAK1D,GACL2D,eAAgBzD,GAChB0D,qBAAsBxD,GACtByD,uBAAwBrD,GACxBsD,sBAAuBpD,GACvBqD,qBAAsBnD,GACtBoD,oBAAqBlD,GACrBmD,sBAAuBjD,GACvBkD,gBAAiBhD,GACjBiD,iBAAkB/C,IAEpB,MACF,IAAK,SACH2D,EAAQ7B,KAAO,CACbC,kBAAmBjE,EACnBkE,UAAWhE,EACXiE,UAAW/D,GACXgE,aAAc5D,GACd6D,WAAY3D,GACZ4D,OAAQ1D,IAOd+C,EAAAA,EAAAA,OAEI,OAFJ,oCAG0BtG,QAH1B,IAG0BA,OAH1B,EAG0BA,EAAQuG,UAHlC,2BAGuDvG,QAHvD,IAGuDA,OAHvD,EAGuDA,EAAQwG,KAH/D,sBAIIgC,GAED/B,MAAK,WACJnE,GAAa,GAEbE,GAAc,GACd4D,IACD,IACAyB,OAAM,SAACC,GACN7F,GAAS8F,EAAAA,EAAAA,IAAqBD,IAC9BxF,GAAa,EACd,GACJ,EA8CKmG,qBACE,SAAC,IAAD,mFAKH7I,GACC,gBAAK8I,UAAW1G,EAAQhB,YAAxB,UACE,SAAC,IAAD,OAGF,UAAC,EAAA2H,SAAD,YACE,UAAC,KAAD,CAAMrJ,MAAI,EAACsJ,GAAI,GAAf,WACE,eAAIF,UAAW1G,EAAQ6G,aAAvB,gCACA,eAAIH,UAAW1G,EAAQ8G,cAEzB,SAAC,KAAD,CACExJ,MAAI,EACJsJ,GAAI,GACJF,UAAW1G,EAAQ+G,qBACnBC,cAAe,EAJjB,UAME,SAAC,IAAD,CACEC,iBAAkBxG,EAClByG,GAAG,cACH1C,KAAK,cACL2C,MAAM,WACNC,SAAU,SAACC,GACT3G,EAAgB2G,EAAEC,OAAOxD,MAC1B,EACDyD,gBAAiB,CACf,CAAEJ,OAAO,SAAC,KAAD,IAAwBrD,MAAO,YACxC,CAAEqD,OAAO,SAAC,KAAD,IAAqBrD,MAAO,UACrC,CAAEqD,OAAO,SAAC,KAAD,IAAqBrD,MAAO,WAKzB,WAAjBrD,IACC,UAAC,EAAAkG,SAAD,YACE,SAAC,KAAD,CAAMrJ,MAAI,EAACsJ,GAAI,GAAIF,UAAW1G,EAAQwH,aAAtC,UACE,SAAC,IAAD,CACEN,GAAG,2BACH1C,KAAK,2BACL4C,SAAU,SAACC,GACTzG,EAA0ByG,EAAEC,OAAOxD,OACnCT,GAAgB,2BACjB,EACD8D,MAAM,oBACNrD,MAAOnD,EACP8G,YAAY,sEACZC,MAAOvE,GAAgB,0BAAgC,GACvDU,UAAQ,OAGZ,SAAC,KAAD,CAAMvG,MAAI,EAACsJ,GAAI,GAAIF,UAAW1G,EAAQwH,aAAtC,UACE,SAAC,IAAD,CACEN,GAAG,kBACH1C,KAAK,kBACL4C,SAAU,SAACC,GACTvG,EAAkBuG,EAAEC,OAAOxD,OAC3BT,GAAgB,kBACjB,EACD8D,MAAM,YACNrD,MAAOjD,EACP6G,MAAOvE,GAAgB,iBAAuB,GAC9CU,UAAQ,OAGZ,SAAC,KAAD,CAAMvG,MAAI,EAACsJ,GAAI,GAAIF,UAAW1G,EAAQwH,aAAtC,UACE,SAAC,IAAD,CACEG,KAAM1G,GAAmB,OAAS,WAClCiG,GAAG,kBACH1C,KAAK,kBACL4C,SAAU,SAACC,GACTrG,GAAkBqG,EAAEC,OAAOxD,OAC3BT,GAAgB,kBACjB,EACD8D,MAAM,YACNrD,MAAO/C,GACP2G,MAAOvE,GAAgB,iBAAuB,GAC9CU,UAAQ,EACR+D,YACE3G,IACE,SAAC,IAAD,KAEA,SAAC,IAAD,IAGJtC,cAAe,kBAAMuC,IAAqBD,GAA3B,OAGnB,SAAC,KAAD,CAAM3D,MAAI,EAACsJ,GAAI,GAAIF,UAAW1G,EAAQwH,aAAtC,UACE,SAAC,IAAD,CACEN,GAAG,qBACH1C,KAAK,qBACL4C,SAAU,SAACC,GACTjG,GAAqBiG,EAAEC,OAAOxD,OAC9BT,GAAgB,qBACjB,EACD8D,MAAM,eACNrD,MAAO3C,GACPsG,YAAY,oDACZC,MAAOvE,GAAgB,oBAA0B,QAGrD,SAAC,KAAD,CAAM7F,MAAI,EAACsJ,GAAI,GAAIF,UAAW1G,EAAQwH,aAAtC,UACE,SAAC,IAAD,CACEN,GAAG,mBACH1C,KAAK,mBACL4C,SAAU,SAACC,GACT/F,GAAmB+F,EAAEC,OAAOxD,OAC5BT,GAAgB,mBACjB,EACD8D,MAAM,aACNrD,MAAOzC,GACPqG,MAAOvE,GAAgB,kBAAwB,GAC/CU,UAAQ,OAGZ,SAAC,KAAD,CAAMvG,MAAI,EAACsJ,GAAI,GAAIF,UAAW1G,EAAQwH,aAAtC,UACE,SAAC,IAAD,CACEN,GAAG,gBACH1C,KAAK,gBACL4C,SAAU,SAACC,GACT7F,GAAgB6F,EAAEC,OAAOxD,OACzBT,GAAgB,gBACjB,EACD8D,MAAM,SACNrD,MAAOvC,UAMG,OAAjBd,IACC,UAAC,EAAAkG,SAAD,YACE,SAAC,KAAD,CAAMrJ,MAAI,EAACsJ,GAAI,GAAIF,UAAW1G,EAAQwH,aAAtC,UACE,SAAC,IAAD,CACEN,GAAG,SACH1C,KAAK,SACL4C,SAAU,SAACC,GACT3F,GAAS2F,EAAEC,OAAOxD,OAClBT,GAAgB,SACjB,EACD8D,MAAM,sBACNrD,MAAOrC,GACPgG,YAAY,kBACZC,MAAOvE,GAAgB,QAAc,GACrCU,UAAQ,OAGZ,SAAC,KAAD,CAAMvG,MAAI,EAACsJ,GAAI,GAAIF,UAAW1G,EAAQwH,aAAtC,UACE,SAAC,IAAD,CACE1D,MAAM,aACNoD,GAAG,aACH1C,KAAK,aACLqD,QAASpF,GACT2E,SAAU,SAACC,GACT,IACMQ,EADUR,EAAEC,OACMO,QACxBnF,GAAamF,EACd,EACDV,MAAO,6BAGX,SAAC,KAAD,CAAM7J,MAAI,EAACsJ,GAAI,GAAIF,UAAW1G,EAAQwH,aAAtC,UACE,SAAC,IAAD,CACE1D,MAAM,oBACNoD,GAAG,oBACH1C,KAAK,oBACLqD,QAASlF,GACTyE,SAAU,SAACC,GACT,IACMQ,EADUR,EAAEC,OACMO,QACxBjF,GAAoBiF,EACrB,EACDV,MAAO,sBAGVxE,IACC,UAAC,KAAD,CAAMrF,MAAI,EAACsJ,GAAI,GAAf,WACE,SAAC,IAAD,CACEF,UAAW1G,EAAQ0H,MACnBI,QAAQ,UACRxJ,QAAQ,QACRyJ,cAAY,EAJd,6EASA,qBAEA,MACJ,SAAC,KAAD,CAAMzK,MAAI,EAACsJ,GAAI,GAAIF,UAAW1G,EAAQwH,aAAtC,UACE,SAAC,IAAD,CACE1D,MAAM,oBACNoD,GAAG,oBACH1C,KAAK,oBACLqD,QAAShF,GACTuE,SAAU,SAACC,GACT,IACMQ,EADUR,EAAEC,OACMO,QACxB/E,GAAoB+E,EACrB,EACDV,MAAO,8CAGX,SAAC,KAAD,CAAM7J,MAAI,EAACsJ,GAAI,GAAIF,UAAW1G,EAAQwH,aAAtC,UACE,SAAC,IAAD,CACEN,GAAG,kBACH1C,KAAK,kBACL4C,SAAU,SAACC,GACTzF,GAAkByF,EAAEC,OAAOxD,OAC3BT,GAAgB,kBACjB,EACD8D,MAAM,iBACNrD,MAAOnC,GACP8F,YAAY,wBACZC,MAAOvE,GAAgB,iBAAuB,GAC9CU,UAAQ,OAGZ,SAAC,KAAD,CAAMvG,MAAI,EAACsJ,GAAI,GAAIF,UAAW1G,EAAQwH,aAAtC,UACE,SAAC,IAAD,CACEG,KAAM5F,GAA2B,OAAS,WAC1CmF,GAAG,wBACH1C,KAAK,wBACL4C,SAAU,SAACC,GACTvF,GAAwBuF,EAAEC,OAAOxD,MAClC,EACDqD,MAAM,uBACNrD,MAAOjC,GACP4F,YAAY,QACZG,YACE7F,IACE,SAAC,IAAD,KAEA,SAAC,IAAD,IAGJpD,cAAe,kBACbqD,IAA6BD,GADhB,OAKnB,SAAC,KAAD,CAAMzE,MAAI,EAACsJ,GAAI,GAAIF,UAAW1G,EAAQwH,aAAtC,UACE,SAAC,IAAD,CACEN,GAAG,wBACH1C,KAAK,wBACL4C,SAAU,SAACC,GACTnF,GAAwBmF,EAAEC,OAAOxD,MAClC,EACDqD,MAAM,yBACNrD,MAAO7B,GACPwF,YAAY,oBAGhB,SAAC,KAAD,CAAMnK,MAAI,EAACsJ,GAAI,GAAIF,UAAW1G,EAAQwH,aAAtC,UACE,SAAC,IAAD,CACEN,GAAG,wBACH1C,KAAK,wBACL4C,SAAU,SAACC,GACTjF,GAAwBiF,EAAEC,OAAOxD,MAClC,EACDqD,MAAM,wBACNrD,MAAO3B,GACPsF,YAAY,0BAGhB,SAAC,KAAD,CAAMnK,MAAI,EAACsJ,GAAI,GAAIF,UAAW1G,EAAQwH,aAAtC,UACE,SAAC,IAAD,CACEN,GAAG,uBACH1C,KAAK,uBACL4C,SAAU,SAACC,GACT/E,GAAuB+E,EAAEC,OAAOxD,MACjC,EACDqD,MAAM,uBACNrD,MAAOzB,GACPoF,YAAY,qDAGhB,SAAC,KAAD,CAAMnK,MAAI,EAACsJ,GAAI,GAAIF,UAAW1G,EAAQwH,aAAtC,UACE,SAAC,IAAD,CACEN,GAAG,uBACH1C,KAAK,uBACL4C,SAAU,SAACC,GACT7E,GAAuB6E,EAAEC,OAAOxD,MACjC,EACDqD,MAAM,sBACNrD,MAAOvB,GACPkF,YAAY,mDAMpB,SAAC,KAAD,CAAMnK,MAAI,EAACsJ,GAAI,GAAIF,UAAW1G,EAAQgI,gBAAtC,UACE,SAAC,KAAD,CACEd,GAAI,WACJS,KAAK,SACLG,QAAQ,aACRG,MAAM,UACNC,UAAW1E,IAAenD,EAC1B8H,QAAS,kBAAM3H,GAAc,EAApB,EACT2G,MAAO,WAIO,OAAjB1G,IACC,UAAC,EAAAkG,SAAD,YACE,SAAC,IAAD,uCACA,mBACA,sBAAUD,UAAW1G,EAAQoI,WAA7B,WACE,mBAAQ1B,UAAW1G,EAAQqI,gBAA3B,0FAIA,SAAC,KAAD,CAAM/K,MAAI,EAACsJ,GAAI,GAAf,SACG7D,GAAUuF,KAAI,SAACC,EAAGC,GACjB,OACE,SAAC,EAAA7B,SAAD,WACE,iBAAKD,UAAW1G,EAAQ3B,aAAxB,WACE,SAAC,IAAD,CACE6I,GAAE,oBAAesB,EAAMC,YACvBtB,MAAO,GACPM,YAAY,GACZjD,KAAI,oBAAegE,EAAMC,YACzB3E,MAAOf,GAAUyF,GACjBpB,SAAU,SACRC,GAEArE,GACED,GAAUuF,KAAI,SAACI,EAAOC,GAAR,OACZA,IAAMH,EAAQnB,EAAEC,OAAOxD,MAAQ4E,CADnB,IAIjB,EACDF,MAAOA,EAEPd,MACEvE,GAAiB,aAAD,OACDqF,EAAMC,cAChB,IApBT,wBAgBwBD,EAAMC,cAO9B,iBAAK/B,UAAW1G,EAAQxB,WAAxB,WACE,SAAC,IAAD,CAASwH,MAAM,WAAW,aAAW,MAArC,UACE,SAAC,IAAD,CACE4C,KAAM,QACNT,QAAS,WACPnF,GAAa,GAAD,eAAKD,IAAL,CAAgB,KAC7B,EAJH,UAME,SAAC,IAAD,SAGJ,SAAC,IAAD,CAASiD,MAAM,SAAS,aAAW,MAAnC,UACE,SAAC,IAAD,CACE4C,KAAM,QACNC,MAAO,CAAEpK,WAAY,IACrB0J,QAAS,WACHpF,GAAUoB,OAAS,GACrBnB,GACED,GAAU+F,QAAO,SAACP,EAAGI,GAAJ,OAAUA,IAAMH,CAAhB,IAGtB,EATH,UAWE,SAAC,IAAD,eAhDV,wBAAgCA,EAAMC,YAuDzC,UAGL,sBAAU/B,UAAW1G,EAAQoI,WAA7B,WACE,mBAAQ1B,UAAW1G,EAAQqI,gBAA3B,2FAIA,SAAC,KAAD,CAAM/K,MAAI,EAACsJ,GAAI,GAAf,SACG3D,GAAWqF,KAAI,SAACC,EAAGC,GAClB,OACE,SAAC,EAAA7B,SAAD,WACE,iBAAKD,UAAW1G,EAAQ3B,aAAxB,WACE,SAAC,IAAD,CACE6I,GAAE,qBAAgBsB,EAAMC,YACxBtB,MAAO,GACPM,YAAY,GACZjD,KAAI,qBAAgBgE,EAAMC,YAC1B3E,MAAOb,GAAWuF,GAClBpB,SAAU,SACRC,GAEAnE,GACED,GAAWqF,KAAI,SAACI,EAAOC,GAAR,OACbA,IAAMH,EAAQnB,EAAEC,OAAOxD,MAAQ4E,CADlB,IAIlB,EACDF,MAAOA,EAEPd,MACEvE,GAAiB,cAAD,OACAqF,EAAMC,cACjB,IApBT,yBAgByBD,EAAMC,cAO/B,iBAAK/B,UAAW1G,EAAQxB,WAAxB,WACE,SAAC,IAAD,CAASwH,MAAM,YAAY,aAAW,MAAtC,UACE,SAAC,IAAD,CACE4C,KAAM,QACNT,QAAS,WACPjF,GAAc,GAAD,eAAKD,IAAL,CAAiB,KAC/B,EAJH,UAME,SAAC,IAAD,SAGJ,SAAC,IAAD,CAAS+C,MAAM,SAAS,aAAW,MAAnC,UACE,SAAC,IAAD,CACE4C,KAAM,QACNC,MAAO,CAAEpK,WAAY,IACrB0J,QAAS,WACHlF,GAAWkB,OAAS,GACtBjB,GACED,GAAW6F,QAAO,SAACP,EAAGI,GAAJ,OAAUA,IAAMH,CAAhB,IAGvB,EATH,UAWE,SAAC,IAAD,eAhDV,wBAAgCA,EAAMC,YAuDzC,UAGL,mBACA,SAAC,KAAD,CAAMnL,MAAI,EAACsJ,GAAI,GAAIF,UAAW1G,EAAQgI,gBAAtC,UACE,SAAC,KAAD,CACEd,GAAI,qBACJS,KAAK,SACLG,QAAQ,aACRI,UAAW1E,IAAenD,EAC1B8H,QAAS,kBAhfC,WACxB7H,GAAa,GACb,IAAIkG,EAA2C,CAAC,EAEzC,OADC/F,IAEJ+F,EAAU,CACRuC,SAAUhG,GAAU+F,QAAO,SAACE,GAAD,MAA0B,KAAhBA,EAAKC,MAAf,IAC3BC,UAAWjG,GAAW6F,QAAO,SAACJ,GAAD,MAA4B,KAAjBA,EAAMO,MAAjB,MAOnC3E,EAAAA,EAAAA,OAEI,OAFJ,oCAG0BtG,QAH1B,IAG0BA,OAH1B,EAG0BA,EAAQuG,UAHlC,2BAGuDvG,QAHvD,IAGuDA,OAHvD,EAGuDA,EAAQwG,KAH/D,uBAIIgC,GAED/B,MAAK,WACJnE,GAAa,GACb4C,GAAc,CAAC,KACfF,GAAa,CAAC,KACdoB,KACAnE,GAASkJ,EAAAA,EAAAA,IAAmB,qCAC7B,IACAtD,OAAM,SAACC,GACN7F,GAAS8F,EAAAA,EAAAA,IAAqBD,IAC9BxF,GAAa,EACd,GACJ,CAid8B8I,EAAN,EACTjC,MAAO,iCASxB,I,4BCtzBGkC,EAAyBC,EAAQ,OAKrCC,EAAQ,OAAU,EAElB,IAAIC,EAAiBH,EAAuBC,EAAQ,QAEhDG,EAAcH,EAAQ,OAEtBI,GAAW,EAAIF,EAAeG,UAAuB,EAAIF,EAAYG,KAAK,OAAQ,CACpFC,EAAG,wCACD,OAEJN,EAAQ,EAAUG,C,4BCfdL,EAAyBC,EAAQ,OAKrCC,EAAQ,OAAU,EAElB,IAAIC,EAAiBH,EAAuBC,EAAQ,QAEhDG,EAAcH,EAAQ,OAEtBI,GAAW,EAAIF,EAAeG,UAAuB,EAAIF,EAAYG,KAAK,OAAQ,CACpFC,EAAG,kFACD,UAEJN,EAAQ,EAAUG,C","sources":["screens/Console/Tenants/LogoComponents.tsx","screens/Console/Tenants/TenantDetails/TenantIdentityProvider.tsx","../node_modules/@mui/icons-material/Add.js","../node_modules/@mui/icons-material/Delete.js"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { Grid } from \"@mui/material\";\nimport LDAPIcon from \"../../../icons/LDAPIcon\";\nimport { OIDCIcon } from \"../../../icons\";\nimport { UsersIcon } from \"../../../icons\";\n\nexport const OIDCLogoElement = () => {\n  return (\n    <Grid container columnGap={1}>\n      <Grid>\n        <OIDCIcon width={\"16px\"} height={\"16px\"} />\n      </Grid>\n      <Grid item>Open ID</Grid>\n    </Grid>\n  );\n};\n\nexport const LDAPLogoElement = () => {\n  return (\n    <Grid container columnGap={1}>\n      <Grid>\n        <LDAPIcon width={\"16px\"} height={\"16px\"} />\n      </Grid>\n      <Grid item>LDAP / Active Directory</Grid>\n    </Grid>\n  );\n};\n\nexport const BuiltInLogoElement = () => {\n  return (\n    <Grid container columnGap={1}>\n      <Grid>\n        <UsersIcon width={\"16px\"} height={\"16px\"} />\n      </Grid>\n      <Grid item>Built-in</Grid>\n    </Grid>\n  );\n};\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { connect, useSelector } from \"react-redux\";\nimport {\n  DialogContentText,\n  IconButton,\n  Tooltip,\n  Typography,\n} from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport { Button } from \"mds\";\nimport Grid from \"@mui/material/Grid\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\nimport RemoveRedEyeIcon from \"@mui/icons-material/RemoveRedEye\";\nimport {\n  containerForHeader,\n  createTenantCommon,\n  formFieldStyles,\n  modalBasic,\n  spacingUtils,\n  tenantDetailsStyles,\n  wizardCommon,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport {\n  ITenantIdentityProviderResponse,\n  ITenantSetAdministratorsRequest,\n} from \"../types\";\nimport {\n  OIDCLogoElement,\n  LDAPLogoElement,\n  BuiltInLogoElement,\n} from \"../LogoComponents\";\nimport { clearValidationError } from \"../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../utils/validationFunctions\";\nimport { ConfirmModalIcon } from \"../../../../icons\";\nimport {\n  setErrorSnackMessage,\n  setSnackBarMessage,\n} from \"../../../../systemSlice\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport Loader from \"../../Common/Loader/Loader\";\nimport RadioGroupSelector from \"../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport FormSwitchWrapper from \"../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport api from \"../../../../common/api\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport SectionTitle from \"../../Common/SectionTitle\";\n\ninterface ITenantIdentityProvider {\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    adUserDnRows: {\n      display: \"flex\",\n      marginBottom: 10,\n    },\n    buttonTray: {\n      marginLeft: 10,\n      display: \"flex\",\n      height: 38,\n      \"& button\": {\n        background: \"#EAEAEA\",\n      },\n    },\n    overlayAction: {\n      marginLeft: 10,\n      \"& svg\": {\n        maxWidth: 15,\n        maxHeight: 15,\n      },\n      \"& button\": {\n        background: \"#EAEAEA\",\n      },\n    },\n    ...tenantDetailsStyles,\n    ...spacingUtils,\n    loaderAlign: {\n      textAlign: \"center\",\n    },\n    bold: { fontWeight: \"bold\" },\n    italic: { fontStyle: \"italic\" },\n    fileItem: {\n      marginRight: 10,\n      display: \"flex\",\n      \"& div label\": {\n        minWidth: 50,\n      },\n\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n      },\n    },\n    ...containerForHeader(theme.spacing(4)),\n    ...createTenantCommon,\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst TenantIdentityProvider = ({ classes }: ITenantIdentityProvider) => {\n  const dispatch = useAppDispatch();\n\n  const tenant = useSelector((state: AppState) => state.tenants.tenantInfo);\n  const loadingTenant = useSelector(\n    (state: AppState) => state.tenants.loadingTenant\n  );\n\n  const [isSending, setIsSending] = useState<boolean>(false);\n  const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n  const [idpSelection, setIdpSelection] = useState<string>(\"Built-in\");\n  const [openIDConfigurationURL, setOpenIDConfigurationURL] =\n    useState<string>(\"\");\n  const [openIDClientID, setOpenIDClientID] = useState<string>(\"\");\n  const [openIDSecretID, setOpenIDSecretID] = useState<string>(\"\");\n  const [showOIDCSecretID, setShowOIDCSecretID] = useState<boolean>(false);\n  const [openIDCallbackURL, setOpenIDCallbackURL] = useState<string>(\"\");\n  const [openIDClaimName, setOpenIDClaimName] = useState<string>(\"\");\n  const [openIDScopes, setOpenIDScopes] = useState<string>(\"\");\n  const [ADURL, setADURL] = useState<string>(\"\");\n  const [ADLookupBindDN, setADLookupBindDN] = useState<string>(\"\");\n  const [ADLookupBindPassword, setADLookupBindPassword] = useState<string>(\"\");\n  const [showADLookupBindPassword, setShowADLookupBindPassword] =\n    useState<boolean>(false);\n  const [ADUserDNSearchBaseDN, setADUserDNSearchBaseDN] = useState<string>(\"\");\n  const [ADUserDNSearchFilter, setADUserDNSearchFilter] = useState<string>(\"\");\n  const [ADGroupSearchBaseDN, setADGroupSearchBaseDN] = useState<string>(\"\");\n  const [ADGroupSearchFilter, setADGroupSearchFilter] = useState<string>(\"\");\n  const [ADSkipTLS, setADSkipTLS] = useState<boolean>(false);\n  const [ADServerInsecure, setADServerInsecure] = useState<boolean>(false);\n  const [ADServerStartTLS, setADServerStartTLS] = useState<boolean>(false);\n  const [ADUserDNs, setADUserDNs] = useState<string[]>([\"\"]);\n  const [ADGroupDNs, setADGroupDNs] = useState<string[]>([\"\"]);\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n  const [isFormValid, setIsFormValid] = useState<boolean>(false);\n\n  // Validation\n  useEffect(() => {\n    let identityProviderValidation: IValidation[] = [];\n\n    if (idpSelection === \"OpenID\") {\n      identityProviderValidation = [\n        ...identityProviderValidation,\n        {\n          fieldKey: \"openID_CONFIGURATION_URL\",\n          required: true,\n          value: openIDConfigurationURL,\n        },\n        {\n          fieldKey: \"openID_clientID\",\n          required: true,\n          value: openIDClientID,\n        },\n        {\n          fieldKey: \"openID_secretID\",\n          required: true,\n          value: openIDSecretID,\n        },\n        {\n          fieldKey: \"openID_claimName\",\n          required: true,\n          value: openIDClaimName,\n        },\n      ];\n    }\n\n    if (idpSelection === \"AD\") {\n      identityProviderValidation = [\n        ...identityProviderValidation,\n        {\n          fieldKey: \"AD_URL\",\n          required: true,\n          value: ADURL,\n        },\n        {\n          fieldKey: \"ad_lookupBindDN\",\n          required: true,\n          value: ADLookupBindDN,\n        },\n      ];\n    }\n\n    const commonVal = commonFormValidation(identityProviderValidation);\n\n    setIsFormValid(Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    idpSelection,\n    openIDConfigurationURL,\n    openIDClientID,\n    openIDSecretID,\n    openIDClaimName,\n    ADURL,\n    ADLookupBindDN,\n  ]);\n\n  const getTenantIdentityProviderInfo = useCallback(() => {\n    api\n      .invoke(\n        \"GET\",\n        `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/identity-provider`\n      )\n      .then((res: ITenantIdentityProviderResponse) => {\n        if (res) {\n          if (res.oidc) {\n            setIdpSelection(\"OpenID\");\n            setOpenIDConfigurationURL(res.oidc.configuration_url);\n            setOpenIDClientID(res.oidc.client_id);\n            setOpenIDSecretID(res.oidc.secret_id);\n            setOpenIDCallbackURL(res.oidc.callback_url);\n            setOpenIDClaimName(res.oidc.claim_name);\n            setOpenIDScopes(res.oidc.scopes);\n          } else if (res.active_directory) {\n            setIdpSelection(\"AD\");\n            setADURL(res.active_directory.url);\n            setADLookupBindDN(res.active_directory.lookup_bind_dn);\n            setADLookupBindPassword(res.active_directory.lookup_bind_password);\n            setADUserDNSearchBaseDN(\n              res.active_directory.user_dn_search_base_dn\n            );\n            setADUserDNSearchFilter(res.active_directory.user_dn_search_filter);\n            setADGroupSearchBaseDN(res.active_directory.group_search_base_dn);\n            setADGroupSearchFilter(res.active_directory.group_search_filter);\n            setADSkipTLS(res.active_directory.skip_tls_verification);\n            setADServerInsecure(res.active_directory.server_insecure);\n            setADServerStartTLS(res.active_directory.server_start_tls);\n          }\n        }\n      })\n      .catch((err: ErrorResponseHandler) => {\n        dispatch(setErrorSnackMessage(err));\n      });\n  }, [tenant, dispatch]);\n\n  useEffect(() => {\n    if (tenant) {\n      getTenantIdentityProviderInfo();\n    }\n  }, [tenant, getTenantIdentityProviderInfo]);\n\n  const updateTenantIdentityProvider = () => {\n    setIsSending(true);\n    let payload: ITenantIdentityProviderResponse = {};\n    switch (idpSelection) {\n      case \"AD\":\n        payload.active_directory = {\n          url: ADURL,\n          lookup_bind_dn: ADLookupBindDN,\n          lookup_bind_password: ADLookupBindPassword,\n          user_dn_search_base_dn: ADUserDNSearchBaseDN,\n          user_dn_search_filter: ADUserDNSearchFilter,\n          group_search_base_dn: ADGroupSearchBaseDN,\n          group_search_filter: ADGroupSearchFilter,\n          skip_tls_verification: ADSkipTLS,\n          server_insecure: ADServerInsecure,\n          server_start_tls: ADServerStartTLS,\n        };\n        break;\n      case \"OpenID\":\n        payload.oidc = {\n          configuration_url: openIDConfigurationURL,\n          client_id: openIDClientID,\n          secret_id: openIDSecretID,\n          callback_url: openIDCallbackURL,\n          claim_name: openIDClaimName,\n          scopes: openIDScopes,\n        };\n        break;\n      default:\n      // Built-in IDP will be used by default\n    }\n\n    api\n      .invoke(\n        \"POST\",\n        `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/identity-provider`,\n        payload\n      )\n      .then(() => {\n        setIsSending(false);\n        // Close confirmation modal\n        setDialogOpen(false);\n        getTenantIdentityProviderInfo();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        dispatch(setErrorSnackMessage(err));\n        setIsSending(false);\n      });\n  };\n\n  const setAdministrators = () => {\n    setIsSending(true);\n    let payload: ITenantSetAdministratorsRequest = {};\n    switch (idpSelection) {\n      case \"AD\":\n        payload = {\n          user_dns: ADUserDNs.filter((user) => user.trim() !== \"\"),\n          group_dns: ADGroupDNs.filter((group) => group.trim() !== \"\"),\n        };\n        break;\n      default:\n      // Built-in IDP will be used by default\n    }\n\n    api\n      .invoke(\n        \"POST\",\n        `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/set-administrators`,\n        payload\n      )\n      .then(() => {\n        setIsSending(false);\n        setADGroupDNs([\"\"]);\n        setADUserDNs([\"\"]);\n        getTenantIdentityProviderInfo();\n        dispatch(setSnackBarMessage(`Administrators added successfully`));\n      })\n      .catch((err: ErrorResponseHandler) => {\n        dispatch(setErrorSnackMessage(err));\n        setIsSending(false);\n      });\n  };\n\n  return (\n    <React.Fragment>\n      <ConfirmDialog\n        title={\"Save and Restart\"}\n        confirmText={\"Restart\"}\n        cancelText=\"Cancel\"\n        titleIcon={<ConfirmModalIcon />}\n        isLoading={isSending}\n        onClose={() => setDialogOpen(false)}\n        isOpen={dialogOpen}\n        onConfirm={updateTenantIdentityProvider}\n        confirmationContent={\n          <DialogContentText>\n            Are you sure you want to save the changes and restart the service?\n          </DialogContentText>\n        }\n      />\n      {loadingTenant ? (\n        <div className={classes.loaderAlign}>\n          <Loader />\n        </div>\n      ) : (\n        <Fragment>\n          <Grid item xs={12}>\n            <h1 className={classes.sectionTitle}>Identity Provider</h1>\n            <hr className={classes.hrClass} />\n          </Grid>\n          <Grid\n            item\n            xs={12}\n            className={classes.protocolRadioOptions}\n            paddingBottom={1}\n          >\n            <RadioGroupSelector\n              currentSelection={idpSelection}\n              id=\"idp-options\"\n              name=\"idp-options\"\n              label=\"Protocol\"\n              onChange={(e) => {\n                setIdpSelection(e.target.value);\n              }}\n              selectorOptions={[\n                { label: <BuiltInLogoElement />, value: \"Built-in\" },\n                { label: <OIDCLogoElement />, value: \"OpenID\" },\n                { label: <LDAPLogoElement />, value: \"AD\" },\n              ]}\n            />\n          </Grid>\n\n          {idpSelection === \"OpenID\" && (\n            <Fragment>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"openID_CONFIGURATION_URL\"\n                  name=\"openID_CONFIGURATION_URL\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setOpenIDConfigurationURL(e.target.value);\n                    cleanValidation(\"openID_CONFIGURATION_URL\");\n                  }}\n                  label=\"Configuration URL\"\n                  value={openIDConfigurationURL}\n                  placeholder=\"https://your-identity-provider.com/.well-known/openid-configuration\"\n                  error={validationErrors[\"openID_CONFIGURATION_URL\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"openID_clientID\"\n                  name=\"openID_clientID\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setOpenIDClientID(e.target.value);\n                    cleanValidation(\"openID_clientID\");\n                  }}\n                  label=\"Client ID\"\n                  value={openIDClientID}\n                  error={validationErrors[\"openID_clientID\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  type={showOIDCSecretID ? \"text\" : \"password\"}\n                  id=\"openID_secretID\"\n                  name=\"openID_secretID\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setOpenIDSecretID(e.target.value);\n                    cleanValidation(\"openID_secretID\");\n                  }}\n                  label=\"Secret ID\"\n                  value={openIDSecretID}\n                  error={validationErrors[\"openID_secretID\"] || \"\"}\n                  required\n                  overlayIcon={\n                    showOIDCSecretID ? (\n                      <VisibilityOffIcon />\n                    ) : (\n                      <RemoveRedEyeIcon />\n                    )\n                  }\n                  overlayAction={() => setShowOIDCSecretID(!showOIDCSecretID)}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"openID_callbackURL\"\n                  name=\"openID_callbackURL\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setOpenIDCallbackURL(e.target.value);\n                    cleanValidation(\"openID_callbackURL\");\n                  }}\n                  label=\"Callback URL\"\n                  value={openIDCallbackURL}\n                  placeholder=\"https://your-console-endpoint:9443/oauth_callback\"\n                  error={validationErrors[\"openID_callbackURL\"] || \"\"}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"openID_claimName\"\n                  name=\"openID_claimName\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setOpenIDClaimName(e.target.value);\n                    cleanValidation(\"openID_claimName\");\n                  }}\n                  label=\"Claim Name\"\n                  value={openIDClaimName}\n                  error={validationErrors[\"openID_claimName\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"openID_scopes\"\n                  name=\"openID_scopes\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setOpenIDScopes(e.target.value);\n                    cleanValidation(\"openID_scopes\");\n                  }}\n                  label=\"Scopes\"\n                  value={openIDScopes}\n                />\n              </Grid>\n            </Fragment>\n          )}\n\n          {idpSelection === \"AD\" && (\n            <Fragment>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"AD_URL\"\n                  name=\"AD_URL\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADURL(e.target.value);\n                    cleanValidation(\"AD_URL\");\n                  }}\n                  label=\"LDAP Server Address\"\n                  value={ADURL}\n                  placeholder=\"ldap-server:636\"\n                  error={validationErrors[\"AD_URL\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <FormSwitchWrapper\n                  value=\"ad_skipTLS\"\n                  id=\"ad_skipTLS\"\n                  name=\"ad_skipTLS\"\n                  checked={ADSkipTLS}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    setADSkipTLS(checked);\n                  }}\n                  label={\"Skip TLS Verification\"}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <FormSwitchWrapper\n                  value=\"ad_serverInsecure\"\n                  id=\"ad_serverInsecure\"\n                  name=\"ad_serverInsecure\"\n                  checked={ADServerInsecure}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    setADServerInsecure(checked);\n                  }}\n                  label={\"Server Insecure\"}\n                />\n              </Grid>\n              {ADServerInsecure ? (\n                <Grid item xs={12}>\n                  <Typography\n                    className={classes.error}\n                    variant=\"caption\"\n                    display=\"block\"\n                    gutterBottom\n                  >\n                    Warning: All traffic with Active Directory will be\n                    unencrypted\n                  </Typography>\n                  <br />\n                </Grid>\n              ) : null}\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <FormSwitchWrapper\n                  value=\"ad_serverStartTLS\"\n                  id=\"ad_serverStartTLS\"\n                  name=\"ad_serverStartTLS\"\n                  checked={ADServerStartTLS}\n                  onChange={(e) => {\n                    const targetD = e.target;\n                    const checked = targetD.checked;\n                    setADServerStartTLS(checked);\n                  }}\n                  label={\"Start TLS connection to AD/LDAP server\"}\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"ad_lookupBindDN\"\n                  name=\"ad_lookupBindDN\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADLookupBindDN(e.target.value);\n                    cleanValidation(\"ad_lookupBindDN\");\n                  }}\n                  label=\"Lookup Bind DN\"\n                  value={ADLookupBindDN}\n                  placeholder=\"cn=admin,dc=min,dc=io\"\n                  error={validationErrors[\"ad_lookupBindDN\"] || \"\"}\n                  required\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  type={showADLookupBindPassword ? \"text\" : \"password\"}\n                  id=\"ad_lookupBindPassword\"\n                  name=\"ad_lookupBindPassword\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADLookupBindPassword(e.target.value);\n                  }}\n                  label=\"Lookup Bind Password\"\n                  value={ADLookupBindPassword}\n                  placeholder=\"admin\"\n                  overlayIcon={\n                    showADLookupBindPassword ? (\n                      <VisibilityOffIcon />\n                    ) : (\n                      <RemoveRedEyeIcon />\n                    )\n                  }\n                  overlayAction={() =>\n                    setShowADLookupBindPassword(!showADLookupBindPassword)\n                  }\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"ad_userDNSearchBaseDN\"\n                  name=\"ad_userDNSearchBaseDN\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADUserDNSearchBaseDN(e.target.value);\n                  }}\n                  label=\"User DN Search Base DN\"\n                  value={ADUserDNSearchBaseDN}\n                  placeholder=\"dc=min,dc=io\"\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"ad_userDNSearchFilter\"\n                  name=\"ad_userDNSearchFilter\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADUserDNSearchFilter(e.target.value);\n                  }}\n                  label=\"User DN Search Filter\"\n                  value={ADUserDNSearchFilter}\n                  placeholder=\"(sAMAcountName=%s)\"\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"ad_groupSearchBaseDN\"\n                  name=\"ad_groupSearchBaseDN\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADGroupSearchBaseDN(e.target.value);\n                  }}\n                  label=\"Group Search Base DN\"\n                  value={ADGroupSearchBaseDN}\n                  placeholder=\"ou=hwengg,dc=min,dc=io;ou=swengg,dc=min,dc=io\"\n                />\n              </Grid>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"ad_groupSearchFilter\"\n                  name=\"ad_groupSearchFilter\"\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setADGroupSearchFilter(e.target.value);\n                  }}\n                  label=\"Group Search Filter\"\n                  value={ADGroupSearchFilter}\n                  placeholder=\"(&(objectclass=groupOfNames)(member=%s))\"\n                />\n              </Grid>\n            </Fragment>\n          )}\n\n          <Grid item xs={12} className={classes.buttonContainer}>\n            <Button\n              id={\"save-idp\"}\n              type=\"submit\"\n              variant=\"callAction\"\n              color=\"primary\"\n              disabled={!isFormValid || isSending}\n              onClick={() => setDialogOpen(true)}\n              label={\"Save\"}\n            />\n          </Grid>\n\n          {idpSelection === \"AD\" && (\n            <Fragment>\n              <SectionTitle>User & Group management</SectionTitle>\n              <br />\n              <fieldset className={classes.fieldGroup}>\n                <legend className={classes.descriptionText}>\n                  List of user DNs (Distinguished Names) to be added as Tenant\n                  Administrators\n                </legend>\n                <Grid item xs={12}>\n                  {ADUserDNs.map((_, index) => {\n                    return (\n                      <Fragment key={`identityField-${index.toString()}`}>\n                        <div className={classes.adUserDnRows}>\n                          <InputBoxWrapper\n                            id={`ad-userdn-${index.toString()}`}\n                            label={\"\"}\n                            placeholder=\"\"\n                            name={`ad-userdn-${index.toString()}`}\n                            value={ADUserDNs[index]}\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>\n                            ) => {\n                              setADUserDNs(\n                                ADUserDNs.map((group, i) =>\n                                  i === index ? e.target.value : group\n                                )\n                              );\n                            }}\n                            index={index}\n                            key={`csv-ad-userdn-${index.toString()}`}\n                            error={\n                              validationErrors[\n                                `ad-userdn-${index.toString()}`\n                              ] || \"\"\n                            }\n                          />\n                          <div className={classes.buttonTray}>\n                            <Tooltip title=\"Add User\" aria-label=\"add\">\n                              <IconButton\n                                size={\"small\"}\n                                onClick={() => {\n                                  setADUserDNs([...ADUserDNs, \"\"]);\n                                }}\n                              >\n                                <AddIcon />\n                              </IconButton>\n                            </Tooltip>\n                            <Tooltip title=\"Remove\" aria-label=\"add\">\n                              <IconButton\n                                size={\"small\"}\n                                style={{ marginLeft: 16 }}\n                                onClick={() => {\n                                  if (ADUserDNs.length > 1) {\n                                    setADUserDNs(\n                                      ADUserDNs.filter((_, i) => i !== index)\n                                    );\n                                  }\n                                }}\n                              >\n                                <DeleteIcon />\n                              </IconButton>\n                            </Tooltip>\n                          </div>\n                        </div>\n                      </Fragment>\n                    );\n                  })}\n                </Grid>\n              </fieldset>\n              <fieldset className={classes.fieldGroup}>\n                <legend className={classes.descriptionText}>\n                  List of group DNs (Distinguished Names) to be added as Tenant\n                  Administrators\n                </legend>\n                <Grid item xs={12}>\n                  {ADGroupDNs.map((_, index) => {\n                    return (\n                      <Fragment key={`identityField-${index.toString()}`}>\n                        <div className={classes.adUserDnRows}>\n                          <InputBoxWrapper\n                            id={`ad-groupdn-${index.toString()}`}\n                            label={\"\"}\n                            placeholder=\"\"\n                            name={`ad-groupdn-${index.toString()}`}\n                            value={ADGroupDNs[index]}\n                            onChange={(\n                              e: React.ChangeEvent<HTMLInputElement>\n                            ) => {\n                              setADGroupDNs(\n                                ADGroupDNs.map((group, i) =>\n                                  i === index ? e.target.value : group\n                                )\n                              );\n                            }}\n                            index={index}\n                            key={`csv-ad-groupdn-${index.toString()}`}\n                            error={\n                              validationErrors[\n                                `ad-groupdn-${index.toString()}`\n                              ] || \"\"\n                            }\n                          />\n                          <div className={classes.buttonTray}>\n                            <Tooltip title=\"Add Group\" aria-label=\"add\">\n                              <IconButton\n                                size={\"small\"}\n                                onClick={() => {\n                                  setADGroupDNs([...ADGroupDNs, \"\"]);\n                                }}\n                              >\n                                <AddIcon />\n                              </IconButton>\n                            </Tooltip>\n                            <Tooltip title=\"Remove\" aria-label=\"add\">\n                              <IconButton\n                                size={\"small\"}\n                                style={{ marginLeft: 16 }}\n                                onClick={() => {\n                                  if (ADGroupDNs.length > 1) {\n                                    setADGroupDNs(\n                                      ADGroupDNs.filter((_, i) => i !== index)\n                                    );\n                                  }\n                                }}\n                              >\n                                <DeleteIcon />\n                              </IconButton>\n                            </Tooltip>\n                          </div>\n                        </div>\n                      </Fragment>\n                    );\n                  })}\n                </Grid>\n              </fieldset>\n              <br />\n              <Grid item xs={12} className={classes.buttonContainer}>\n                <Button\n                  id={\"add-additional-dns\"}\n                  type=\"submit\"\n                  variant=\"callAction\"\n                  disabled={!isFormValid || isSending}\n                  onClick={() => setAdministrators()}\n                  label={\"Add additional DNs\"}\n                />\n              </Grid>\n            </Fragment>\n          )}\n        </Fragment>\n      )}\n    </React.Fragment>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  loadingTenant: state.tenants.loadingTenant,\n  selectedTenant: state.tenants.currentTenant,\n  tenant: state.tenants.tenantInfo,\n});\n\nconst connector = connect(mapState, null);\n\nexport default withStyles(styles)(connector(TenantIdentityProvider));\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');\n\nexports.default = _default;"],"names":["OIDCLogoElement","container","columnGap","width","height","item","LDAPLogoElement","BuiltInLogoElement","connector","connect","state","loadingTenant","tenants","selectedTenant","currentTenant","tenant","tenantInfo","withStyles","theme","createStyles","adUserDnRows","display","marginBottom","buttonTray","marginLeft","background","overlayAction","maxWidth","maxHeight","tenantDetailsStyles","spacingUtils","loaderAlign","textAlign","bold","fontWeight","italic","fontStyle","fileItem","marginRight","minWidth","flexFlow","containerForHeader","spacing","createTenantCommon","formFieldStyles","modalBasic","wizardCommon","classes","dispatch","useAppDispatch","useSelector","useState","isSending","setIsSending","dialogOpen","setDialogOpen","idpSelection","setIdpSelection","openIDConfigurationURL","setOpenIDConfigurationURL","openIDClientID","setOpenIDClientID","openIDSecretID","setOpenIDSecretID","showOIDCSecretID","setShowOIDCSecretID","openIDCallbackURL","setOpenIDCallbackURL","openIDClaimName","setOpenIDClaimName","openIDScopes","setOpenIDScopes","ADURL","setADURL","ADLookupBindDN","setADLookupBindDN","ADLookupBindPassword","setADLookupBindPassword","showADLookupBindPassword","setShowADLookupBindPassword","ADUserDNSearchBaseDN","setADUserDNSearchBaseDN","ADUserDNSearchFilter","setADUserDNSearchFilter","ADGroupSearchBaseDN","setADGroupSearchBaseDN","ADGroupSearchFilter","setADGroupSearchFilter","ADSkipTLS","setADSkipTLS","ADServerInsecure","setADServerInsecure","ADServerStartTLS","setADServerStartTLS","ADUserDNs","setADUserDNs","ADGroupDNs","setADGroupDNs","validationErrors","setValidationErrors","cleanValidation","fieldName","clearValidationError","isFormValid","setIsFormValid","useEffect","identityProviderValidation","fieldKey","required","value","commonVal","commonFormValidation","Object","keys","length","getTenantIdentityProviderInfo","useCallback","api","namespace","name","then","res","oidc","configuration_url","client_id","secret_id","callback_url","claim_name","scopes","active_directory","url","lookup_bind_dn","lookup_bind_password","user_dn_search_base_dn","user_dn_search_filter","group_search_base_dn","group_search_filter","skip_tls_verification","server_insecure","server_start_tls","catch","err","setErrorSnackMessage","title","confirmText","cancelText","titleIcon","isLoading","onClose","isOpen","onConfirm","payload","confirmationContent","className","Fragment","xs","sectionTitle","hrClass","protocolRadioOptions","paddingBottom","currentSelection","id","label","onChange","e","target","selectorOptions","formFieldRow","placeholder","error","type","overlayIcon","checked","variant","gutterBottom","buttonContainer","color","disabled","onClick","fieldGroup","descriptionText","map","_","index","toString","group","i","size","style","filter","user_dns","user","trim","group_dns","setSnackBarMessage","setAdministrators","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}