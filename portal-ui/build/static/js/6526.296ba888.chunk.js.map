{"version":3,"file":"static/js/6526.296ba888.chunk.js","mappings":"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","sources":["screens/Console/Support/Register.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { Theme } from \"@mui/material/styles\";\nimport { Button } from \"mds\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport {\n  actionsTray,\n  containerForHeader,\n  searchField,\n  spacingUtils,\n} from \"../Common/FormComponents/common/styleLibrary\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Box, Link } from \"@mui/material\";\nimport PageHeader from \"../Common/PageHeader/PageHeader\";\nimport PageLayout from \"../Common/Layout/PageLayout\";\nimport { CopyIcon, UsersIcon } from \"../../../icons\";\nimport RemoveRedEyeIcon from \"@mui/icons-material/RemoveRedEye\";\nimport VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\nimport OnlineRegistrationIcon from \"../../../icons/OnlineRegistrationIcon\";\nimport OfflineRegistrationIcon from \"../../../icons/OfflineRegistrationIcon\";\nimport InputBoxWrapper from \"../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport api from \"../../../common/api\";\n\nimport {\n  SubnetInfo,\n  SubnetLoginRequest,\n  SubnetLoginResponse,\n  SubnetLoginWithMFARequest,\n  SubnetOrganization,\n  SubnetRegisterRequest,\n  SubnetRegTokenResponse,\n} from \"../License/types\";\nimport { ErrorResponseHandler } from \"../../../common/types\";\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\nimport SelectWrapper from \"../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport { hasPermission } from \"../../../common/SecureComponent\";\nimport {\n  CONSOLE_UI_RESOURCE,\n  IAM_PAGES,\n  IAM_PAGES_PERMISSIONS,\n} from \"../../../common/SecureComponent/permissions\";\nimport { useSelector } from \"react-redux\";\n\nimport RegisterHelpBox from \"./RegisterHelpBox\";\nimport { selOpMode, setErrorSnackMessage } from \"../../../systemSlice\";\nimport { useAppDispatch } from \"../../../store\";\nimport Tabs from \"@mui/material/Tabs\";\nimport Tab from \"@mui/material/Tab\";\nimport { TabPanel } from \"../../shared/tabs\";\nimport { ClusterRegistered, FormTitle, ProxyConfiguration } from \"./utils\";\nimport ApiKeyRegister from \"./ApiKeyRegister\";\ninterface IRegister {\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    registerActivationIcon: {\n      color: theme.palette.primary.main,\n      fontSize: 16,\n      fontWeight: \"bold\",\n      marginBottom: 20,\n      \"& .min-icon\": {\n        width: 32.12,\n        height: 25,\n        marginRight: 10,\n        verticalAlign: \"middle\",\n      },\n    },\n    registerActivationMode: {\n      textAlign: \"right\",\n      \"& a\": {\n        cursor: \"pointer\",\n      },\n    },\n    subnetDescription: {\n      textAlign: \"left\",\n      Font: \"normal normal normal 14px/17px Lato\",\n      letterSpacing: 0,\n      color: \"#000000\",\n      \"& span\": {\n        fontWeight: \"bold\",\n      },\n    },\n    registeredStatus: {\n      border: \"1px solid #E2E2E2\",\n      padding: \"24px 24px 24px 24px\",\n      borderRadius: 2,\n      marginBottom: 25,\n      backgroundColor: \"#FBFAFA\",\n      \"& .min-icon\": {\n        width: 20,\n        height: 20,\n        marginLeft: 48,\n        marginRight: 13,\n        verticalAlign: \"middle\",\n        marginTop: -3,\n      },\n      \"& span\": {\n        fontWeight: \"bold\",\n      },\n    },\n    copyInputBox: {\n      \"& button\": {\n        border: \"1px solid #5E5E5E\",\n        borderRadius: 2,\n      },\n    },\n    link: {\n      color: \"#2781B0\",\n      cursor: \"pointer\",\n    },\n    sizedLabel: {\n      minWidth: \"75px\",\n    },\n    ...actionsTray,\n    ...searchField,\n    ...spacingUtils,\n    ...containerForHeader(theme.spacing(4)),\n  });\n\nconst Register = ({ classes }: IRegister) => {\n  const dispatch = useAppDispatch();\n  const operatorMode = useSelector(selOpMode);\n  const [license, setLicense] = useState<string>(\"\");\n  const [subnetPassword, setSubnetPassword] = useState<string>(\"\");\n  const [subnetEmail, setSubnetEmail] = useState<string>(\"\");\n  const [subnetMFAToken, setSubnetMFAToken] = useState<string>(\"\");\n  const [subnetOTP, setSubnetOTP] = useState<string>(\"\");\n  const [subnetAccessToken, setSubnetAccessToken] = useState<string>(\"\");\n  const [selectedSubnetOrganization, setSelectedSubnetOrganization] =\n    useState<string>(\"\");\n  const [subnetRegToken, setSubnetRegToken] = useState<string>(\"\");\n  const [subnetOrganizations, setSubnetOrganizations] = useState<\n    SubnetOrganization[]\n  >([]);\n  const [showPassword, setShowPassword] = useState<boolean>(false);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [loadingLicenseInfo, setLoadingLicenseInfo] = useState<boolean>(false);\n  const [clusterRegistered, setClusterRegistered] = useState<boolean>(false);\n  const [licenseInfo, setLicenseInfo] = useState<SubnetInfo | undefined>();\n  const [curTab, setCurTab] = useState<number>(0);\n\n  const [initialLicenseLoading, setInitialLicenseLoading] =\n    useState<boolean>(true);\n  const clearForm = () => {\n    setSubnetAccessToken(\"\");\n    setSelectedSubnetOrganization(\"\");\n    setSubnetRegToken(\"\");\n    setShowPassword(false);\n    setSubnetOrganizations([]);\n    setLicense(\"\");\n    setSubnetPassword(\"\");\n    setSubnetEmail(\"\");\n    setSubnetMFAToken(\"\");\n    setSubnetOTP(\"\");\n  };\n\n  const getSubnetInfo = hasPermission(\n    CONSOLE_UI_RESOURCE,\n    IAM_PAGES_PERMISSIONS[IAM_PAGES.LICENSE],\n    true\n  );\n\n  const fetchLicenseInfo = useCallback(() => {\n    if (loadingLicenseInfo) {\n      return;\n    }\n    if (getSubnetInfo) {\n      setLoadingLicenseInfo(true);\n      api\n        .invoke(\"GET\", `/api/v1/subnet/info`)\n        .then((res: SubnetInfo) => {\n          setLicenseInfo(res);\n          setClusterRegistered(true);\n          setLoadingLicenseInfo(false);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          if (\n            err.detailedError.toLowerCase() !==\n            \"License is not present\".toLowerCase()\n          ) {\n            dispatch(setErrorSnackMessage(err));\n          }\n          setClusterRegistered(false);\n          setLoadingLicenseInfo(false);\n        });\n    } else {\n      setLoadingLicenseInfo(false);\n    }\n  }, [loadingLicenseInfo, getSubnetInfo, dispatch]);\n\n  const fetchSubnetRegToken = () => {\n    if (loading || subnetRegToken) {\n      return;\n    }\n    setLoading(true);\n    api\n      .invoke(\"GET\", \"/api/v1/subnet/registration-token\")\n      .then((resp: SubnetRegTokenResponse) => {\n        setLoading(false);\n        if (resp && resp.regToken) {\n          setSubnetRegToken(resp.regToken);\n        }\n      })\n      .catch((err: ErrorResponseHandler) => {\n        console.error(err);\n        dispatch(setErrorSnackMessage(err));\n        setLoading(false);\n      });\n  };\n\n  const callRegister = (token: string, account_id: string) => {\n    const request: SubnetRegisterRequest = {\n      token: token,\n      account_id: account_id,\n    };\n    api\n      .invoke(\"POST\", \"/api/v1/subnet/register\", request)\n      .then(() => {\n        setLoading(false);\n        clearForm();\n        fetchLicenseInfo();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        dispatch(setErrorSnackMessage(err));\n        setLoading(false);\n      });\n  };\n  const subnetRegister = () => {\n    if (loading) {\n      return;\n    }\n    setLoading(true);\n    if (subnetAccessToken && selectedSubnetOrganization) {\n      callRegister(subnetAccessToken, selectedSubnetOrganization);\n    }\n  };\n\n  const subnetLoginWithMFA = () => {\n    if (loading) {\n      return;\n    }\n    setLoading(true);\n    const request: SubnetLoginWithMFARequest = {\n      username: subnetEmail,\n      otp: subnetOTP,\n      mfa_token: subnetMFAToken,\n    };\n    api\n      .invoke(\"POST\", \"/api/v1/subnet/login/mfa\", request)\n      .then((resp: SubnetLoginResponse) => {\n        setLoading(false);\n        if (resp && resp.access_token && resp.organizations.length > 0) {\n          if (resp.organizations.length === 1) {\n            callRegister(\n              resp.access_token,\n              resp.organizations[0].accountId.toString()\n            );\n          } else {\n            setSubnetAccessToken(resp.access_token);\n            setSubnetOrganizations(resp.organizations);\n            setSelectedSubnetOrganization(\n              resp.organizations[0].accountId.toString()\n            );\n          }\n        }\n      })\n      .catch((err: ErrorResponseHandler) => {\n        dispatch(setErrorSnackMessage(err));\n        setLoading(false);\n        setSubnetOTP(\"\");\n      });\n  };\n\n  const subnetLogin = () => {\n    if (loading) {\n      return;\n    }\n    setLoading(true);\n    let request: SubnetLoginRequest = {\n      username: subnetEmail,\n      password: subnetPassword,\n      apiKey: license,\n    };\n    api\n      .invoke(\"POST\", \"/api/v1/subnet/login\", request)\n      .then((resp: SubnetLoginResponse) => {\n        setLoading(false);\n        if (resp && resp.registered) {\n          clearForm();\n          fetchLicenseInfo();\n        } else if (resp && resp.mfa_token) {\n          setSubnetMFAToken(resp.mfa_token);\n        } else if (resp && resp.access_token && resp.organizations.length > 0) {\n          setSubnetAccessToken(resp.access_token);\n          setSubnetOrganizations(resp.organizations);\n          setSelectedSubnetOrganization(\n            resp.organizations[0].accountId.toString()\n          );\n        }\n      })\n      .catch((err: ErrorResponseHandler) => {\n        dispatch(setErrorSnackMessage(err));\n        setLoading(false);\n        clearForm();\n      });\n  };\n\n  useEffect(() => {\n    if (initialLicenseLoading) {\n      fetchLicenseInfo();\n      setInitialLicenseLoading(false);\n    }\n  }, [fetchLicenseInfo, initialLicenseLoading, setInitialLicenseLoading]);\n\n  let clusterRegistrationForm: JSX.Element = <Fragment />;\n\n  if (subnetAccessToken && subnetOrganizations.length > 0) {\n    clusterRegistrationForm = (\n      <Box\n        sx={{\n          display: \"flex\",\n        }}\n      >\n        <Box\n          sx={{\n            display: \"flex\",\n            flexFlow: \"column\",\n            flex: \"2\",\n          }}\n        >\n          <Box\n            sx={{\n              marginTop: \"15px\",\n              marginBottom: \"15px\",\n              \"& .title-text\": {\n                marginLeft: \"0px\",\n              },\n            }}\n          >\n            <FormTitle title={`Register MinIO cluster`} />\n          </Box>\n          <Box>\n            <SelectWrapper\n              id=\"subnet-organization\"\n              name=\"subnet-organization\"\n              onChange={(e) =>\n                setSelectedSubnetOrganization(e.target.value as string)\n              }\n              label=\"Select an organization\"\n              value={selectedSubnetOrganization}\n              options={subnetOrganizations.map((organization) => ({\n                label: organization.company,\n                value: organization.accountId.toString(),\n              }))}\n            />\n            <Box\n              sx={{\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"flex-end\",\n                marginTop: \"15px\",\n              }}\n            >\n              <Button\n                id={\"register-cluster\"}\n                onClick={() => subnetRegister()}\n                disabled={loading || subnetAccessToken.trim().length === 0}\n                variant=\"callAction\"\n                label={\"Register\"}\n              />\n            </Box>\n          </Box>\n        </Box>\n        <RegisterHelpBox />\n      </Box>\n    );\n  } else if (subnetMFAToken) {\n    clusterRegistrationForm = (\n      <Box\n        sx={{\n          display: \"flex\",\n        }}\n      >\n        <Box\n          sx={{\n            display: \"flex\",\n            flexFlow: \"column\",\n            flex: \"2\",\n          }}\n        >\n          <Box\n            sx={{\n              fontSize: \"16px\",\n              display: \"flex\",\n              flexFlow: \"column\",\n              marginTop: \"30px\",\n              marginBottom: \"30px\",\n            }}\n          >\n            Two-Factor Authentication\n          </Box>\n\n          <Box>\n            Please enter the 6-digit verification code that was sent to your\n            email address. This code will be valid for 5 minutes.\n          </Box>\n\n          <Box\n            sx={{\n              flex: \"1\",\n              marginTop: \"30px\",\n            }}\n          >\n            <InputBoxWrapper\n              overlayIcon={<LockOutlinedIcon />}\n              id=\"subnet-otp\"\n              name=\"subnet-otp\"\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n                setSubnetOTP(event.target.value)\n              }\n              placeholder=\"\"\n              label=\"\"\n              value={subnetOTP}\n            />\n          </Box>\n          <Box\n            sx={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"flex-end\",\n            }}\n          >\n            <Button\n              id={\"verify\"}\n              onClick={() => subnetLoginWithMFA()}\n              disabled={\n                loading ||\n                subnetOTP.trim().length === 0 ||\n                subnetMFAToken.trim().length === 0\n              }\n              variant=\"callAction\"\n              label={\"Verify\"}\n            />\n          </Box>\n        </Box>\n\n        <RegisterHelpBox />\n      </Box>\n    );\n  } else {\n    clusterRegistrationForm = (\n      <Fragment>\n        <Box\n          sx={{\n            \"& .title-text\": {\n              marginLeft: \"27px\",\n              fontWeight: 600,\n            },\n          }}\n        >\n          <FormTitle\n            icon={<OnlineRegistrationIcon />}\n            title={`Online activation of MinIO Subscription Network License`}\n          />\n        </Box>\n        <Box\n          sx={{\n            display: \"flex\",\n            flexFlow: {\n              xs: \"column\",\n              md: \"row\",\n            },\n          }}\n        >\n          <Box\n            sx={{\n              display: \"flex\",\n              flexFlow: \"column\",\n              flex: \"2\",\n            }}\n          >\n            <Box\n              sx={{\n                fontSize: \"16px\",\n                display: \"flex\",\n                flexFlow: \"column\",\n                marginTop: \"30px\",\n                marginBottom: \"30px\",\n              }}\n            >\n              Use your MinIO Subscription Network login credentials to register\n              this cluster.\n            </Box>\n            <Box\n              sx={{\n                flex: \"1\",\n              }}\n            >\n              <InputBoxWrapper\n                className={classes.spacerBottom}\n                classes={{\n                  inputLabel: classes.sizedLabel,\n                }}\n                id=\"subnet-email\"\n                name=\"subnet-email\"\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n                  setSubnetEmail(event.target.value)\n                }\n                label=\"Email\"\n                value={subnetEmail}\n                overlayIcon={<UsersIcon />}\n              />\n              <InputBoxWrapper\n                className={classes.spacerBottom}\n                classes={{\n                  inputLabel: classes.sizedLabel,\n                }}\n                id=\"subnet-password\"\n                name=\"subnet-password\"\n                onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n                  setSubnetPassword(event.target.value)\n                }\n                label=\"Password\"\n                type={showPassword ? \"text\" : \"password\"}\n                value={subnetPassword}\n                overlayIcon={\n                  showPassword ? <VisibilityOffIcon /> : <RemoveRedEyeIcon />\n                }\n                overlayAction={() => setShowPassword(!showPassword)}\n              />\n\n              <Box\n                sx={{\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"flex-end\",\n                  \"& button\": {\n                    marginLeft: \"8px\",\n                  },\n                }}\n              >\n                <Button\n                  id={\"sign-up\"}\n                  type=\"submit\"\n                  className={classes.spacerRight}\n                  variant=\"regular\"\n                  onClick={(e) => {\n                    e.preventDefault();\n                    window.open(\n                      `https://min.io/signup?ref=${\n                        operatorMode ? \"op\" : \"con\"\n                      }`,\n                      \"_blank\"\n                    );\n                  }}\n                  label={\"Sign up\"}\n                />\n                <Button\n                  id={\"register-credentials\"}\n                  type=\"submit\"\n                  variant=\"callAction\"\n                  disabled={\n                    loading ||\n                    subnetEmail.trim().length === 0 ||\n                    subnetPassword.trim().length === 0\n                  }\n                  onClick={() => subnetLogin()}\n                  label={\"Register\"}\n                />\n              </Box>\n            </Box>\n          </Box>\n          <RegisterHelpBox />\n        </Box>\n      </Fragment>\n    );\n  }\n\n  const apiKeyRegistration = (\n    <Fragment>\n      <Box\n        sx={{\n          border: \"1px solid #eaeaea\",\n          borderRadius: \"2px\",\n          display: \"flex\",\n          flexFlow: \"column\",\n          padding: \"43px\",\n        }}\n      >\n        {clusterRegistered && licenseInfo ? (\n          <ClusterRegistered\n            email={licenseInfo.email}\n            linkClass={classes.link}\n          />\n        ) : (\n          <ApiKeyRegister\n            afterRegister={fetchLicenseInfo}\n            registerEndpoint={\"/api/v1/subnet/login\"}\n          />\n        )}\n      </Box>\n      <ProxyConfiguration linkClass={classes.link} />\n    </Fragment>\n  );\n\n  const offlineRegistration = (\n    <Fragment>\n      <Box\n        sx={{\n          border: \"1px solid #eaeaea\",\n          borderRadius: \"2px\",\n          display: \"flex\",\n          flexFlow: \"column\",\n          padding: \"43px\",\n        }}\n      >\n        {clusterRegistered && licenseInfo ? (\n          <ClusterRegistered\n            email={licenseInfo.email}\n            linkClass={classes.link}\n          />\n        ) : null}\n        <Box\n          sx={{\n            \"& .title-text\": {\n              marginLeft: \"27px\",\n              fontWeight: 600,\n            },\n          }}\n        >\n          <FormTitle\n            icon={<OfflineRegistrationIcon />}\n            title={`Register cluster in an Airgap environment`}\n          />\n        </Box>\n\n        <Box\n          sx={{\n            display: \"flex\",\n          }}\n        >\n          <Box\n            sx={{\n              display: \"flex\",\n              flexFlow: \"column\",\n              flex: \"2\",\n              marginTop: \"15px\",\n              \"& .step-number\": {\n                color: \"#ffffff\",\n                height: \"25px\",\n                width: \"25px\",\n                background: \"#081C42\",\n                marginRight: \"10px\",\n                textAlign: \"center\",\n                fontWeight: 600,\n                borderRadius: \"50%\",\n              },\n\n              \"& .step-row\": {\n                fontSize: \"16px\",\n                display: \"flex\",\n                marginTop: \"15px\",\n                marginBottom: \"15px\",\n              },\n            }}\n          >\n            <Box>\n              <Box className=\"step-row\">\n                <div className=\"step-number\">1</div>{\" \"}\n                <div className=\"step-text\">\n                  Copy the following registration token\n                </div>\n              </Box>\n\n              <Box\n                sx={{\n                  flex: \"1\",\n                  marginTop: \"15px\",\n                  marginLeft: \"35px\",\n                  \"& input\": {\n                    color: \"#737373\",\n                  },\n                }}\n              >\n                <InputBoxWrapper\n                  id=\"registration-token\"\n                  name=\"registration-token\"\n                  placeholder=\"\"\n                  label=\"\"\n                  type=\"text\"\n                  onChange={() => {}}\n                  value={subnetRegToken}\n                  overlayIcon={<CopyIcon />}\n                  extraInputProps={{\n                    readOnly: true,\n                  }}\n                  overlayAction={() =>\n                    navigator.clipboard.writeText(subnetRegToken)\n                  }\n                />\n              </Box>\n            </Box>\n\n            <Box>\n              <Box className=\"step-row\">\n                <div className=\"step-number\">2</div>\n                <div className=\"step-text\">\n                  Navigate to SUBNET and register your cluster\n                </div>\n              </Box>\n\n              <Box\n                sx={{\n                  flex: \"1\",\n                  marginLeft: \"35px\",\n                }}\n              >\n                <Link\n                  className={classes.link}\n                  color=\"inherit\"\n                  href=\"https://subnet.min.io/cluster/register\"\n                  target=\"_blank\"\n                >\n                  https://subnet.min.io/cluster/register\n                </Link>\n              </Box>\n            </Box>\n\n            <Box\n              sx={{\n                fontSize: \"16px\",\n                display: \"flex\",\n                flexFlow: \"column\",\n                marginTop: \"15px\",\n                marginBottom: \"15px\",\n              }}\n            >\n              <Box className=\"step-row\">\n                <div className=\"step-number\">3</div>{\" \"}\n                <div className=\"step-text\">\n                  Enter the API key generated by SUBNET\n                </div>\n              </Box>\n\n              <Box\n                sx={{\n                  flex: \"1\",\n                  marginTop: \"15px\",\n                  marginLeft: \"35px\",\n                }}\n              >\n                <InputBoxWrapper\n                  value={license}\n                  onChange={(event: React.ChangeEvent<HTMLInputElement>) =>\n                    setLicense(event.target.value)\n                  }\n                  id=\"api-key\"\n                  name=\"api-key\"\n                  placeholder=\"\"\n                  label=\"\"\n                  type=\"text\"\n                />\n              </Box>\n            </Box>\n\n            <Box\n              sx={{\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"flex-end\",\n                marginTop: \"15px\",\n              }}\n            >\n              <Button\n                id={\"register-subnet\"}\n                variant=\"callAction\"\n                color=\"primary\"\n                onClick={() => subnetLogin()}\n                disabled={loading || license.trim().length === 0}\n                label={\"Register\"}\n              />\n            </Box>\n          </Box>\n          <RegisterHelpBox />\n        </Box>\n      </Box>\n    </Fragment>\n  );\n\n  const regUi = (\n    <Fragment>\n      <Box\n        sx={{\n          border: \"1px solid #eaeaea\",\n          borderRadius: \"2px\",\n          display: \"flex\",\n          flexFlow: \"column\",\n          padding: \"43px\",\n        }}\n      >\n        {clusterRegistered && licenseInfo ? (\n          <ClusterRegistered\n            email={licenseInfo.email}\n            linkClass={classes.link}\n          />\n        ) : (\n          clusterRegistrationForm\n        )}\n      </Box>\n\n      {!clusterRegistered && <ProxyConfiguration linkClass={classes.link} />}\n    </Fragment>\n  );\n\n  const loadingUi = <div>Loading..</div>;\n  const uiToShow = loadingLicenseInfo ? loadingUi : regUi;\n\n  return (\n    <Fragment>\n      <PageHeader\n        label=\"Register to MinIO Subscription Network\"\n        actions={<React.Fragment />}\n      />\n\n      <PageLayout>\n        <Tabs\n          value={curTab}\n          onChange={(e: React.ChangeEvent<{}>, newValue: number) => {\n            setCurTab(newValue);\n          }}\n          indicatorColor=\"primary\"\n          textColor=\"primary\"\n          aria-label=\"cluster-tabs\"\n          variant=\"scrollable\"\n          scrollButtons=\"auto\"\n        >\n          <Tab\n            label=\"Credentials\"\n            id=\"simple-tab-0\"\n            aria-controls=\"simple-tabpanel-0\"\n          />\n          <Tab\n            label=\"API Key\"\n            id=\"simple-tab-1\"\n            aria-controls=\"simple-tabpanel-1\"\n          />\n          <Tab\n            label=\"Airgap\"\n            id=\"simple-tab-2\"\n            aria-controls=\"simple-tabpanel-2\"\n            onClick={() => fetchSubnetRegToken()}\n          />\n        </Tabs>\n\n        <TabPanel index={0} value={curTab}>\n          {uiToShow}\n        </TabPanel>\n        <TabPanel index={1} value={curTab}>\n          {apiKeyRegistration}\n        </TabPanel>\n        <TabPanel index={2} value={curTab}>\n          {offlineRegistration}\n        </TabPanel>\n      </PageLayout>\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(Register);\n"],"names":["withStyles","theme","createStyles","registerActivationIcon","color","palette","primary","main","fontSize","fontWeight","marginBottom","width","height","marginRight","verticalAlign","registerActivationMode","textAlign","cursor","subnetDescription","Font","letterSpacing","registeredStatus","border","padding","borderRadius","backgroundColor","marginLeft","marginTop","copyInputBox","link","sizedLabel","minWidth","actionsTray","searchField","spacingUtils","containerForHeader","spacing","classes","dispatch","useAppDispatch","operatorMode","useSelector","selOpMode","useState","license","setLicense","subnetPassword","setSubnetPassword","subnetEmail","setSubnetEmail","subnetMFAToken","setSubnetMFAToken","subnetOTP","setSubnetOTP","subnetAccessToken","setSubnetAccessToken","selectedSubnetOrganization","setSelectedSubnetOrganization","subnetRegToken","setSubnetRegToken","subnetOrganizations","setSubnetOrganizations","showPassword","setShowPassword","loading","setLoading","loadingLicenseInfo","setLoadingLicenseInfo","clusterRegistered","setClusterRegistered","licenseInfo","setLicenseInfo","curTab","setCurTab","initialLicenseLoading","setInitialLicenseLoading","clearForm","getSubnetInfo","hasPermission","CONSOLE_UI_RESOURCE","IAM_PAGES_PERMISSIONS","IAM_PAGES","fetchLicenseInfo","useCallback","api","then","res","catch","err","detailedError","toLowerCase","setErrorSnackMessage","callRegister","token","account_id","request","subnetLogin","username","password","apiKey","resp","registered","mfa_token","access_token","organizations","length","accountId","toString","useEffect","clusterRegistrationForm","Fragment","sx","display","flexFlow","flex","title","id","name","onChange","e","target","value","label","options","map","organization","company","alignItems","justifyContent","onClick","disabled","trim","variant","overlayIcon","event","placeholder","otp","subnetLoginWithMFA","icon","xs","md","className","spacerBottom","inputLabel","type","overlayAction","spacerRight","preventDefault","window","open","apiKeyRegistration","email","linkClass","afterRegister","registerEndpoint","offlineRegistration","background","extraInputProps","readOnly","navigator","clipboard","writeText","href","regUi","uiToShow","actions","newValue","indicatorColor","textColor","scrollButtons","regToken","console","error","index"],"sourceRoot":""}