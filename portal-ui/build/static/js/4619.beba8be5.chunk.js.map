{"version":3,"file":"static/js/4619.beba8be5.chunk.js","mappings":"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","sources":["screens/Console/Buckets/BucketDetails/AddAccessRule.tsx","screens/Console/Common/ModalWrapper/ModalWrapper.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport ModalWrapper from \"../../Common/ModalWrapper/ModalWrapper\";\nimport { Grid } from \"@mui/material\";\nimport { Button } from \"mds\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  formFieldStyles,\n  modalStyleUtils,\n} from \"../../Common/FormComponents/common/styleLibrary\";\n\nimport api from \"../../../../common/api\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport SelectWrapper from \"../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport { AddAccessRuleIcon } from \"mds\";\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\n\ninterface IAddAccessRule {\n  classes: any;\n  modalOpen: boolean;\n  onClose: () => any;\n  bucket: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...formFieldStyles,\n    ...modalStyleUtils,\n  });\n\nconst AddAccessRule = ({\n  modalOpen,\n  onClose,\n  classes,\n  bucket,\n}: IAddAccessRule) => {\n  const dispatch = useAppDispatch();\n\n  const [prefix, setPrefix] = useState(\"\");\n  const [selectedAccess, setSelectedAccess] = useState<any>(\"readonly\");\n\n  const accessOptions = [\n    { label: \"readonly\", value: \"readonly\" },\n    { label: \"writeonly\", value: \"writeonly\" },\n    { label: \"readwrite\", value: \"readwrite\" },\n  ];\n\n  const resetForm = () => {\n    setPrefix(\"\");\n    setSelectedAccess(\"readonly\");\n  };\n\n  const createProcess = () => {\n    api\n      .invoke(\"PUT\", `/api/v1/bucket/${bucket}/access-rules`, {\n        prefix: prefix,\n        access: selectedAccess,\n      })\n      .then((res: any) => {\n        onClose();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        dispatch(setErrorSnackMessage(err));\n        onClose();\n      });\n  };\n\n  return (\n    <ModalWrapper\n      modalOpen={modalOpen}\n      title=\"Add Access Rule\"\n      onClose={onClose}\n      titleIcon={<AddAccessRuleIcon />}\n    >\n      <Grid container>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <InputBoxWrapper\n            value={prefix}\n            label={\"Prefix\"}\n            id={\"prefix\"}\n            name={\"prefix\"}\n            placeholder={\"Enter Prefix\"}\n            onChange={(e) => {\n              setPrefix(e.target.value);\n            }}\n            tooltip={\n              \"Leave this field blank to apply the rule to all prefixes and objects at the bucket root. Do not include the wildcard asterisk ``*`` as part of the prefix *unless* it is an explicit part of the prefix name. The Console automatically appends an asterisk to the appropriate sections of the resulting IAM policy.\"\n            }\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <SelectWrapper\n            id=\"access\"\n            name=\"Access\"\n            onChange={(e) => {\n              setSelectedAccess(e.target.value);\n            }}\n            label=\"Access\"\n            value={selectedAccess}\n            options={accessOptions}\n            disabled={false}\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.modalButtonBar}>\n          <Button\n            id={\"clear\"}\n            type=\"button\"\n            variant=\"regular\"\n            onClick={resetForm}\n            label={\"Clear\"}\n          />\n\n          <Button\n            id={\"add-access-save\"}\n            type=\"submit\"\n            variant=\"callAction\"\n            disabled={prefix.trim() === \"\"}\n            onClick={createProcess}\n            label={\"Save\"}\n          />\n        </Grid>\n      </Grid>\n    </ModalWrapper>\n  );\n};\n\nexport default withStyles(styles)(AddAccessRule);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport { Dialog, DialogContent, DialogTitle } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  deleteDialogStyles,\n  snackBarCommon,\n} from \"../FormComponents/common/styleLibrary\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport MainError from \"../MainError/MainError\";\nimport { setModalSnackMessage } from \"../../../../systemSlice\";\n\ninterface IModalProps {\n  classes: any;\n  onClose: () => void;\n  modalOpen: boolean;\n  title: string | React.ReactNode;\n  children: any;\n  wideLimit?: boolean;\n  noContentPadding?: boolean;\n  titleIcon?: React.ReactNode;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...deleteDialogStyles,\n    content: {\n      padding: 25,\n      paddingBottom: 0,\n    },\n    customDialogSize: {\n      width: \"100%\",\n      maxWidth: 765,\n    },\n    ...snackBarCommon,\n  });\n\nconst ModalWrapper = ({\n  onClose,\n  modalOpen,\n  title,\n  children,\n  classes,\n  wideLimit = true,\n  noContentPadding,\n  titleIcon = null,\n}: IModalProps) => {\n  const dispatch = useAppDispatch();\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\n\n  const modalSnackMessage = useSelector(\n    (state: AppState) => state.system.modalSnackBar\n  );\n\n  useEffect(() => {\n    dispatch(setModalSnackMessage(\"\"));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (modalSnackMessage) {\n      if (modalSnackMessage.message === \"\") {\n        setOpenSnackbar(false);\n        return;\n      }\n      // Open SnackBar\n      if (modalSnackMessage.type !== \"error\") {\n        setOpenSnackbar(true);\n      }\n    }\n  }, [modalSnackMessage]);\n\n  const closeSnackBar = () => {\n    setOpenSnackbar(false);\n    dispatch(setModalSnackMessage(\"\"));\n  };\n\n  const customSize = wideLimit\n    ? {\n        classes: {\n          paper: classes.customDialogSize,\n        },\n      }\n    : { maxWidth: \"lg\" as const, fullWidth: true };\n\n  let message = \"\";\n\n  if (modalSnackMessage) {\n    message = modalSnackMessage.detailedErrorMsg;\n    if (\n      modalSnackMessage.detailedErrorMsg === \"\" ||\n      modalSnackMessage.detailedErrorMsg.length < 5\n    ) {\n      message = modalSnackMessage.message;\n    }\n  }\n\n  return (\n    <Dialog\n      open={modalOpen}\n      classes={classes}\n      {...customSize}\n      scroll={\"paper\"}\n      onClose={(event, reason) => {\n        if (reason !== \"backdropClick\") {\n          onClose(); // close on Esc but not on click outside\n        }\n      }}\n      className={classes.root}\n    >\n      <DialogTitle className={classes.title}>\n        <div className={classes.titleText}>\n          {titleIcon} {title}\n        </div>\n        <div className={classes.closeContainer}>\n          <IconButton\n            aria-label=\"close\"\n            id={\"close\"}\n            className={classes.closeButton}\n            onClick={onClose}\n            disableRipple\n            size=\"small\"\n          >\n            <CloseIcon />\n          </IconButton>\n        </div>\n      </DialogTitle>\n\n      <MainError isModal={true} />\n      <Snackbar\n        open={openSnackbar}\n        className={classes.snackBarModal}\n        onClose={() => {\n          closeSnackBar();\n        }}\n        message={message}\n        ContentProps={{\n          className: `${classes.snackBar} ${\n            modalSnackMessage && modalSnackMessage.type === \"error\"\n              ? classes.errorSnackBar\n              : \"\"\n          }`,\n        }}\n        autoHideDuration={\n          modalSnackMessage && modalSnackMessage.type === \"error\" ? 10000 : 5000\n        }\n      />\n      <DialogContent className={noContentPadding ? \"\" : classes.content}>\n        {children}\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default withStyles(styles)(ModalWrapper);\n"],"names":["withStyles","theme","createStyles","formFieldStyles","modalStyleUtils","modalOpen","onClose","classes","bucket","dispatch","useAppDispatch","useState","prefix","setPrefix","selectedAccess","setSelectedAccess","title","titleIcon","container","item","xs","className","formFieldRow","value","label","id","name","placeholder","onChange","e","target","tooltip","options","disabled","modalButtonBar","type","variant","onClick","trim","api","access","then","res","catch","err","setErrorSnackMessage","deleteDialogStyles","content","padding","paddingBottom","customDialogSize","width","maxWidth","snackBarCommon","children","wideLimit","noContentPadding","openSnackbar","setOpenSnackbar","modalSnackMessage","useSelector","state","system","modalSnackBar","useEffect","setModalSnackMessage","message","customSize","paper","fullWidth","detailedErrorMsg","length","open","scroll","event","reason","root","titleText","closeContainer","closeButton","disableRipple","size","isModal","snackBarModal","ContentProps","snackBar","errorSnackBar","autoHideDuration"],"sourceRoot":""}