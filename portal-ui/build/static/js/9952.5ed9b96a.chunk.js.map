{"version":3,"file":"static/js/9952.5ed9b96a.chunk.js","mappings":"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","sources":["screens/Console/Buckets/BucketDetails/AddKeyModal.tsx","screens/Console/Buckets/BucketDetails/EnableBucketEncryption.tsx","screens/Console/Common/ModalWrapper/ModalWrapper.tsx","screens/Console/KMS/KMSHelpbox.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { DialogContentText, Grid } from \"@mui/material\";\nimport React, { useState } from \"react\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport { useAppDispatch } from \"../../../../store\";\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport useApi from \"../../Common/Hooks/useApi\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport KMSHelpBox from \"../../KMS/KMSHelpbox\";\n\ninterface IAddKeyModalProps {\n  closeAddModalAndRefresh: (refresh: boolean) => void;\n  addOpen: boolean;\n}\n\nconst AddKeyModal = ({\n  closeAddModalAndRefresh,\n  addOpen,\n}: IAddKeyModalProps) => {\n  const dispatch = useAppDispatch();\n  const onAddSuccess = () => closeAddModalAndRefresh(true);\n  const onAddError = (err: ErrorResponseHandler) => {\n    closeAddModalAndRefresh(false);\n    dispatch(setErrorSnackMessage(err));\n  };\n  const onClose = () => closeAddModalAndRefresh(false);\n\n  const [addLoading, invokeAddApi] = useApi(onAddSuccess, onAddError);\n  const [keyName, setKeyName] = useState<string>(\"\");\n\n  const onConfirmAdd = () => {\n    invokeAddApi(\"POST\", \"/api/v1/kms/keys/\", { key: keyName });\n  };\n\n  return (\n    <ConfirmDialog\n      title={\"\"}\n      confirmText={\"Create\"}\n      isOpen={addOpen}\n      isLoading={addLoading}\n      onConfirm={onConfirmAdd}\n      onClose={onClose}\n      confirmButtonProps={{\n        disabled: keyName.indexOf(\" \") !== -1 || keyName === \"\" || addLoading,\n        variant: \"callAction\",\n      }}\n      confirmationContent={\n        <DialogContentText>\n          <KMSHelpBox\n            helpText={\"Create Key\"}\n            contents={[\n              \"Create a new cryptographic key in the Key Management Service server connected to MINIO.\",\n            ]}\n          />\n\n          <Grid item xs={12} marginTop={3}>\n            <InputBoxWrapper\n              id=\"key-name\"\n              name=\"key-name\"\n              label=\"Key Name\"\n              autoFocus={true}\n              value={keyName}\n              error={\n                keyName.indexOf(\" \") !== -1\n                  ? \"Key name cannot contain spaces\"\n                  : \"\"\n              }\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                setKeyName(e.target.value);\n              }}\n            />\n          </Grid>\n        </DialogContentText>\n      }\n    />\n  );\n};\n\nexport default AddKeyModal;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport { LinearProgress, SelectChangeEvent } from \"@mui/material\";\nimport { AddIcon, Button } from \"mds\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  formFieldStyles,\n  modalStyleUtils,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport { BucketEncryptionInfo } from \"../types\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport api from \"../../../../common/api\";\nimport ModalWrapper from \"../../Common/ModalWrapper/ModalWrapper\";\nimport SelectWrapper from \"../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport { BucketEncryptionIcon } from \"mds\";\n\nimport { setModalErrorSnackMessage } from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\nimport {\n  CONSOLE_UI_RESOURCE,\n  IAM_SCOPES,\n} from \"../../../../common/SecureComponent/permissions\";\nimport { SecureComponent } from \"../../../../common/SecureComponent\";\nimport TooltipWrapper from \"../../Common/TooltipWrapper/TooltipWrapper\";\nimport AddKeyModal from \"./AddKeyModal\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...modalStyleUtils,\n    ...formFieldStyles,\n  });\n\ninterface IEnableBucketEncryptionProps {\n  classes: any;\n  open: boolean;\n  encryptionEnabled: boolean;\n  encryptionCfg: BucketEncryptionInfo | null;\n  selectedBucket: string;\n  closeModalAndRefresh: () => void;\n}\n\nconst EnableBucketEncryption = ({\n  classes,\n  open,\n  encryptionCfg,\n  selectedBucket,\n  closeModalAndRefresh,\n}: IEnableBucketEncryptionProps) => {\n  const dispatch = useAppDispatch();\n  const [loading, setLoading] = useState<boolean>(false);\n  const [kmsKeyID, setKmsKeyID] = useState<string>(\"\");\n  const [encryptionType, setEncryptionType] = useState<string>(\"disabled\");\n  const [keys, setKeys] = useState<[]>([]);\n  const [loadingKeys, setLoadingKeys] = useState<boolean>(false);\n  const [addOpen, setAddOpen] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (encryptionCfg) {\n      if (encryptionCfg.algorithm === \"AES256\") {\n        setEncryptionType(\"sse-s3\");\n      } else {\n        setEncryptionType(\"sse-kms\");\n        setKmsKeyID(encryptionCfg.kmsMasterKeyID);\n      }\n    }\n  }, [encryptionCfg]);\n\n  useEffect(() => {\n    if (encryptionType === \"sse-kms\") {\n      api\n        .invoke(\"GET\", `/api/v1/kms/keys`)\n        .then((res: any) => {\n          setKeys(res.results);\n          setLoadingKeys(false);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setLoadingKeys(false);\n          dispatch(setModalErrorSnackMessage(err));\n        });\n    }\n  }, [encryptionType, loadingKeys, dispatch]);\n\n  const enableBucketEncryption = (event: React.FormEvent) => {\n    event.preventDefault();\n    if (loading) {\n      return;\n    }\n    if (encryptionType === \"disabled\") {\n      api\n        .invoke(\"POST\", `/api/v1/buckets/${selectedBucket}/encryption/disable`)\n        .then(() => {\n          setLoading(false);\n          closeModalAndRefresh();\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setLoading(false);\n          dispatch(setModalErrorSnackMessage(err));\n        });\n    } else {\n      api\n        .invoke(\"POST\", `/api/v1/buckets/${selectedBucket}/encryption/enable`, {\n          encType: encryptionType,\n          kmsKeyID: kmsKeyID,\n        })\n        .then(() => {\n          setLoading(false);\n          closeModalAndRefresh();\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setLoading(false);\n          dispatch(setModalErrorSnackMessage(err));\n        });\n    }\n  };\n\n  return (\n    <Fragment>\n      {addOpen && (\n        <AddKeyModal\n          addOpen={addOpen}\n          closeAddModalAndRefresh={(refresh: boolean) => {\n            setAddOpen(false);\n            setLoadingKeys(true);\n          }}\n        />\n      )}\n\n      <ModalWrapper\n        modalOpen={open}\n        onClose={() => {\n          closeModalAndRefresh();\n        }}\n        title=\"Enable Bucket Encryption\"\n        titleIcon={<BucketEncryptionIcon />}\n      >\n        <form\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n            enableBucketEncryption(e);\n          }}\n        >\n          <Grid container>\n            <Grid item xs={12} className={classes.modalFormScrollable}>\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <SelectWrapper\n                  onChange={(e: SelectChangeEvent<string>) => {\n                    setEncryptionType(e.target.value as string);\n                  }}\n                  id=\"select-encryption-type\"\n                  name=\"select-encryption-type\"\n                  label={\"Encryption Type\"}\n                  value={encryptionType}\n                  options={[\n                    {\n                      label: \"Disabled\",\n                      value: \"disabled\",\n                    },\n                    {\n                      label: \"SSE-S3\",\n                      value: \"sse-s3\",\n                    },\n                    {\n                      label: \"SSE-KMS\",\n                      value: \"sse-kms\",\n                    },\n                  ]}\n                />\n              </Grid>\n\n              {encryptionType === \"sse-kms\" && (\n                <Grid\n                  item\n                  xs={12}\n                  className={classes.formFieldRow}\n                  display={\"flex\"}\n                >\n                  <SelectWrapper\n                    onChange={(e: SelectChangeEvent<string>) => {\n                      setKmsKeyID(e.target.value);\n                    }}\n                    id=\"select-kms-key-id\"\n                    name=\"select-kms-key-id\"\n                    label={\"KMS Key ID\"}\n                    value={kmsKeyID}\n                    options={keys.map((key: any) => {\n                      return {\n                        label: key.name,\n                        value: key.name,\n                      };\n                    })}\n                  />\n                  <Grid marginLeft={1}>\n                    <SecureComponent\n                      scopes={[IAM_SCOPES.KMS_IMPORT_KEY]}\n                      resource={CONSOLE_UI_RESOURCE}\n                      errorProps={{ disabled: true }}\n                    >\n                      <TooltipWrapper tooltip={\"Add key\"}>\n                        <Button\n                          id={\"import-key\"}\n                          variant={\"regular\"}\n                          icon={<AddIcon />}\n                          onClick={(e) => {\n                            setAddOpen(true);\n                            e.preventDefault();\n                          }}\n                        />\n                      </TooltipWrapper>\n                    </SecureComponent>\n                  </Grid>\n                </Grid>\n              )}\n            </Grid>\n            <Grid item xs={12} className={classes.modalButtonBar}>\n              <Button\n                id={\"cancel\"}\n                type=\"submit\"\n                variant=\"regular\"\n                onClick={() => {\n                  closeModalAndRefresh();\n                }}\n                disabled={loading}\n                label={\"Cancel\"}\n              />\n              <Button\n                id={\"save\"}\n                type=\"submit\"\n                variant=\"callAction\"\n                disabled={loading}\n                label={\"Save\"}\n              />\n            </Grid>\n            {loading && (\n              <Grid item xs={12}>\n                <LinearProgress />\n              </Grid>\n            )}\n          </Grid>\n        </form>\n      </ModalWrapper>\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(EnableBucketEncryption);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport { Dialog, DialogContent, DialogTitle } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  deleteDialogStyles,\n  snackBarCommon,\n} from \"../FormComponents/common/styleLibrary\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport MainError from \"../MainError/MainError\";\nimport { setModalSnackMessage } from \"../../../../systemSlice\";\n\ninterface IModalProps {\n  classes: any;\n  onClose: () => void;\n  modalOpen: boolean;\n  title: string | React.ReactNode;\n  children: any;\n  wideLimit?: boolean;\n  noContentPadding?: boolean;\n  titleIcon?: React.ReactNode;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...deleteDialogStyles,\n    content: {\n      padding: 25,\n      paddingBottom: 0,\n    },\n    customDialogSize: {\n      width: \"100%\",\n      maxWidth: 765,\n    },\n    ...snackBarCommon,\n  });\n\nconst ModalWrapper = ({\n  onClose,\n  modalOpen,\n  title,\n  children,\n  classes,\n  wideLimit = true,\n  noContentPadding,\n  titleIcon = null,\n}: IModalProps) => {\n  const dispatch = useAppDispatch();\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\n\n  const modalSnackMessage = useSelector(\n    (state: AppState) => state.system.modalSnackBar\n  );\n\n  useEffect(() => {\n    dispatch(setModalSnackMessage(\"\"));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (modalSnackMessage) {\n      if (modalSnackMessage.message === \"\") {\n        setOpenSnackbar(false);\n        return;\n      }\n      // Open SnackBar\n      if (modalSnackMessage.type !== \"error\") {\n        setOpenSnackbar(true);\n      }\n    }\n  }, [modalSnackMessage]);\n\n  const closeSnackBar = () => {\n    setOpenSnackbar(false);\n    dispatch(setModalSnackMessage(\"\"));\n  };\n\n  const customSize = wideLimit\n    ? {\n        classes: {\n          paper: classes.customDialogSize,\n        },\n      }\n    : { maxWidth: \"lg\" as const, fullWidth: true };\n\n  let message = \"\";\n\n  if (modalSnackMessage) {\n    message = modalSnackMessage.detailedErrorMsg;\n    if (\n      modalSnackMessage.detailedErrorMsg === \"\" ||\n      modalSnackMessage.detailedErrorMsg.length < 5\n    ) {\n      message = modalSnackMessage.message;\n    }\n  }\n\n  return (\n    <Dialog\n      open={modalOpen}\n      classes={classes}\n      {...customSize}\n      scroll={\"paper\"}\n      onClose={(event, reason) => {\n        if (reason !== \"backdropClick\") {\n          onClose(); // close on Esc but not on click outside\n        }\n      }}\n      className={classes.root}\n    >\n      <DialogTitle className={classes.title}>\n        <div className={classes.titleText}>\n          {titleIcon} {title}\n        </div>\n        <div className={classes.closeContainer}>\n          <IconButton\n            aria-label=\"close\"\n            id={\"close\"}\n            className={classes.closeButton}\n            onClick={onClose}\n            disableRipple\n            size=\"small\"\n          >\n            <CloseIcon />\n          </IconButton>\n        </div>\n      </DialogTitle>\n\n      <MainError isModal={true} />\n      <Snackbar\n        open={openSnackbar}\n        className={classes.snackBarModal}\n        onClose={() => {\n          closeSnackBar();\n        }}\n        message={message}\n        ContentProps={{\n          className: `${classes.snackBar} ${\n            modalSnackMessage && modalSnackMessage.type === \"error\"\n              ? classes.errorSnackBar\n              : \"\"\n          }`,\n        }}\n        autoHideDuration={\n          modalSnackMessage && modalSnackMessage.type === \"error\" ? 10000 : 5000\n        }\n      />\n      <DialogContent className={noContentPadding ? \"\" : classes.content}>\n        {children}\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default withStyles(styles)(ModalWrapper);\n","import React from \"react\";\n\nimport { Box } from \"@mui/material\";\nimport { HelpIconFilled } from \"mds\";\n\ninterface IKMSHelpBoxProps {\n  helpText: string;\n  contents: string[];\n}\n\nconst KMSHelpBox = ({ helpText, contents }: IKMSHelpBoxProps) => {\n  return (\n    <Box\n      sx={{\n        flex: 1,\n        border: \"1px solid #eaeaea\",\n        borderRadius: \"2px\",\n        display: \"flex\",\n        flexFlow: \"column\",\n        padding: \"20px\",\n      }}\n    >\n      <Box\n        sx={{\n          fontSize: \"16px\",\n          fontWeight: 600,\n          display: \"flex\",\n          alignItems: \"center\",\n          marginBottom: \"16px\",\n          paddingBottom: \"20px\",\n\n          \"& .min-icon\": {\n            height: \"21px\",\n            width: \"21px\",\n            marginRight: \"15px\",\n          },\n        }}\n      >\n        <HelpIconFilled />\n        <div>{helpText}</div>\n      </Box>\n      <Box sx={{ fontSize: \"14px\", marginBottom: \"15px\" }}>\n        {contents.map((content) => (\n          <Box sx={{ paddingBottom: \"20px\" }}>{content}</Box>\n        ))}\n      </Box>\n    </Box>\n  );\n};\n\nexport default KMSHelpBox;\n"],"names":["closeAddModalAndRefresh","addOpen","dispatch","useAppDispatch","useApi","err","setErrorSnackMessage","addLoading","invokeAddApi","useState","keyName","setKeyName","ConfirmDialog","title","confirmText","isOpen","isLoading","onConfirm","key","onClose","confirmButtonProps","disabled","indexOf","variant","confirmationContent","DialogContentText","helpText","contents","Grid","item","xs","marginTop","InputBoxWrapper","id","name","label","autoFocus","value","error","onChange","e","target","withStyles","theme","createStyles","modalStyleUtils","formFieldStyles","classes","open","encryptionCfg","selectedBucket","closeModalAndRefresh","loading","setLoading","kmsKeyID","setKmsKeyID","encryptionType","setEncryptionType","keys","setKeys","loadingKeys","setLoadingKeys","setAddOpen","useEffect","algorithm","kmsMasterKeyID","api","then","res","results","catch","setModalErrorSnackMessage","Fragment","refresh","ModalWrapper","modalOpen","titleIcon","noValidate","autoComplete","onSubmit","preventDefault","encType","container","className","modalFormScrollable","formFieldRow","SelectWrapper","options","display","map","marginLeft","SecureComponent","scopes","IAM_SCOPES","resource","CONSOLE_UI_RESOURCE","errorProps","TooltipWrapper","tooltip","icon","onClick","modalButtonBar","type","LinearProgress","deleteDialogStyles","content","padding","paddingBottom","customDialogSize","width","maxWidth","snackBarCommon","children","wideLimit","noContentPadding","openSnackbar","setOpenSnackbar","modalSnackMessage","useSelector","state","system","modalSnackBar","setModalSnackMessage","message","customSize","paper","fullWidth","detailedErrorMsg","length","scroll","event","reason","root","titleText","closeContainer","closeButton","disableRipple","size","isModal","snackBarModal","ContentProps","snackBar","errorSnackBar","autoHideDuration","sx","flex","border","borderRadius","flexFlow","fontSize","fontWeight","alignItems","marginBottom","height","marginRight"],"sourceRoot":""}