{"version":3,"file":"static/js/6405.7ed910f9.chunk.js","mappings":"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","sources":["screens/Console/Tenants/TenantDetails/TenantConfiguration.tsx","../node_modules/@mui/icons-material/Add.js"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { connect, useSelector } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport { DialogContentText, IconButton } from \"@mui/material\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport RemoveIcon from \"../../../../icons/RemoveIcon\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport Grid from \"@mui/material/Grid\";\nimport {\n  ITenantConfigurationRequest,\n  ITenantConfigurationResponse,\n  LabelKeyPair,\n} from \"../types\";\nimport {\n  containerForHeader,\n  createTenantCommon,\n  formFieldStyles,\n  modalBasic,\n  spacingUtils,\n  tenantDetailsStyles,\n  wizardCommon,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport { ConfirmModalIcon } from \"../../../../icons\";\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\nimport api from \"../../../../common/api\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport Loader from \"../../Common/Loader/Loader\";\nimport { Button } from \"mds\";\nimport { MinIOEnvVarsSettings } from \"../../../../common/utils\";\n\ninterface ITenantConfiguration {\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...tenantDetailsStyles,\n    ...spacingUtils,\n    envVarRow: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-start\",\n      \"&:last-child\": {\n        borderBottom: 0,\n      },\n      \"@media (max-width: 900px)\": {\n        flex: 1,\n\n        \"& div label\": {\n          minWidth: 50,\n        },\n      },\n    },\n    rowActions: {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n      \"@media (max-width: 900px)\": {\n        flex: 1,\n      },\n    },\n    overlayAction: {\n      marginLeft: 10,\n      \"& svg\": {\n        width: 15,\n        height: 15,\n        maxWidth: 15,\n        maxHeight: 15,\n      },\n      \"& button\": {\n        background: \"#EAEAEA\",\n      },\n    },\n    loaderAlign: {\n      textAlign: \"center\",\n    },\n    bold: { fontWeight: \"bold\" },\n    italic: { fontStyle: \"italic\" },\n    fileItem: {\n      marginRight: 10,\n      display: \"flex\",\n      \"& div label\": {\n        minWidth: 50,\n      },\n\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n      },\n    },\n    ...containerForHeader(theme.spacing(4)),\n    ...createTenantCommon,\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst TenantConfiguration = ({ classes }: ITenantConfiguration) => {\n  const dispatch = useAppDispatch();\n\n  const tenant = useSelector((state: AppState) => state.tenants.tenantInfo);\n  const loadingTenant = useSelector(\n    (state: AppState) => state.tenants.loadingTenant\n  );\n\n  const [isSending, setIsSending] = useState<boolean>(false);\n  const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n  const [envVars, setEnvVars] = useState<LabelKeyPair[]>([]);\n  const [envVarsToBeDeleted, setEnvVarsToBeDeleted] = useState<string[]>([]);\n\n  const getTenantConfigurationInfo = useCallback(() => {\n    api\n      .invoke(\n        \"GET\",\n        `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/configuration`\n      )\n      .then((res: ITenantConfigurationResponse) => {\n        if (res.environmentVariables) {\n          setEnvVars(res.environmentVariables);\n        }\n      })\n      .catch((err: ErrorResponseHandler) => {\n        dispatch(setErrorSnackMessage(err));\n      });\n  }, [tenant, dispatch]);\n\n  useEffect(() => {\n    if (tenant) {\n      getTenantConfigurationInfo();\n    }\n  }, [tenant, getTenantConfigurationInfo]);\n\n  const updateTenantConfiguration = () => {\n    setIsSending(true);\n    let payload: ITenantConfigurationRequest = {\n      environmentVariables: envVars.filter((env) => env.key !== \"\"),\n      keysToBeDeleted: envVarsToBeDeleted,\n    };\n    api\n      .invoke(\n        \"PATCH\",\n        `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/configuration`,\n        payload\n      )\n      .then(() => {\n        setIsSending(false);\n        setDialogOpen(false);\n        getTenantConfigurationInfo();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        dispatch(setErrorSnackMessage(err));\n        setIsSending(false);\n      });\n  };\n\n  return (\n    <React.Fragment>\n      <ConfirmDialog\n        title={\"Save and Restart\"}\n        confirmText={\"Restart\"}\n        cancelText=\"Cancel\"\n        titleIcon={<ConfirmModalIcon />}\n        isLoading={isSending}\n        onClose={() => setDialogOpen(false)}\n        isOpen={dialogOpen}\n        onConfirm={updateTenantConfiguration}\n        confirmationContent={\n          <DialogContentText>\n            Are you sure you want to save the changes and restart the service?\n          </DialogContentText>\n        }\n      />\n      {loadingTenant ? (\n        <div className={classes.loaderAlign}>\n          <Loader />\n        </div>\n      ) : (\n        <Grid container spacing={1}>\n          <Grid item xs={12}>\n            <h1 className={classes.sectionTitle}>Configuration</h1>\n            <hr className={classes.hrClass} />\n          </Grid>\n          <Grid container spacing={1}>\n            {envVars.map((envVar, index) => (\n              <Grid\n                item\n                xs={12}\n                className={`${classes.formFieldRow} ${classes.envVarRow}`}\n                key={`tenant-envVar-${index.toString()}`}\n              >\n                <Grid item xs={5} className={classes.fileItem}>\n                  <InputBoxWrapper\n                    id=\"env_var_key\"\n                    name=\"env_var_key\"\n                    label=\"Key\"\n                    value={envVar.key}\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      const existingEnvVars = [...envVars];\n\n                      setEnvVars(\n                        existingEnvVars.map((keyPair, i) =>\n                          i === index\n                            ? { key: e.target.value, value: keyPair.value }\n                            : keyPair\n                        )\n                      );\n                    }}\n                    index={index}\n                    key={`env_var_key_${index.toString()}`}\n                  />\n                </Grid>\n                <Grid item xs={5} className={classes.fileItem}>\n                  <InputBoxWrapper\n                    id=\"env_var_value\"\n                    name=\"env_var_value\"\n                    label=\"Value\"\n                    value={envVar.value}\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      const existingEnvVars = [...envVars];\n                      setEnvVars(\n                        existingEnvVars.map((keyPair, i) =>\n                          i === index\n                            ? { key: keyPair.key, value: e.target.value }\n                            : keyPair\n                        )\n                      );\n                    }}\n                    index={index}\n                    key={`env_var_value_${index.toString()}`}\n                    type={\n                      MinIOEnvVarsSettings[envVar.key] &&\n                      MinIOEnvVarsSettings[envVar.key].secret\n                        ? \"password\"\n                        : \"text\"\n                    }\n                  />\n                </Grid>\n                <Grid item xs={2} className={classes.rowActions}>\n                  <div className={classes.overlayAction}>\n                    <IconButton\n                      size={\"small\"}\n                      onClick={() => {\n                        const existingEnvVars = [...envVars];\n                        existingEnvVars.push({ key: \"\", value: \"\" });\n\n                        setEnvVars(existingEnvVars);\n                      }}\n                      disabled={index !== envVars.length - 1}\n                    >\n                      <AddIcon />\n                    </IconButton>\n                  </div>\n                  <div className={classes.overlayAction}>\n                    <IconButton\n                      size={\"small\"}\n                      onClick={() => {\n                        const existingEnvVars = envVars.filter(\n                          (item, fIndex) => fIndex !== index\n                        );\n                        setEnvVars(existingEnvVars);\n                        setEnvVarsToBeDeleted([\n                          ...envVarsToBeDeleted,\n                          envVar.key,\n                        ]);\n                      }}\n                      disabled={envVars.length <= 1}\n                    >\n                      <RemoveIcon />\n                    </IconButton>\n                  </div>\n                </Grid>\n              </Grid>\n            ))}\n          </Grid>\n          <Grid\n            item\n            xs={12}\n            sx={{ display: \"flex\", justifyContent: \"flex-end\" }}\n          >\n            <Button\n              id={\"save-environment-variables\"}\n              type=\"submit\"\n              variant=\"callAction\"\n              disabled={dialogOpen || isSending}\n              onClick={() => setDialogOpen(true)}\n              label={\"Save\"}\n            />\n          </Grid>\n        </Grid>\n      )}\n    </React.Fragment>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  loadingTenant: state.tenants.loadingTenant,\n  selectedTenant: state.tenants.currentTenant,\n  tenant: state.tenants.tenantInfo,\n});\n\nconst connector = connect(mapState, null);\n\nexport default withStyles(styles)(connector(TenantConfiguration));\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');\n\nexports.default = _default;"],"names":["connector","connect","state","loadingTenant","tenants","selectedTenant","currentTenant","tenant","tenantInfo","withStyles","theme","createStyles","tenantDetailsStyles","spacingUtils","envVarRow","display","alignItems","justifyContent","borderBottom","flex","minWidth","rowActions","overlayAction","marginLeft","width","height","maxWidth","maxHeight","background","loaderAlign","textAlign","bold","fontWeight","italic","fontStyle","fileItem","marginRight","flexFlow","containerForHeader","spacing","createTenantCommon","formFieldStyles","modalBasic","wizardCommon","classes","dispatch","useAppDispatch","useSelector","useState","isSending","setIsSending","dialogOpen","setDialogOpen","envVars","setEnvVars","envVarsToBeDeleted","setEnvVarsToBeDeleted","getTenantConfigurationInfo","useCallback","api","namespace","name","then","res","environmentVariables","catch","err","setErrorSnackMessage","useEffect","title","confirmText","cancelText","titleIcon","isLoading","onClose","isOpen","onConfirm","payload","filter","env","key","keysToBeDeleted","confirmationContent","className","container","item","xs","sectionTitle","hrClass","map","envVar","index","formFieldRow","id","label","value","onChange","e","existingEnvVars","keyPair","i","target","toString","type","MinIOEnvVarsSettings","secret","size","onClick","push","disabled","length","fIndex","sx","variant","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}