{"version":3,"file":"static/js/2797.6dae3357.chunk.js","mappings":"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","sources":["screens/Console/Common/FormComponents/CodeMirrorWrapper/CodeMirrorWrapper.tsx","screens/Console/Common/FormComponents/FileSelector/FileSelector.tsx","screens/Console/Common/FormComponents/FileSelector/utils.ts","screens/Console/Common/TLSCertificate/TLSCertificate.tsx","screens/Console/Tenants/TenantDetails/TenantEncryption.tsx","screens/shared/ErrorBlock.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport { Box, InputLabel, Tooltip } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { HelpIcon } from \"mds\";\nimport { fieldBasic } from \"../common/styleLibrary\";\nimport { CopyIcon } from \"mds\";\nimport { Button } from \"mds\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\nimport CodeEditor from \"@uiw/react-textarea-code-editor\";\nimport TooltipWrapper from \"../../TooltipWrapper/TooltipWrapper\";\n\ninterface ICodeWrapper {\n  value: string;\n  label?: string;\n  mode?: string;\n  tooltip?: string;\n  classes: any;\n  onChange?: (editor: any, data: any, value: string) => any;\n  onBeforeChange: (editor: any, data: any, value: string) => any;\n  readOnly?: boolean;\n  editorHeight?: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n  });\n\nconst CodeMirrorWrapper = ({\n  value,\n  label = \"\",\n  tooltip = \"\",\n  mode = \"json\",\n  classes,\n  onBeforeChange,\n  readOnly = false,\n  editorHeight = \"250px\",\n}: ICodeWrapper) => {\n  return (\n    <React.Fragment>\n      <Grid item xs={12} sx={{ marginBottom: \"10px\" }}>\n        <InputLabel className={classes.inputLabel}>\n          <span>{label}</span>\n          {tooltip !== \"\" && (\n            <div className={classes.tooltipContainer}>\n              <Tooltip title={tooltip} placement=\"top-start\">\n                <div className={classes.tooltip}>\n                  <HelpIcon />\n                </div>\n              </Tooltip>\n            </div>\n          )}\n        </InputLabel>\n      </Grid>\n\n      <Grid\n        item\n        xs={12}\n        style={{\n          maxHeight: editorHeight,\n          overflow: \"auto\",\n          border: \"1px solid #eaeaea\",\n        }}\n      >\n        <CodeEditor\n          value={value}\n          language={mode}\n          onChange={(evn) => {\n            onBeforeChange(null, null, evn.target.value);\n          }}\n          id={\"code_wrapper\"}\n          padding={15}\n          style={{\n            fontSize: 12,\n            backgroundColor: \"#fefefe\",\n            fontFamily:\n              \"ui-monospace,SFMono-Regular,SF Mono,Consolas,Liberation Mono,Menlo,monospace\",\n            minHeight: editorHeight || \"initial\",\n            color: \"#000000\",\n          }}\n        />\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        sx={{\n          background: \"#f7f7f7\",\n          border: \"1px solid #eaeaea\",\n          borderTop: 0,\n        }}\n      >\n        <Box\n          sx={{\n            display: \"flex\",\n            alignItems: \"center\",\n            padding: \"2px\",\n            paddingRight: \"5px\",\n            justifyContent: \"flex-end\",\n            \"& button\": {\n              height: \"26px\",\n              width: \"26px\",\n              padding: \"2px\",\n              \" .min-icon\": {\n                marginLeft: \"0\",\n              },\n            },\n          }}\n        >\n          <TooltipWrapper tooltip={\"Copy to Clipboard\"}>\n            <CopyToClipboard text={value}>\n              <Button\n                type={\"button\"}\n                id={\"copy-code-mirror\"}\n                icon={<CopyIcon />}\n                color={\"primary\"}\n                variant={\"regular\"}\n              />\n            </CopyToClipboard>\n          </TooltipWrapper>\n        </Box>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(CodeMirrorWrapper);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport get from \"lodash/get\";\nimport { Grid, InputLabel, Tooltip } from \"@mui/material\";\nimport IconButton from \"@mui/material/IconButton\";\nimport AttachFileIcon from \"@mui/icons-material/AttachFile\";\nimport CancelIcon from \"@mui/icons-material/Cancel\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  fieldBasic,\n  fileInputStyles,\n  tooltipHelper,\n} from \"../common/styleLibrary\";\nimport { fileProcess } from \"./utils\";\nimport { HelpIcon } from \"mds\";\nimport ErrorBlock from \"../../../../shared/ErrorBlock\";\n\ninterface InputBoxProps {\n  label: string;\n  classes: any;\n  onChange: (e: string, i: string) => void;\n  id: string;\n  name: string;\n  disabled?: boolean;\n  tooltip?: string;\n  required?: boolean;\n  error?: string;\n  accept?: string;\n  value?: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n    valueString: {\n      maxWidth: 350,\n      whiteSpace: \"nowrap\",\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      marginTop: 2,\n    },\n    fileInputField: {\n      margin: \"13px 0\",\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n      },\n    },\n    ...fileInputStyles,\n    inputLabel: {\n      ...fieldBasic.inputLabel,\n      fontWeight: \"normal\",\n    },\n    textBoxContainer: {\n      ...fieldBasic.textBoxContainer,\n      maxWidth: \"100%\",\n      border: \"1px solid #eaeaea\",\n      paddingLeft: \"15px\",\n    },\n  });\n\nconst FileSelector = ({\n  label,\n  classes,\n  onChange,\n  id,\n  name,\n  disabled = false,\n  tooltip = \"\",\n  required,\n  error = \"\",\n  accept = \"\",\n  value = \"\",\n}: InputBoxProps) => {\n  const [showFileSelector, setShowSelector] = useState(false);\n\n  return (\n    <React.Fragment>\n      <Grid\n        item\n        xs={12}\n        className={`${classes.fileInputField} ${classes.fieldBottom} ${\n          classes.fieldContainer\n        } ${error !== \"\" ? classes.errorInField : \"\"}`}\n      >\n        {label !== \"\" && (\n          <InputLabel\n            htmlFor={id}\n            className={`${error !== \"\" ? classes.fieldLabelError : \"\"} ${\n              classes.inputLabel\n            }`}\n          >\n            <span>\n              {label}\n              {required ? \"*\" : \"\"}\n            </span>\n            {tooltip !== \"\" && (\n              <div className={classes.tooltipContainer}>\n                <Tooltip title={tooltip} placement=\"top-start\">\n                  <div className={classes.tooltip}>\n                    <HelpIcon />\n                  </div>\n                </Tooltip>\n              </div>\n            )}\n          </InputLabel>\n        )}\n\n        {showFileSelector || value === \"\" ? (\n          <div className={classes.textBoxContainer}>\n            <input\n              type=\"file\"\n              name={name}\n              onChange={(e) => {\n                const fileName = get(e, \"target.files[0].name\", \"\");\n                fileProcess(e, (data: any) => {\n                  onChange(data, fileName);\n                });\n              }}\n              accept={accept}\n              required={required}\n              disabled={disabled}\n              className={classes.fileInputField}\n            />\n\n            {value !== \"\" && (\n              <IconButton\n                color=\"primary\"\n                aria-label=\"upload picture\"\n                component=\"span\"\n                onClick={() => {\n                  setShowSelector(false);\n                }}\n                disableRipple={false}\n                disableFocusRipple={false}\n                size=\"small\"\n              >\n                <CancelIcon />\n              </IconButton>\n            )}\n\n            {error !== \"\" && <ErrorBlock errorMessage={error} />}\n          </div>\n        ) : (\n          <div className={classes.fileReselect}>\n            <div className={classes.valueString}>{value}</div>\n            <IconButton\n              color=\"primary\"\n              aria-label=\"upload picture\"\n              component=\"span\"\n              onClick={() => {\n                setShowSelector(true);\n              }}\n              disableRipple={false}\n              disableFocusRipple={false}\n              size=\"small\"\n            >\n              <AttachFileIcon />\n            </IconButton>\n          </div>\n        )}\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(FileSelector);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nexport const fileProcess = (evt: any, callback: any) => {\n  const file = evt.target.files[0];\n  const reader = new FileReader();\n  reader.readAsDataURL(file);\n\n  reader.onload = () => {\n    // reader.readAsDataURL(file) output will be something like: data:application/x-x509-ca-cert;base64,LS0tLS1CRUdJTiBDRVJUSU\n    // we care only about the actual base64 part (everything after \"data:application/x-x509-ca-cert;base64,\")\n    const fileBase64 = reader.result;\n    if (fileBase64) {\n      const fileArray = fileBase64.toString().split(\"base64,\");\n\n      if (fileArray.length === 2) {\n        callback(fileArray[1]);\n      }\n    }\n  };\n};\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { DateTime } from \"luxon\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { ICertificateInfo } from \"../../Tenants/types\";\nimport LanguageIcon from \"@mui/icons-material/Language\";\nimport Chip from \"@mui/material/Chip\";\nimport {\n  Box,\n  Container,\n  Divider,\n  Grid,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Typography,\n} from \"@mui/material\";\nimport EventBusyIcon from \"@mui/icons-material/EventBusy\";\nimport { CertificateIcon } from \"mds\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    certificateIcon: {\n      float: \"left\",\n      paddingTop: \"5px !important\",\n      paddingRight: \"10px !important\",\n    },\n    certificateInfo: { float: \"right\" },\n    certificateWrapper: {\n      height: \"auto\",\n      margin: 5,\n      border: \"1px solid #E2E2E2\",\n      userSelect: \"text\",\n      borderRadius: 4,\n      \"& h6\": {\n        fontWeight: \"bold\",\n      },\n      \"& div\": {\n        padding: 0,\n      },\n    },\n    certificateExpiry: {\n      color: \"#616161\",\n      display: \"flex\",\n      alignItems: \"center\",\n      flexWrap: \"wrap\",\n      marginBottom: 5,\n      \"& .label\": {\n        fontWeight: \"bold\",\n      },\n    },\n    certificateDomains: {\n      color: \"#616161\",\n      \"& .label\": {\n        fontWeight: \"bold\",\n      },\n    },\n    certificatesList: {\n      border: \"1px solid #E2E2E2\",\n      borderRadius: 4,\n      color: \"#616161\",\n      textTransform: \"lowercase\",\n      overflowY: \"scroll\",\n      maxHeight: 145,\n      marginBottom: 10,\n    },\n    certificatesListItem: {\n      padding: \"0px 16px\",\n      borderBottom: \"1px solid #E2E2E2\",\n      \"& div\": {\n        minWidth: 0,\n      },\n      \"& svg\": {\n        fontSize: 12,\n        marginRight: 10,\n        opacity: 0.5,\n      },\n      \"& span\": {\n        fontSize: 12,\n      },\n    },\n  });\n\ninterface ITLSCertificate {\n  classes: any;\n  certificateInfo: ICertificateInfo;\n  onDelete: any;\n}\n\nconst TLSCertificate = ({\n  classes,\n  certificateInfo,\n  onDelete = () => {},\n}: ITLSCertificate) => {\n  const certificates = certificateInfo.domains || [];\n\n  const expiry = DateTime.fromISO(certificateInfo.expiry);\n\n  return (\n    <Chip\n      key={certificateInfo.name}\n      variant=\"outlined\"\n      color=\"primary\"\n      className={classes.certificateWrapper}\n      label={\n        <Container>\n          <Grid item xs={1} className={classes.certificateIcon}>\n            <CertificateIcon />\n          </Grid>\n          <Grid item xs={11} className={classes.certificateInfo}>\n            <Typography variant=\"subtitle1\" display=\"block\" gutterBottom>\n              {certificateInfo.name}\n            </Typography>\n            <Box className={classes.certificateExpiry}>\n              <EventBusyIcon color=\"inherit\" fontSize=\"small\" />\n              &nbsp;\n              <span className={\"label\"}>Expiry:&nbsp;</span>\n              <span>{expiry.toFormat(\"yyyy/MM/dd\")}</span>\n            </Box>\n            <Divider />\n            <br />\n            <Box className={classes.certificateDomains}>\n              <span className=\"label\">{`${certificates.length} Domain (s):`}</span>\n            </Box>\n            <List className={classes.certificatesList}>\n              {certificates.map((dom, index) => (\n                <ListItem\n                  key={`${dom}-${index}`}\n                  className={classes.certificatesListItem}\n                >\n                  <ListItemAvatar>\n                    <LanguageIcon />\n                  </ListItemAvatar>\n                  <ListItemText primary={dom} />\n                </ListItem>\n              ))}\n            </List>\n          </Grid>\n        </Container>\n      }\n      onDelete={onDelete}\n    />\n  );\n};\n\nexport default withStyles(styles)(TLSCertificate);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {\n  ICertificateInfo,\n  ISecurityContext,\n  ITenantEncryptionResponse,\n} from \"../types\";\nimport { Theme } from \"@mui/material/styles\";\nimport { Button } from \"mds\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  containerForHeader,\n  createTenantCommon,\n  formFieldStyles,\n  modalBasic,\n  spacingUtils,\n  tenantDetailsStyles,\n  wizardCommon,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport api from \"../../../../common/api\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\n\nimport FormSwitchWrapper from \"../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport Grid from \"@mui/material/Grid\";\nimport FileSelector from \"../../Common/FormComponents/FileSelector/FileSelector\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport RadioGroupSelector from \"../../Common/FormComponents/RadioGroupSelector/RadioGroupSelector\";\nimport { DialogContentText } from \"@mui/material\";\nimport VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\nimport RemoveRedEyeIcon from \"@mui/icons-material/RemoveRedEye\";\nimport { KeyPair } from \"../ListTenants/utils\";\nimport { clearValidationError } from \"../utils\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../utils/validationFunctions\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport TLSCertificate from \"../../Common/TLSCertificate/TLSCertificate\";\nimport SectionTitle from \"../../Common/SectionTitle\";\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\nimport Tabs from \"@mui/material/Tabs\";\nimport Tab from \"@mui/material/Tab\";\nimport CodeMirrorWrapper from \"../../Common/FormComponents/CodeMirrorWrapper/CodeMirrorWrapper\";\n\ninterface ITenantEncryption {\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...tenantDetailsStyles,\n    ...spacingUtils,\n    bold: { fontWeight: \"bold\" },\n    italic: { fontStyle: \"italic\" },\n    fileItem: {\n      marginRight: 10,\n      display: \"flex\",\n      \"& div label\": {\n        minWidth: 50,\n      },\n\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n      },\n    },\n    ...containerForHeader(theme.spacing(4)),\n    ...createTenantCommon,\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst TenantEncryption = ({ classes }: ITenantEncryption) => {\n  const dispatch = useAppDispatch();\n\n  const tenant = useSelector((state: AppState) => state.tenants.tenantInfo);\n  const [editRawConfiguration, setEditRawConfiguration] = useState<number>(0);\n  const [encryptionRawConfiguration, setEncryptionRawConfiguration] =\n    useState<string>(\"\");\n  const [encryptionEnabled, setEncryptionEnabled] = useState<boolean>(false);\n  const [encryptionType, setEncryptionType] = useState<string>(\"vault\");\n  const [replicas, setReplicas] = useState<string>(\"1\");\n  const [image, setImage] = useState<string>(\"\");\n  const [refreshEncryptionInfo, setRefreshEncryptionInfo] =\n    useState<boolean>(false);\n  const [securityContext, setSecurityContext] = useState<ISecurityContext>({\n    fsGroup: \"1000\",\n    fsGroupChangePolicy: \"Always\",\n    runAsGroup: \"1000\",\n    runAsNonRoot: true,\n    runAsUser: \"1000\",\n  });\n  const [vaultConfiguration, setVaultConfiguration] = useState<any>(null);\n  const [awsConfiguration, setAWSConfiguration] = useState<any>(null);\n  const [gemaltoConfiguration, setGemaltoConfiguration] = useState<any>(null);\n  const [azureConfiguration, setAzureConfiguration] = useState<any>(null);\n  const [gcpConfiguration, setGCPConfiguration] = useState<any>(null);\n  const [enabledCustomCertificates, setEnabledCustomCertificates] =\n    useState<boolean>(false);\n  const [updatingEncryption, setUpdatingEncryption] = useState<boolean>(false);\n  const [kesServerTLSCertificateSecret, setKesServerTLSCertificateSecret] =\n    useState<ICertificateInfo | null>(null);\n  const [minioMTLSCertificateSecret, setMinioMTLSCertificateSecret] =\n    useState<ICertificateInfo | null>(null);\n  const [minioMTLSCertificate, setMinioMTLSCertificate] =\n    useState<KeyPair | null>(null);\n  const [certificatesToBeRemoved, setCertificatesToBeRemoved] = useState<\n    string[]\n  >([]);\n  const [showVaultAppRoleID, setShowVaultAppRoleID] = useState<boolean>(false);\n  const [isFormValid, setIsFormValid] = useState<boolean>(false);\n  const [showVaultAppRoleSecret, setShowVaultAppRoleSecret] =\n    useState<boolean>(false);\n  const [kmsMTLSCertificateSecret, setKmsMTLSCertificateSecret] =\n    useState<ICertificateInfo | null>(null);\n  const [kmsCACertificateSecret, setKMSCACertificateSecret] =\n    useState<ICertificateInfo | null>(null);\n  const [kmsMTLSCertificate, setKmsMTLSCertificate] = useState<KeyPair | null>(\n    null\n  );\n  const [kesServerCertificate, setKESServerCertificate] =\n    useState<KeyPair | null>(null);\n  const [kmsCACertificate, setKmsCACertificate] = useState<KeyPair | null>(\n    null\n  );\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n  const [confirmOpen, setConfirmOpen] = useState<boolean>(false);\n\n  // Validation\n  useEffect(() => {\n    let encryptionValidation: IValidation[] = [];\n\n    if (encryptionEnabled) {\n      encryptionValidation = [\n        ...encryptionValidation,\n        {\n          fieldKey: \"replicas\",\n          required: true,\n          value: replicas,\n          customValidation: parseInt(replicas) < 1,\n          customValidationMessage: \"Replicas needs to be 1 or greater\",\n        },\n        {\n          fieldKey: \"kes_securityContext_runAsUser\",\n          required: true,\n          value: securityContext.runAsUser,\n          customValidation:\n            securityContext.runAsUser === \"\" ||\n            parseInt(securityContext.runAsUser) < 0,\n          customValidationMessage: `runAsUser must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"kes_securityContext_runAsGroup\",\n          required: true,\n          value: securityContext.runAsGroup,\n          customValidation:\n            securityContext.runAsGroup === \"\" ||\n            parseInt(securityContext.runAsGroup) < 0,\n          customValidationMessage: `runAsGroup must be present and be 0 or more`,\n        },\n        {\n          fieldKey: \"kes_securityContext_fsGroup\",\n          required: true,\n          value: securityContext.fsGroup,\n          customValidation:\n            securityContext.fsGroup === \"\" ||\n            parseInt(securityContext.fsGroup) < 0,\n          customValidationMessage: `fsGroup must be present and be 0 or more`,\n        },\n      ];\n\n      if (enabledCustomCertificates) {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"serverKey\",\n            required: false,\n            value: kesServerCertificate?.encoded_key || \"\",\n          },\n          {\n            fieldKey: \"serverCert\",\n            required: false,\n            value: kesServerCertificate?.encoded_cert || \"\",\n          },\n          {\n            fieldKey: \"clientKey\",\n            required: false,\n            value: minioMTLSCertificate?.encoded_key || \"\",\n          },\n          {\n            fieldKey: \"clientCert\",\n            required: false,\n            value: minioMTLSCertificate?.encoded_cert || \"\",\n          },\n        ];\n      }\n\n      if (encryptionType === \"vault\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"vault_endpoint\",\n            required: true,\n            value: vaultConfiguration?.endpoint,\n          },\n          {\n            fieldKey: \"vault_id\",\n            required: true,\n            value: vaultConfiguration?.approle?.id,\n          },\n          {\n            fieldKey: \"vault_secret\",\n            required: true,\n            value: vaultConfiguration?.approle?.secret,\n          },\n          {\n            fieldKey: \"vault_ping\",\n            required: false,\n            value: vaultConfiguration?.status?.ping,\n            customValidation: parseInt(vaultConfiguration?.status?.ping) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n          {\n            fieldKey: \"vault_retry\",\n            required: false,\n            value: vaultConfiguration?.approle?.retry,\n            customValidation: parseInt(vaultConfiguration?.approle?.retry) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n        ];\n      }\n\n      if (encryptionType === \"aws\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"aws_endpoint\",\n            required: true,\n            value: awsConfiguration?.secretsmanager?.endpoint,\n          },\n          {\n            fieldKey: \"aws_region\",\n            required: true,\n            value: awsConfiguration?.secretsmanager?.region,\n          },\n          {\n            fieldKey: \"aws_accessKey\",\n            required: true,\n            value: awsConfiguration?.secretsmanager?.credentials?.accesskey,\n          },\n          {\n            fieldKey: \"aws_secretKey\",\n            required: true,\n            value: awsConfiguration?.secretsmanager?.credentials?.secretkey,\n          },\n        ];\n      }\n\n      if (encryptionType === \"gemalto\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"gemalto_endpoint\",\n            required: true,\n            value: gemaltoConfiguration?.keysecure?.endpoint,\n          },\n          {\n            fieldKey: \"gemalto_token\",\n            required: true,\n            value: gemaltoConfiguration?.keysecure?.credentials?.token,\n          },\n          {\n            fieldKey: \"gemalto_domain\",\n            required: true,\n            value: gemaltoConfiguration?.keysecure?.credentials?.domain,\n          },\n          {\n            fieldKey: \"gemalto_retry\",\n            required: false,\n            value: gemaltoConfiguration?.keysecure?.credentials?.retry,\n            customValidation:\n              parseInt(gemaltoConfiguration?.keysecure?.credentials?.retry) < 0,\n            customValidationMessage: \"Value needs to be 0 or greater\",\n          },\n        ];\n      }\n\n      if (encryptionType === \"azure\") {\n        encryptionValidation = [\n          ...encryptionValidation,\n          {\n            fieldKey: \"azure_endpoint\",\n            required: true,\n            value: azureConfiguration?.keyvault?.endpoint,\n          },\n          {\n            fieldKey: \"azure_tenant_id\",\n            required: true,\n            value: azureConfiguration?.keyvault?.credentials?.tenant_id,\n          },\n          {\n            fieldKey: \"azure_client_id\",\n            required: true,\n            value: azureConfiguration?.keyvault?.credentials?.client_id,\n          },\n          {\n            fieldKey: \"azure_client_secret\",\n            required: true,\n            value: azureConfiguration?.keyvault?.credentials?.client_secret,\n          },\n        ];\n      }\n    }\n\n    const commonVal = commonFormValidation(encryptionValidation);\n\n    setIsFormValid(Object.keys(commonVal).length === 0);\n\n    setValidationErrors(commonVal);\n  }, [\n    enabledCustomCertificates,\n    encryptionEnabled,\n    encryptionType,\n    kesServerCertificate?.encoded_key,\n    kesServerCertificate?.encoded_cert,\n    minioMTLSCertificate?.encoded_key,\n    minioMTLSCertificate?.encoded_cert,\n    kmsMTLSCertificate?.encoded_key,\n    kmsMTLSCertificate?.encoded_cert,\n    kmsCACertificate?.encoded_key,\n    kmsCACertificate?.encoded_cert,\n    securityContext,\n    vaultConfiguration,\n    awsConfiguration,\n    gemaltoConfiguration,\n    azureConfiguration,\n    gcpConfiguration,\n    replicas,\n  ]);\n\n  const fetchEncryptionInfo = () => {\n    if (!refreshEncryptionInfo) {\n      setRefreshEncryptionInfo(true);\n      api\n        .invoke(\n          \"GET\",\n          `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/encryption`\n        )\n        .then((resp: ITenantEncryptionResponse) => {\n          setEncryptionRawConfiguration(resp.raw);\n          if (resp.vault) {\n            setEncryptionType(\"vault\");\n            setVaultConfiguration(resp.vault);\n          } else if (resp.aws) {\n            setEncryptionType(\"aws\");\n            setAWSConfiguration(resp.aws);\n          } else if (resp.gemalto) {\n            setEncryptionType(\"gemalto\");\n            setGemaltoConfiguration(resp.gemalto);\n          } else if (resp.gcp) {\n            setEncryptionType(\"gcp\");\n            setGCPConfiguration(resp.gcp);\n          } else if (resp.azure) {\n            setEncryptionType(\"azure\");\n            setAzureConfiguration(resp.azure);\n          }\n\n          setEncryptionEnabled(true);\n          setImage(resp.image);\n          setReplicas(resp.replicas);\n          if (resp.securityContext) {\n            setSecurityContext(resp.securityContext);\n          }\n          if (resp.server_tls || resp.minio_mtls || resp.kms_mtls) {\n            setEnabledCustomCertificates(true);\n          }\n          if (resp.server_tls) {\n            setKesServerTLSCertificateSecret(resp.server_tls);\n          }\n          if (resp.minio_mtls) {\n            setMinioMTLSCertificateSecret(resp.minio_mtls);\n          }\n          if (resp.kms_mtls) {\n            setKmsMTLSCertificateSecret(resp.kms_mtls.crt);\n            setKMSCACertificateSecret(resp.kms_mtls.ca);\n          }\n          setRefreshEncryptionInfo(false);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          console.error(err);\n          setRefreshEncryptionInfo(false);\n        });\n    }\n  };\n\n  useEffect(() => {\n    fetchEncryptionInfo();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const removeCertificate = (certificateInfo: ICertificateInfo) => {\n    setCertificatesToBeRemoved([\n      ...certificatesToBeRemoved,\n      certificateInfo.name,\n    ]);\n    if (certificateInfo.name === kesServerTLSCertificateSecret?.name) {\n      setKesServerTLSCertificateSecret(null);\n    }\n    if (certificateInfo.name === minioMTLSCertificateSecret?.name) {\n      setMinioMTLSCertificateSecret(null);\n    }\n    if (certificateInfo.name === kmsMTLSCertificateSecret?.name) {\n      setKmsMTLSCertificateSecret(null);\n    }\n    if (certificateInfo.name === kmsCACertificateSecret?.name) {\n      setKMSCACertificateSecret(null);\n    }\n  };\n\n  const updateEncryptionConfiguration = () => {\n    if (encryptionEnabled) {\n      let insertEncrypt = {};\n      switch (encryptionType) {\n        case \"gemalto\":\n          insertEncrypt = {\n            gemalto: {\n              keysecure: {\n                endpoint: gemaltoConfiguration?.keysecure?.endpoint || \"\",\n                credentials: {\n                  token:\n                    gemaltoConfiguration?.keysecure?.credentials?.token || \"\",\n                  domain:\n                    gemaltoConfiguration?.keysecure?.credentials?.domain || \"\",\n                  retry: parseInt(\n                    gemaltoConfiguration?.keysecure?.credentials?.retry\n                  ),\n                },\n              },\n            },\n          };\n          break;\n        case \"aws\":\n          insertEncrypt = {\n            aws: {\n              secretsmanager: {\n                endpoint: awsConfiguration?.secretsmanager?.endpoint || \"\",\n                region: awsConfiguration?.secretsmanager?.region || \"\",\n                kmskey: awsConfiguration?.secretsmanager?.kmskey || \"\",\n                credentials: {\n                  accesskey:\n                    awsConfiguration?.secretsmanager?.credentials?.accesskey ||\n                    \"\",\n                  secretkey:\n                    awsConfiguration?.secretsmanager?.credentials?.secretkey ||\n                    \"\",\n                  token:\n                    awsConfiguration?.secretsmanager?.credentials?.token || \"\",\n                },\n              },\n            },\n          };\n          break;\n        case \"azure\":\n          insertEncrypt = {\n            azure: {\n              keyvault: {\n                endpoint: azureConfiguration?.keyvault?.endpoint || \"\",\n                credentials: {\n                  tenant_id:\n                    azureConfiguration?.keyvault?.credentials?.tenant_id || \"\",\n                  client_id:\n                    azureConfiguration?.keyvault?.credentials?.client_id || \"\",\n                  client_secret:\n                    azureConfiguration?.keyvault?.credentials?.client_secret ||\n                    \"\",\n                },\n              },\n            },\n          };\n          break;\n        case \"gcp\":\n          insertEncrypt = {\n            gcp: {\n              secretmanager: {\n                project_id: gcpConfiguration?.secretmanager?.project_id || \"\",\n                endpoint: gcpConfiguration?.secretmanager?.endpoint || \"\",\n                credentials: {\n                  client_email:\n                    gcpConfiguration?.secretmanager?.credentials\n                      ?.client_email || \"\",\n                  client_id:\n                    gcpConfiguration?.secretmanager?.credentials?.client_id ||\n                    \"\",\n                  private_key_id:\n                    gcpConfiguration?.secretmanager?.credentials\n                      ?.private_key_id || \"\",\n                  private_key:\n                    gcpConfiguration?.secretmanager?.credentials?.private_key ||\n                    \"\",\n                },\n              },\n            },\n          };\n          break;\n        case \"vault\":\n          insertEncrypt = {\n            vault: {\n              endpoint: vaultConfiguration?.endpoint || \"\",\n              engine: vaultConfiguration?.engine || \"\",\n              namespace: vaultConfiguration?.namespace || \"\",\n              prefix: vaultConfiguration?.prefix || \"\",\n              approle: {\n                engine: vaultConfiguration?.approle?.engine || \"\",\n                id: vaultConfiguration?.approle?.id || \"\",\n                secret: vaultConfiguration?.approle?.secret || \"\",\n                retry: parseInt(vaultConfiguration?.approle?.retry),\n              },\n              status: {\n                ping: parseInt(vaultConfiguration?.status?.ping),\n              },\n            },\n          };\n          break;\n      }\n\n      let encryptionServerKeyPair: any = {};\n      let encryptionClientKeyPair: any = {};\n      let encryptionKMSCertificates: any = {};\n\n      // MinIO -> KES (mTLS certificates)\n      if (\n        minioMTLSCertificate?.encoded_key &&\n        minioMTLSCertificate?.encoded_cert\n      ) {\n        encryptionClientKeyPair = {\n          minio_mtls: {\n            key: minioMTLSCertificate?.encoded_key,\n            crt: minioMTLSCertificate?.encoded_cert,\n          },\n        };\n      }\n\n      // KES server certificates\n      if (\n        kesServerCertificate?.encoded_key &&\n        kesServerCertificate?.encoded_cert\n      ) {\n        encryptionServerKeyPair = {\n          server_tls: {\n            key: kesServerCertificate?.encoded_key,\n            crt: kesServerCertificate?.encoded_cert,\n          },\n        };\n      }\n\n      // KES -> KMS (mTLS certificates)\n      let kmsMTLSKeyPair = null;\n      let kmsCAInsert = null;\n      if (kmsMTLSCertificate?.encoded_key && kmsMTLSCertificate?.encoded_cert) {\n        kmsMTLSKeyPair = {\n          key: kmsMTLSCertificate?.encoded_key,\n          crt: kmsMTLSCertificate?.encoded_cert,\n        };\n      }\n      if (kmsCACertificate?.encoded_cert) {\n        kmsCAInsert = {\n          ca: kmsCACertificate?.encoded_cert,\n        };\n      }\n      if (kmsMTLSKeyPair || kmsCAInsert) {\n        encryptionKMSCertificates = {\n          kms_mtls: {\n            ...kmsMTLSKeyPair,\n            ...kmsCAInsert,\n          },\n        };\n      }\n\n      const dataSend = {\n        raw: editRawConfiguration ? encryptionRawConfiguration : \"\",\n        secretsToBeDeleted: certificatesToBeRemoved || [],\n        replicas: replicas,\n        securityContext: securityContext,\n        image: image,\n        ...encryptionClientKeyPair,\n        ...encryptionServerKeyPair,\n        ...encryptionKMSCertificates,\n        ...insertEncrypt,\n      };\n      if (!updatingEncryption) {\n        setUpdatingEncryption(true);\n        api\n          .invoke(\n            \"PUT\",\n            `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/encryption`,\n            dataSend\n          )\n          .then(() => {\n            setConfirmOpen(false);\n            setUpdatingEncryption(false);\n            fetchEncryptionInfo();\n          })\n          .catch((err: ErrorResponseHandler) => {\n            setUpdatingEncryption(false);\n            dispatch(setErrorSnackMessage(err));\n          });\n      }\n    } else {\n      if (!updatingEncryption) {\n        setUpdatingEncryption(true);\n        api\n          .invoke(\n            \"DELETE\",\n            `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/encryption`,\n            {}\n          )\n          .then(() => {\n            setConfirmOpen(false);\n            setUpdatingEncryption(false);\n            fetchEncryptionInfo();\n          })\n          .catch((err: ErrorResponseHandler) => {\n            setUpdatingEncryption(false);\n            dispatch(setErrorSnackMessage(err));\n          });\n      }\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {confirmOpen && (\n        <ConfirmDialog\n          isOpen={confirmOpen}\n          title={\n            encryptionEnabled\n              ? \"Enable encryption at rest for tenant?\"\n              : \"Disable encryption at rest for tenant?\"\n          }\n          confirmText={encryptionEnabled ? \"Enable\" : \"Disable\"}\n          cancelText=\"Cancel\"\n          onClose={() => setConfirmOpen(false)}\n          onConfirm={updateEncryptionConfiguration}\n          confirmationContent={\n            <DialogContentText>\n              {encryptionEnabled\n                ? \"Data will be encrypted using and external KMS\"\n                : \"Current encrypted information will not be accessible\"}\n            </DialogContentText>\n          }\n        />\n      )}\n      <Grid container spacing={1}>\n        <Grid item xs>\n          <h1 className={classes.sectionTitle}>Encryption</h1>\n        </Grid>\n        <Grid item xs={4} justifyContent={\"end\"} textAlign={\"right\"}>\n          <FormSwitchWrapper\n            label={\"\"}\n            indicatorLabels={[\"Enabled\", \"Disabled\"]}\n            checked={encryptionEnabled}\n            value={\"tenant_encryption\"}\n            id=\"tenant-encryption\"\n            name=\"tenant-encryption\"\n            onChange={() => {\n              setEncryptionEnabled(!encryptionEnabled);\n            }}\n            description=\"\"\n          />\n        </Grid>\n        <Grid xs={12}>\n          <hr className={classes.hrClass} />\n        </Grid>\n        {encryptionEnabled && (\n          <Fragment>\n            <Grid item xs={12}>\n              <Tabs\n                value={editRawConfiguration}\n                onChange={(e: React.ChangeEvent<{}>, newValue: number) => {\n                  setEditRawConfiguration(newValue);\n                }}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                aria-label=\"cluster-tabs\"\n                variant=\"scrollable\"\n                scrollButtons=\"auto\"\n              >\n                <Tab id=\"kms-options\" label=\"Options\" />\n                <Tab id=\"kms-raw-configuration\" label=\"Raw Edit\" />\n              </Tabs>\n            </Grid>\n\n            {editRawConfiguration ? (\n              <Fragment>\n                <Grid item xs={12}>\n                  <CodeMirrorWrapper\n                    value={encryptionRawConfiguration}\n                    mode={\"yaml\"}\n                    onBeforeChange={(editor, data, value) => {\n                      setEncryptionRawConfiguration(value);\n                    }}\n                    editorHeight={\"550px\"}\n                  />\n                </Grid>\n              </Fragment>\n            ) : (\n              <Fragment>\n                <Grid item xs={12} className={classes.encryptionTypeOptions}>\n                  <RadioGroupSelector\n                    currentSelection={encryptionType}\n                    id=\"encryptionType\"\n                    name=\"encryptionType\"\n                    label=\"KMS\"\n                    onChange={(e) => {\n                      setEncryptionType(e.target.value);\n                    }}\n                    selectorOptions={[\n                      { label: \"Vault\", value: \"vault\" },\n                      { label: \"AWS\", value: \"aws\" },\n                      { label: \"Gemalto\", value: \"gemalto\" },\n                      { label: \"GCP\", value: \"gcp\" },\n                      { label: \"Azure\", value: \"azure\" },\n                    ]}\n                  />\n                </Grid>\n                {encryptionType === \"vault\" && (\n                  <Fragment>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"vault_endpoint\"\n                        name=\"vault_endpoint\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setVaultConfiguration({\n                            ...vaultConfiguration,\n                            endpoint: e.target.value,\n                          })\n                        }\n                        label=\"Endpoint\"\n                        value={vaultConfiguration?.endpoint || \"\"}\n                        error={validationErrors[\"vault_ping\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"vault_engine\"\n                        name=\"vault_engine\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setVaultConfiguration({\n                            ...vaultConfiguration,\n                            engine: e.target.value,\n                          })\n                        }\n                        label=\"Engine\"\n                        value={vaultConfiguration?.engine || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"vault_namespace\"\n                        name=\"vault_namespace\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setVaultConfiguration({\n                            ...vaultConfiguration,\n                            namespace: e.target.value,\n                          })\n                        }\n                        label=\"Namespace\"\n                        value={vaultConfiguration?.namespace || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"vault_prefix\"\n                        name=\"vault_prefix\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setVaultConfiguration({\n                            ...vaultConfiguration,\n                            prefix: e.target.value,\n                          })\n                        }\n                        label=\"Prefix\"\n                        value={vaultConfiguration?.prefix || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <SectionTitle>App Role</SectionTitle>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"vault_approle_engine\"\n                        name=\"vault_approle_engine\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setVaultConfiguration({\n                            ...vaultConfiguration,\n                            approle: {\n                              ...vaultConfiguration?.approle,\n                              engine: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"Engine\"\n                        value={vaultConfiguration?.approle?.engine || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        type={showVaultAppRoleID ? \"text\" : \"password\"}\n                        id=\"vault_id\"\n                        name=\"vault_id\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setVaultConfiguration({\n                            ...vaultConfiguration,\n                            approle: {\n                              ...vaultConfiguration?.approle,\n                              id: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"AppRole ID\"\n                        value={vaultConfiguration?.approle?.id || \"\"}\n                        required\n                        error={validationErrors[\"vault_id\"] || \"\"}\n                        overlayIcon={\n                          showVaultAppRoleID ? (\n                            <VisibilityOffIcon />\n                          ) : (\n                            <RemoveRedEyeIcon />\n                          )\n                        }\n                        overlayAction={() =>\n                          setShowVaultAppRoleID(!showVaultAppRoleID)\n                        }\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        type={showVaultAppRoleSecret ? \"text\" : \"password\"}\n                        id=\"vault_secret\"\n                        name=\"vault_secret\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setVaultConfiguration({\n                            ...vaultConfiguration,\n                            approle: {\n                              ...vaultConfiguration?.approle,\n                              secret: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"AppRole Secret\"\n                        value={vaultConfiguration?.approle?.secret || \"\"}\n                        required\n                        error={validationErrors[\"vault_secret\"] || \"\"}\n                        overlayIcon={\n                          showVaultAppRoleSecret ? (\n                            <VisibilityOffIcon />\n                          ) : (\n                            <RemoveRedEyeIcon />\n                          )\n                        }\n                        overlayAction={() =>\n                          setShowVaultAppRoleSecret(!showVaultAppRoleSecret)\n                        }\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        type=\"number\"\n                        min=\"0\"\n                        id=\"vault_retry\"\n                        name=\"vault_retry\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setVaultConfiguration({\n                            ...vaultConfiguration,\n                            approle: {\n                              ...vaultConfiguration?.approle,\n                              retry: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"Retry (Seconds)\"\n                        error={validationErrors[\"vault_retry\"] || \"\"}\n                        value={vaultConfiguration?.approle?.retry || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <SectionTitle>Status</SectionTitle>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        type=\"number\"\n                        min=\"0\"\n                        id=\"vault_ping\"\n                        name=\"vault_ping\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setVaultConfiguration({\n                            ...vaultConfiguration,\n                            status: {\n                              ...vaultConfiguration?.status,\n                              ping: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"Ping (Seconds)\"\n                        error={validationErrors[\"vault_ping\"] || \"\"}\n                        value={vaultConfiguration?.status?.ping || \"\"}\n                      />\n                    </Grid>\n                  </Fragment>\n                )}\n                {encryptionType === \"azure\" && (\n                  <Fragment>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"azure_endpoint\"\n                        name=\"azure_endpoint\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAzureConfiguration({\n                            ...azureConfiguration,\n                            keyvault: {\n                              ...azureConfiguration?.keyvault,\n                              endpoint: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"Endpoint\"\n                        error={validationErrors[\"azure_endpoint\"] || \"\"}\n                        value={azureConfiguration?.keyvault?.endpoint || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <SectionTitle>Credentials</SectionTitle>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"azure_tenant_id\"\n                        name=\"azure_tenant_id\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAzureConfiguration({\n                            ...azureConfiguration,\n                            keyvault: {\n                              ...azureConfiguration?.keyvault,\n                              credentials: {\n                                ...azureConfiguration?.keyvault?.credentials,\n                                tenant_id: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Tenant ID\"\n                        value={\n                          azureConfiguration?.keyvault?.credentials\n                            ?.tenant_id || \"\"\n                        }\n                        error={validationErrors[\"azure_tenant_id\"] || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"azure_client_id\"\n                        name=\"azure_client_id\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAzureConfiguration({\n                            ...azureConfiguration,\n                            keyvault: {\n                              ...azureConfiguration?.keyvault,\n                              credentials: {\n                                ...azureConfiguration?.keyvault?.credentials,\n                                client_id: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Client ID\"\n                        value={\n                          azureConfiguration?.keyvault?.credentials\n                            ?.client_id || \"\"\n                        }\n                        error={validationErrors[\"azure_client_id\"] || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"azure_client_secret\"\n                        name=\"azure_client_secret\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAzureConfiguration({\n                            ...azureConfiguration,\n                            keyvault: {\n                              ...azureConfiguration?.keyvault,\n                              credentials: {\n                                ...azureConfiguration?.keyvault?.credentials,\n                                client_secret: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Client Secret\"\n                        value={\n                          azureConfiguration?.keyvault?.credentials\n                            ?.client_secret || \"\"\n                        }\n                        error={validationErrors[\"azure_client_secret\"] || \"\"}\n                      />\n                    </Grid>\n                  </Fragment>\n                )}\n                {encryptionType === \"gcp\" && (\n                  <Fragment>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"gcp_project_id\"\n                        name=\"gcp_project_id\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGCPConfiguration({\n                            ...gcpConfiguration,\n                            secretmanager: {\n                              ...gcpConfiguration?.secretmanager,\n                              project_id: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"Project ID\"\n                        value={gcpConfiguration?.secretmanager.project_id || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"gcp_endpoint\"\n                        name=\"gcp_endpoint\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGCPConfiguration({\n                            ...gcpConfiguration,\n                            secretmanager: {\n                              ...gcpConfiguration?.secretmanager,\n                              endpoint: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"Endpoint\"\n                        value={gcpConfiguration?.secretmanager.endpoint || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <SectionTitle>Credentials</SectionTitle>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"gcp_client_email\"\n                        name=\"gcp_client_email\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGCPConfiguration({\n                            ...gcpConfiguration,\n                            secretmanager: {\n                              ...gcpConfiguration?.secretmanager,\n                              credentials: {\n                                ...gcpConfiguration?.secretmanager.credentials,\n                                client_email: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Client Email\"\n                        value={\n                          gcpConfiguration?.secretmanager.credentials\n                            ?.client_email || \"\"\n                        }\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"gcp_client_id\"\n                        name=\"gcp_client_id\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGCPConfiguration({\n                            ...gcpConfiguration,\n                            secretmanager: {\n                              ...gcpConfiguration?.secretmanager,\n                              credentials: {\n                                ...gcpConfiguration?.secretmanager.credentials,\n                                client_id: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Client ID\"\n                        value={\n                          gcpConfiguration?.secretmanager.credentials\n                            ?.client_id || \"\"\n                        }\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"gcp_private_key_id\"\n                        name=\"gcp_private_key_id\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGCPConfiguration({\n                            ...gcpConfiguration,\n                            secretmanager: {\n                              ...gcpConfiguration?.secretmanager,\n                              credentials: {\n                                ...gcpConfiguration?.secretmanager.credentials,\n                                private_key_id: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Private Key ID\"\n                        value={\n                          gcpConfiguration?.secretmanager.credentials\n                            ?.private_key_id || \"\"\n                        }\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"gcp_private_key\"\n                        name=\"gcp_private_key\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGCPConfiguration({\n                            ...gcpConfiguration,\n                            secretmanager: {\n                              ...gcpConfiguration?.secretmanager,\n                              credentials: {\n                                ...gcpConfiguration?.secretmanager.credentials,\n                                private_key: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Private Key\"\n                        value={\n                          gcpConfiguration?.secretmanager.credentials\n                            ?.private_key || \"\"\n                        }\n                      />\n                    </Grid>\n                  </Fragment>\n                )}\n                {encryptionType === \"aws\" && (\n                  <Fragment>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"aws_endpoint\"\n                        name=\"aws_endpoint\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAWSConfiguration({\n                            ...awsConfiguration,\n                            secretsmanager: {\n                              ...awsConfiguration?.secretsmanager,\n                              endpoint: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"Endpoint\"\n                        value={awsConfiguration?.secretsmanager?.endpoint || \"\"}\n                        required\n                        error={validationErrors[\"aws_endpoint\"] || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"aws_region\"\n                        name=\"aws_region\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAWSConfiguration({\n                            ...awsConfiguration,\n                            secretsmanager: {\n                              ...awsConfiguration?.secretsmanager,\n                              region: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"Region\"\n                        value={awsConfiguration?.secretsmanager?.region || \"\"}\n                        error={validationErrors[\"aws_region\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"aws_kmsKey\"\n                        name=\"aws_kmsKey\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAWSConfiguration({\n                            ...awsConfiguration,\n                            secretsmanager: {\n                              ...awsConfiguration?.secretsmanager,\n                              kmskey: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"KMS Key\"\n                        value={awsConfiguration?.secretsmanager?.kmskey || \"\"}\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <SectionTitle>Credentials</SectionTitle>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"aws_accessKey\"\n                        name=\"aws_accessKey\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAWSConfiguration({\n                            ...awsConfiguration,\n                            secretsmanager: {\n                              ...awsConfiguration?.secretsmanager,\n                              credentials: {\n                                ...awsConfiguration?.secretsmanager\n                                  ?.credentials,\n                                accesskey: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Access Key\"\n                        value={\n                          awsConfiguration?.secretsmanager?.credentials\n                            ?.accesskey || \"\"\n                        }\n                        error={validationErrors[\"aws_accessKey\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"aws_secretKey\"\n                        name=\"aws_secretKey\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAWSConfiguration({\n                            ...awsConfiguration,\n                            secretsmanager: {\n                              ...awsConfiguration?.secretsmanager,\n                              credentials: {\n                                ...awsConfiguration?.secretsmanager\n                                  ?.credentials,\n                                secretkey: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Secret Key\"\n                        value={\n                          awsConfiguration?.secretsmanager?.credentials\n                            ?.secretkey || \"\"\n                        }\n                        error={validationErrors[\"aws_secretKey\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"aws_token\"\n                        name=\"aws_token\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setAWSConfiguration({\n                            ...awsConfiguration,\n                            secretsmanager: {\n                              ...awsConfiguration?.secretsmanager,\n                              credentials: {\n                                ...awsConfiguration?.secretsmanager\n                                  ?.credentials,\n                                token: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Token\"\n                        value={\n                          awsConfiguration?.secretsmanager?.credentials\n                            ?.token || \"\"\n                        }\n                      />\n                    </Grid>\n                  </Fragment>\n                )}\n                {encryptionType === \"gemalto\" && (\n                  <Fragment>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"gemalto_endpoint\"\n                        name=\"gemalto_endpoint\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGemaltoConfiguration({\n                            ...gemaltoConfiguration,\n                            keysecure: {\n                              ...gemaltoConfiguration?.keysecure,\n                              endpoint: e.target.value,\n                            },\n                          })\n                        }\n                        label=\"Endpoint\"\n                        value={gemaltoConfiguration?.keysecure?.endpoint || \"\"}\n                        error={validationErrors[\"gemalto_endpoint\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <SectionTitle>Credentials</SectionTitle>\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"gemalto_token\"\n                        name=\"gemalto_token\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGemaltoConfiguration({\n                            ...gemaltoConfiguration,\n                            keysecure: {\n                              ...gemaltoConfiguration?.keysecure,\n                              credentials: {\n                                ...gemaltoConfiguration?.keysecure?.credentials,\n                                token: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Token\"\n                        value={\n                          gemaltoConfiguration?.keysecure?.credentials?.token ||\n                          \"\"\n                        }\n                        error={validationErrors[\"gemalto_token\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        id=\"gemalto_domain\"\n                        name=\"gemalto_domain\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGemaltoConfiguration({\n                            ...gemaltoConfiguration,\n                            keysecure: {\n                              ...gemaltoConfiguration?.keysecure,\n                              credentials: {\n                                ...gemaltoConfiguration?.keysecure?.credentials,\n                                domain: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Domain\"\n                        value={\n                          gemaltoConfiguration?.keysecure?.credentials\n                            ?.domain || \"\"\n                        }\n                        error={validationErrors[\"gemalto_domain\"] || \"\"}\n                        required\n                      />\n                    </Grid>\n                    <Grid item xs={12}>\n                      <InputBoxWrapper\n                        type=\"number\"\n                        min=\"0\"\n                        id=\"gemalto_retry\"\n                        name=\"gemalto_retry\"\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                          setGemaltoConfiguration({\n                            ...gemaltoConfiguration,\n                            keysecure: {\n                              ...gemaltoConfiguration?.keysecure,\n                              credentials: {\n                                ...gemaltoConfiguration?.keysecure?.credentials,\n                                retry: e.target.value,\n                              },\n                            },\n                          })\n                        }\n                        label=\"Retry (seconds)\"\n                        value={\n                          gemaltoConfiguration?.keysecure?.credentials?.retry ||\n                          \"\"\n                        }\n                        error={validationErrors[\"gemalto_retry\"] || \"\"}\n                      />\n                    </Grid>\n                  </Fragment>\n                )}\n              </Fragment>\n            )}\n\n            <Grid item xs={12}>\n              <SectionTitle>Additional Configuration for KES</SectionTitle>\n            </Grid>\n            <Grid item xs={12}>\n              <FormSwitchWrapper\n                value=\"enableCustomCertsForKES\"\n                id=\"enableCustomCertsForKES\"\n                name=\"enableCustomCertsForKES\"\n                checked={enabledCustomCertificates}\n                onChange={() =>\n                  setEnabledCustomCertificates(!enabledCustomCertificates)\n                }\n                label={\"Custom Certificates\"}\n              />\n            </Grid>\n            {enabledCustomCertificates && (\n              <Fragment>\n                <Grid item xs={12}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      Encryption server certificates\n                    </legend>\n                    {kesServerTLSCertificateSecret ? (\n                      <TLSCertificate\n                        certificateInfo={kesServerTLSCertificateSecret}\n                        onDelete={() =>\n                          removeCertificate(kesServerTLSCertificateSecret)\n                        }\n                      />\n                    ) : (\n                      <Fragment>\n                        <FileSelector\n                          onChange={(encodedValue, fileName) => {\n                            setKESServerCertificate({\n                              encoded_key: encodedValue || \"\",\n                              id: kesServerCertificate?.id || \"\",\n                              key: fileName || \"\",\n                              cert: kesServerCertificate?.cert || \"\",\n                              encoded_cert:\n                                kesServerCertificate?.encoded_cert || \"\",\n                            });\n                            cleanValidation(\"serverKey\");\n                          }}\n                          accept=\".key,.pem\"\n                          id=\"serverKey\"\n                          name=\"serverKey\"\n                          label=\"Key\"\n                          value={kesServerCertificate?.key}\n                        />\n                        <FileSelector\n                          onChange={(encodedValue, fileName) => {\n                            setKESServerCertificate({\n                              encoded_key:\n                                kesServerCertificate?.encoded_key || \"\",\n                              id: kesServerCertificate?.id || \"\",\n                              key: kesServerCertificate?.key || \"\",\n                              cert: fileName || \"\",\n                              encoded_cert: encodedValue || \"\",\n                            });\n                            cleanValidation(\"serverCert\");\n                          }}\n                          accept=\".cer,.crt,.cert,.pem\"\n                          id=\"serverCert\"\n                          name=\"serverCert\"\n                          label=\"Cert\"\n                          value={kesServerCertificate?.cert}\n                        />\n                      </Fragment>\n                    )}\n                  </fieldset>\n                </Grid>\n                <Grid item xs={12}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      MinIO mTLS certificates (connection between MinIO and the\n                      Encryption server)\n                    </legend>\n                    {minioMTLSCertificateSecret ? (\n                      <TLSCertificate\n                        certificateInfo={minioMTLSCertificateSecret}\n                        onDelete={() =>\n                          removeCertificate(minioMTLSCertificateSecret)\n                        }\n                      />\n                    ) : (\n                      <Fragment>\n                        <FileSelector\n                          onChange={(encodedValue, fileName) => {\n                            setMinioMTLSCertificate({\n                              encoded_key: encodedValue || \"\",\n                              id: minioMTLSCertificate?.id || \"\",\n                              key: fileName || \"\",\n                              cert: minioMTLSCertificate?.cert || \"\",\n                              encoded_cert:\n                                minioMTLSCertificate?.encoded_cert || \"\",\n                            });\n                            cleanValidation(\"clientKey\");\n                          }}\n                          accept=\".key,.pem\"\n                          id=\"clientKey\"\n                          name=\"clientKey\"\n                          label=\"Key\"\n                          value={minioMTLSCertificate?.key}\n                        />\n                        <FileSelector\n                          onChange={(encodedValue, fileName) => {\n                            setMinioMTLSCertificate({\n                              encoded_key:\n                                minioMTLSCertificate?.encoded_key || \"\",\n                              id: minioMTLSCertificate?.id || \"\",\n                              key: minioMTLSCertificate?.key || \"\",\n                              cert: fileName || \"\",\n                              encoded_cert: encodedValue || \"\",\n                            });\n                            cleanValidation(\"clientCert\");\n                          }}\n                          accept=\".cer,.crt,.cert,.pem\"\n                          id=\"clientCert\"\n                          name=\"clientCert\"\n                          label=\"Cert\"\n                          value={minioMTLSCertificate?.cert}\n                        />\n                      </Fragment>\n                    )}\n                  </fieldset>\n                </Grid>\n                <Grid item xs={12}>\n                  <fieldset className={classes.fieldGroup}>\n                    <legend className={classes.descriptionText}>\n                      KMS mTLS certificates (connection between the Encryption\n                      server and the KMS)\n                    </legend>\n                    {kmsMTLSCertificateSecret ? (\n                      <TLSCertificate\n                        certificateInfo={kmsMTLSCertificateSecret}\n                        onDelete={() =>\n                          removeCertificate(kmsMTLSCertificateSecret)\n                        }\n                      />\n                    ) : (\n                      <Fragment>\n                        <FileSelector\n                          onChange={(encodedValue, fileName) => {\n                            setKmsMTLSCertificate({\n                              encoded_key: encodedValue || \"\",\n                              id: kmsMTLSCertificate?.id || \"\",\n                              key: fileName || \"\",\n                              cert: kmsMTLSCertificate?.cert || \"\",\n                              encoded_cert:\n                                kmsMTLSCertificate?.encoded_cert || \"\",\n                            });\n                          }}\n                          accept=\".key,.pem\"\n                          id=\"kms_mtls_key\"\n                          name=\"kms_mtls_key\"\n                          label=\"Key\"\n                          value={kmsMTLSCertificate?.key}\n                        />\n                        <FileSelector\n                          onChange={(encodedValue, fileName) =>\n                            setKmsMTLSCertificate({\n                              encoded_key:\n                                kmsMTLSCertificate?.encoded_key || \"\",\n                              id: kmsMTLSCertificate?.id || \"\",\n                              key: kmsMTLSCertificate?.key || \"\",\n                              cert: fileName || \"\",\n                              encoded_cert: encodedValue || \"\",\n                            })\n                          }\n                          accept=\".cer,.crt,.cert,.pem\"\n                          id=\"kms_mtls_cert\"\n                          name=\"kms_mtls_cert\"\n                          label=\"Cert\"\n                          value={kmsMTLSCertificate?.cert || \"\"}\n                        />\n                      </Fragment>\n                    )}\n                    {kmsCACertificateSecret ? (\n                      <TLSCertificate\n                        certificateInfo={kmsCACertificateSecret}\n                        onDelete={() =>\n                          removeCertificate(kmsCACertificateSecret)\n                        }\n                      />\n                    ) : (\n                      <FileSelector\n                        onChange={(encodedValue, fileName) =>\n                          setKmsCACertificate({\n                            encoded_key: kmsCACertificate?.encoded_key || \"\",\n                            id: kmsCACertificate?.id || \"\",\n                            key: kmsCACertificate?.key || \"\",\n                            cert: fileName || \"\",\n                            encoded_cert: encodedValue || \"\",\n                          })\n                        }\n                        accept=\".cer,.crt,.cert,.pem\"\n                        id=\"kms_mtls_ca\"\n                        name=\"kms_mtls_ca\"\n                        label=\"CA\"\n                        value={kmsCACertificate?.cert || \"\"}\n                      />\n                    )}\n                  </fieldset>\n                </Grid>\n              </Fragment>\n            )}\n            <Grid item xs={12}>\n              <InputBoxWrapper\n                type=\"text\"\n                id=\"image\"\n                name=\"image\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                  setImage(e.target.value)\n                }\n                label=\"Image\"\n                placeholder=\"minio/kes:v0.17.6\"\n                value={image}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <InputBoxWrapper\n                type=\"number\"\n                min=\"1\"\n                id=\"replicas\"\n                name=\"replicas\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                  setReplicas(e.target.value)\n                }\n                label=\"Replicas\"\n                value={replicas}\n                required\n                error={validationErrors[\"replicas\"] || \"\"}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <SectionTitle>SecurityContext for KES</SectionTitle>\n            </Grid>\n            <Grid item xs={12}>\n              <div\n                className={`${classes.multiContainer} ${classes.responsiveContainer}`}\n              >\n                <div\n                  className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                >\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"kes_securityContext_runAsUser\"\n                    name=\"kes_securityContext_runAsUser\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      setSecurityContext({\n                        ...securityContext,\n                        runAsUser: e.target.value,\n                      });\n                    }}\n                    label=\"Run As User\"\n                    value={securityContext.runAsUser}\n                    required\n                    error={\n                      validationErrors[\"kes_securityContext_runAsUser\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div\n                  className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                >\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"kes_securityContext_runAsGroup\"\n                    name=\"kes_securityContext_runAsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      setSecurityContext({\n                        ...securityContext,\n                        runAsGroup: e.target.value,\n                      });\n                    }}\n                    label=\"Run As Group\"\n                    value={securityContext.runAsGroup}\n                    required\n                    error={\n                      validationErrors[\"kes_securityContext_runAsGroup\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n                <div\n                  className={`${classes.formFieldRow} ${classes.rightSpacer}`}\n                >\n                  <InputBoxWrapper\n                    type=\"number\"\n                    id=\"kes_securityContext_fsGroup\"\n                    name=\"kes_securityContext_fsGroup\"\n                    onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                      setSecurityContext({\n                        ...securityContext,\n                        fsGroup: e.target.value,\n                      });\n                    }}\n                    label=\"FsGroup\"\n                    value={securityContext.fsGroup}\n                    required\n                    error={\n                      validationErrors[\"kes_securityContext_fsGroup\"] || \"\"\n                    }\n                    min=\"0\"\n                  />\n                </div>\n              </div>\n            </Grid>\n            <Grid item xs={12}>\n              <FormSwitchWrapper\n                value=\"kesSecurityContextRunAsNonRoot\"\n                id=\"kes_securityContext_runAsNonRoot\"\n                name=\"kes_securityContext_runAsNonRoot\"\n                checked={securityContext.runAsNonRoot}\n                onChange={(e) => {\n                  const targetD = e.target;\n                  const checked = targetD.checked;\n                  setSecurityContext({\n                    ...securityContext,\n                    runAsNonRoot: checked,\n                  });\n                }}\n                label={\"Do not run as Root\"}\n              />\n            </Grid>\n          </Fragment>\n        )}\n        <Grid item xs={12} sx={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n          <Button\n            id={\"save-encryption\"}\n            type=\"submit\"\n            variant=\"callAction\"\n            disabled={!isFormValid}\n            onClick={() => setConfirmOpen(true)}\n            label={\"Save\"}\n          />\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(TenantEncryption);\n","import React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport { Theme } from \"@mui/material/styles\";\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    errorBlock: {\n      color: theme.palette?.error.main || \"#C83B51\",\n    },\n  });\n\ninterface IErrorBlockProps {\n  classes: any;\n  errorMessage: string;\n  withBreak?: boolean;\n}\n\nconst ErrorBlock = ({\n  classes,\n  errorMessage,\n  withBreak = true,\n}: IErrorBlockProps) => {\n  return (\n    <React.Fragment>\n      {withBreak && <br />}\n      <Typography component=\"p\" variant=\"body1\" className={classes.errorBlock}>\n        {errorMessage}\n      </Typography>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(ErrorBlock);\n"],"names":["withStyles","theme","createStyles","fieldBasic","value","label","tooltip","mode","classes","onBeforeChange","readOnly","editorHeight","item","xs","sx","marginBottom","className","inputLabel","tooltipContainer","title","placement","style","maxHeight","overflow","border","language","onChange","evn","target","id","padding","fontSize","backgroundColor","fontFamily","minHeight","color","background","borderTop","display","alignItems","paddingRight","justifyContent","height","width","marginLeft","text","type","icon","variant","tooltipHelper","valueString","maxWidth","whiteSpace","textOverflow","marginTop","fileInputField","margin","flexFlow","fileInputStyles","fontWeight","textBoxContainer","paddingLeft","name","disabled","required","error","accept","useState","showFileSelector","setShowSelector","Grid","fieldBottom","fieldContainer","errorInField","InputLabel","htmlFor","fieldLabelError","Tooltip","e","fileName","get","evt","callback","file","files","reader","FileReader","readAsDataURL","onload","fileBase64","result","fileArray","toString","split","length","fileProcess","data","IconButton","component","onClick","disableRipple","disableFocusRipple","size","Cancel","ErrorBlock","errorMessage","fileReselect","AttachFile","certificateIcon","float","paddingTop","certificateInfo","certificateWrapper","userSelect","borderRadius","certificateExpiry","flexWrap","certificateDomains","certificatesList","textTransform","overflowY","certificatesListItem","borderBottom","minWidth","marginRight","opacity","onDelete","certificates","domains","expiry","DateTime","gutterBottom","toFormat","map","dom","index","primary","tenantDetailsStyles","spacingUtils","bold","italic","fontStyle","fileItem","containerForHeader","spacing","createTenantCommon","formFieldStyles","modalBasic","wizardCommon","dispatch","useAppDispatch","tenant","useSelector","state","tenants","tenantInfo","editRawConfiguration","setEditRawConfiguration","encryptionRawConfiguration","setEncryptionRawConfiguration","encryptionEnabled","setEncryptionEnabled","encryptionType","setEncryptionType","replicas","setReplicas","image","setImage","refreshEncryptionInfo","setRefreshEncryptionInfo","fsGroup","fsGroupChangePolicy","runAsGroup","runAsNonRoot","runAsUser","securityContext","setSecurityContext","vaultConfiguration","setVaultConfiguration","awsConfiguration","setAWSConfiguration","gemaltoConfiguration","setGemaltoConfiguration","azureConfiguration","setAzureConfiguration","gcpConfiguration","setGCPConfiguration","enabledCustomCertificates","setEnabledCustomCertificates","updatingEncryption","setUpdatingEncryption","kesServerTLSCertificateSecret","setKesServerTLSCertificateSecret","minioMTLSCertificateSecret","setMinioMTLSCertificateSecret","minioMTLSCertificate","setMinioMTLSCertificate","certificatesToBeRemoved","setCertificatesToBeRemoved","showVaultAppRoleID","setShowVaultAppRoleID","isFormValid","setIsFormValid","showVaultAppRoleSecret","setShowVaultAppRoleSecret","kmsMTLSCertificateSecret","setKmsMTLSCertificateSecret","kmsCACertificateSecret","setKMSCACertificateSecret","kmsMTLSCertificate","setKmsMTLSCertificate","kesServerCertificate","setKESServerCertificate","kmsCACertificate","setKmsCACertificate","validationErrors","setValidationErrors","cleanValidation","fieldName","clearValidationError","confirmOpen","setConfirmOpen","useEffect","encryptionValidation","fieldKey","customValidation","parseInt","customValidationMessage","encoded_key","encoded_cert","endpoint","approle","secret","status","ping","retry","secretsmanager","region","credentials","accesskey","secretkey","keysecure","token","domain","keyvault","tenant_id","client_id","client_secret","commonVal","commonFormValidation","Object","keys","fetchEncryptionInfo","api","namespace","then","resp","raw","vault","aws","gemalto","gcp","azure","server_tls","minio_mtls","kms_mtls","crt","ca","catch","err","console","removeCertificate","isOpen","confirmText","cancelText","onClose","onConfirm","insertEncrypt","kmskey","secretmanager","project_id","client_email","private_key_id","private_key","engine","prefix","encryptionServerKeyPair","encryptionClientKeyPair","encryptionKMSCertificates","key","kmsMTLSKeyPair","kmsCAInsert","dataSend","secretsToBeDeleted","setErrorSnackMessage","confirmationContent","container","sectionTitle","textAlign","indicatorLabels","checked","description","hrClass","Fragment","newValue","indicatorColor","textColor","scrollButtons","editor","encryptionTypeOptions","currentSelection","selectorOptions","overlayIcon","overlayAction","min","fieldGroup","descriptionText","encodedValue","cert","placeholder","multiContainer","responsiveContainer","formFieldRow","rightSpacer","errorBlock","palette","main","withBreak"],"sourceRoot":""}