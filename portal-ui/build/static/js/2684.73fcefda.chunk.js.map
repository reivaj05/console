{"version":3,"file":"static/js/2684.73fcefda.chunk.js","mappings":"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","sources":["screens/Console/Common/FormComponents/FileSelector/FileSelector.tsx","screens/Console/Common/FormComponents/FileSelector/utils.ts","screens/Console/Common/TLSCertificate/TLSCertificate.tsx","screens/Console/Tenants/HelpBox/TLSHelpBox.tsx","screens/Console/Tenants/TenantDetails/TenantSecurity.tsx","screens/Console/Tenants/securityContextSelector.tsx","screens/shared/ErrorBlock.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useState } from \"react\";\nimport get from \"lodash/get\";\nimport { Grid, InputLabel, Tooltip } from \"@mui/material\";\nimport IconButton from \"@mui/material/IconButton\";\nimport AttachFileIcon from \"@mui/icons-material/AttachFile\";\nimport CancelIcon from \"@mui/icons-material/Cancel\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  fieldBasic,\n  fileInputStyles,\n  tooltipHelper,\n} from \"../common/styleLibrary\";\nimport { fileProcess } from \"./utils\";\nimport { HelpIcon } from \"mds\";\nimport ErrorBlock from \"../../../../shared/ErrorBlock\";\n\ninterface InputBoxProps {\n  label: string;\n  classes: any;\n  onChange: (e: string, i: string) => void;\n  id: string;\n  name: string;\n  disabled?: boolean;\n  tooltip?: string;\n  required?: boolean;\n  error?: string;\n  accept?: string;\n  value?: string;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...fieldBasic,\n    ...tooltipHelper,\n    valueString: {\n      maxWidth: 350,\n      whiteSpace: \"nowrap\",\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      marginTop: 2,\n    },\n    fileInputField: {\n      margin: \"13px 0\",\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n      },\n    },\n    ...fileInputStyles,\n    inputLabel: {\n      ...fieldBasic.inputLabel,\n      fontWeight: \"normal\",\n    },\n    textBoxContainer: {\n      ...fieldBasic.textBoxContainer,\n      maxWidth: \"100%\",\n      border: \"1px solid #eaeaea\",\n      paddingLeft: \"15px\",\n    },\n  });\n\nconst FileSelector = ({\n  label,\n  classes,\n  onChange,\n  id,\n  name,\n  disabled = false,\n  tooltip = \"\",\n  required,\n  error = \"\",\n  accept = \"\",\n  value = \"\",\n}: InputBoxProps) => {\n  const [showFileSelector, setShowSelector] = useState(false);\n\n  return (\n    <React.Fragment>\n      <Grid\n        item\n        xs={12}\n        className={`${classes.fileInputField} ${classes.fieldBottom} ${\n          classes.fieldContainer\n        } ${error !== \"\" ? classes.errorInField : \"\"}`}\n      >\n        {label !== \"\" && (\n          <InputLabel\n            htmlFor={id}\n            className={`${error !== \"\" ? classes.fieldLabelError : \"\"} ${\n              classes.inputLabel\n            }`}\n          >\n            <span>\n              {label}\n              {required ? \"*\" : \"\"}\n            </span>\n            {tooltip !== \"\" && (\n              <div className={classes.tooltipContainer}>\n                <Tooltip title={tooltip} placement=\"top-start\">\n                  <div className={classes.tooltip}>\n                    <HelpIcon />\n                  </div>\n                </Tooltip>\n              </div>\n            )}\n          </InputLabel>\n        )}\n\n        {showFileSelector || value === \"\" ? (\n          <div className={classes.textBoxContainer}>\n            <input\n              type=\"file\"\n              name={name}\n              onChange={(e) => {\n                const fileName = get(e, \"target.files[0].name\", \"\");\n                fileProcess(e, (data: any) => {\n                  onChange(data, fileName);\n                });\n              }}\n              accept={accept}\n              required={required}\n              disabled={disabled}\n              className={classes.fileInputField}\n            />\n\n            {value !== \"\" && (\n              <IconButton\n                color=\"primary\"\n                aria-label=\"upload picture\"\n                component=\"span\"\n                onClick={() => {\n                  setShowSelector(false);\n                }}\n                disableRipple={false}\n                disableFocusRipple={false}\n                size=\"small\"\n              >\n                <CancelIcon />\n              </IconButton>\n            )}\n\n            {error !== \"\" && <ErrorBlock errorMessage={error} />}\n          </div>\n        ) : (\n          <div className={classes.fileReselect}>\n            <div className={classes.valueString}>{value}</div>\n            <IconButton\n              color=\"primary\"\n              aria-label=\"upload picture\"\n              component=\"span\"\n              onClick={() => {\n                setShowSelector(true);\n              }}\n              disableRipple={false}\n              disableFocusRipple={false}\n              size=\"small\"\n            >\n              <AttachFileIcon />\n            </IconButton>\n          </div>\n        )}\n      </Grid>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(FileSelector);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nexport const fileProcess = (evt: any, callback: any) => {\n  const file = evt.target.files[0];\n  const reader = new FileReader();\n  reader.readAsDataURL(file);\n\n  reader.onload = () => {\n    // reader.readAsDataURL(file) output will be something like: data:application/x-x509-ca-cert;base64,LS0tLS1CRUdJTiBDRVJUSU\n    // we care only about the actual base64 part (everything after \"data:application/x-x509-ca-cert;base64,\")\n    const fileBase64 = reader.result;\n    if (fileBase64) {\n      const fileArray = fileBase64.toString().split(\"base64,\");\n\n      if (fileArray.length === 2) {\n        callback(fileArray[1]);\n      }\n    }\n  };\n};\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { DateTime } from \"luxon\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { ICertificateInfo } from \"../../Tenants/types\";\nimport LanguageIcon from \"@mui/icons-material/Language\";\nimport Chip from \"@mui/material/Chip\";\nimport {\n  Box,\n  Container,\n  Divider,\n  Grid,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Typography,\n} from \"@mui/material\";\nimport EventBusyIcon from \"@mui/icons-material/EventBusy\";\nimport { CertificateIcon } from \"mds\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    certificateIcon: {\n      float: \"left\",\n      paddingTop: \"5px !important\",\n      paddingRight: \"10px !important\",\n    },\n    certificateInfo: { float: \"right\" },\n    certificateWrapper: {\n      height: \"auto\",\n      margin: 5,\n      border: \"1px solid #E2E2E2\",\n      userSelect: \"text\",\n      borderRadius: 4,\n      \"& h6\": {\n        fontWeight: \"bold\",\n      },\n      \"& div\": {\n        padding: 0,\n      },\n    },\n    certificateExpiry: {\n      color: \"#616161\",\n      display: \"flex\",\n      alignItems: \"center\",\n      flexWrap: \"wrap\",\n      marginBottom: 5,\n      \"& .label\": {\n        fontWeight: \"bold\",\n      },\n    },\n    certificateDomains: {\n      color: \"#616161\",\n      \"& .label\": {\n        fontWeight: \"bold\",\n      },\n    },\n    certificatesList: {\n      border: \"1px solid #E2E2E2\",\n      borderRadius: 4,\n      color: \"#616161\",\n      textTransform: \"lowercase\",\n      overflowY: \"scroll\",\n      maxHeight: 145,\n      marginBottom: 10,\n    },\n    certificatesListItem: {\n      padding: \"0px 16px\",\n      borderBottom: \"1px solid #E2E2E2\",\n      \"& div\": {\n        minWidth: 0,\n      },\n      \"& svg\": {\n        fontSize: 12,\n        marginRight: 10,\n        opacity: 0.5,\n      },\n      \"& span\": {\n        fontSize: 12,\n      },\n    },\n  });\n\ninterface ITLSCertificate {\n  classes: any;\n  certificateInfo: ICertificateInfo;\n  onDelete: any;\n}\n\nconst TLSCertificate = ({\n  classes,\n  certificateInfo,\n  onDelete = () => {},\n}: ITLSCertificate) => {\n  const certificates = certificateInfo.domains || [];\n\n  const expiry = DateTime.fromISO(certificateInfo.expiry);\n\n  return (\n    <Chip\n      key={certificateInfo.name}\n      variant=\"outlined\"\n      color=\"primary\"\n      className={classes.certificateWrapper}\n      label={\n        <Container>\n          <Grid item xs={1} className={classes.certificateIcon}>\n            <CertificateIcon />\n          </Grid>\n          <Grid item xs={11} className={classes.certificateInfo}>\n            <Typography variant=\"subtitle1\" display=\"block\" gutterBottom>\n              {certificateInfo.name}\n            </Typography>\n            <Box className={classes.certificateExpiry}>\n              <EventBusyIcon color=\"inherit\" fontSize=\"small\" />\n              &nbsp;\n              <span className={\"label\"}>Expiry:&nbsp;</span>\n              <span>{expiry.toFormat(\"yyyy/MM/dd\")}</span>\n            </Box>\n            <Divider />\n            <br />\n            <Box className={classes.certificateDomains}>\n              <span className=\"label\">{`${certificates.length} Domain (s):`}</span>\n            </Box>\n            <List className={classes.certificatesList}>\n              {certificates.map((dom, index) => (\n                <ListItem\n                  key={`${dom}-${index}`}\n                  className={classes.certificatesListItem}\n                >\n                  <ListItemAvatar>\n                    <LanguageIcon />\n                  </ListItemAvatar>\n                  <ListItemText primary={dom} />\n                </ListItem>\n              ))}\n            </List>\n          </Grid>\n        </Container>\n      }\n      onDelete={onDelete}\n    />\n  );\n};\n\nexport default withStyles(styles)(TLSCertificate);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Box } from \"@mui/material\";\nimport { CertificateIcon } from \"mds\";\nimport { useParams } from \"react-router-dom\";\nimport { AppState } from \"../../../../store\";\n\nconst FeatureItem = ({\n  icon,\n  description,\n}: {\n  icon: any;\n  description: string;\n}) => {\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        \"& .min-icon\": {\n          marginRight: \"10px\",\n          height: \"23px\",\n          width: \"23px\",\n          marginBottom: \"10px\",\n        },\n      }}\n    >\n      {icon}{\" \"}\n      <div style={{ fontSize: \"14px\", fontStyle: \"italic\", color: \"#5E5E5E\" }}>\n        {description}\n      </div>\n    </Box>\n  );\n};\nconst TLSHelpBox = () => {\n  const params = useParams();\n  const tenantNameParam = params.tenantName || \"\";\n  const tenantNamespaceParam = params.tenantNamespace || \"\";\n  const namespace = useSelector((state: AppState) => {\n    var defaultNamespace = \"<namespace>\";\n    if (tenantNamespaceParam !== \"\") {\n      return tenantNamespaceParam;\n    }\n    if (state.createTenant.fields.nameTenant.namespace !== \"\") {\n      return state.createTenant.fields.nameTenant.namespace;\n    }\n    return defaultNamespace;\n  });\n\n  const tenantName = useSelector((state: AppState) => {\n    var defaultTenantName = \"<tenant-name>\";\n    if (tenantNameParam !== \"\") {\n      return tenantNameParam;\n    }\n\n    if (state.createTenant.fields.nameTenant.tenantName !== \"\") {\n      return state.createTenant.fields.nameTenant.tenantName;\n    }\n    return defaultTenantName;\n  });\n\n  return (\n    <Box\n      sx={{\n        flex: 1,\n        border: \"1px solid #eaeaea\",\n        borderRadius: \"2px\",\n        display: \"flex\",\n        flexFlow: \"column\",\n        padding: \"20px\",\n        marginTop: {\n          xs: \"0px\",\n        },\n      }}\n    >\n      <Box\n        sx={{\n          display: \"flex\",\n          flexFlow: \"column\",\n        }}\n      >\n        <FeatureItem\n          icon={<CertificateIcon />}\n          description={`TLS Certificates Warning`}\n        />\n        <Box sx={{ fontSize: \"14px\", marginBottom: \"15px\" }}>\n          Automatic certificate generation is not enabled.\n          <br />\n          <br />\n          If you wish to continue only with <b>custom certificates</b> make sure\n          they are valid for the following internode hostnames, i.e.:\n          <br />\n          <br />\n          <div\n            style={{ fontSize: \"14px\", fontStyle: \"italic\", color: \"#5E5E5E\" }}\n          >\n            minio.{namespace}\n            <br />\n            minio.{namespace}.svc\n            <br />\n            minio.{namespace}.svc.&#x3C;cluster domain&#x3E;\n            <br />\n            *.{tenantName}-hl.{namespace}.svc.&#x3C;cluster domain&#x3E;\n            <br />\n            *.{namespace}.svc.&#x3C;cluster domain&#x3E;\n          </div>\n          <br />\n          Replace <em>&#x3C;tenant-name&#x3E;</em>,{\" \"}\n          <em>&#x3C;namespace&#x3E;</em> and\n          <em>&#x3C;cluster domain&#x3E;</em> with the actual values for your\n          MinIO tenant.\n          <br />\n          <br />\n          You can learn more at our{\" \"}\n          <a\n            href=\"https://min.io/docs/minio/kubernetes/upstream/operations/network-encryption.html?ref=op#id5\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            documentation\n          </a>\n          .\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default TLSHelpBox;\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useCallback, useEffect, useState } from \"react\";\nimport { connect, useSelector } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport { DialogContentText, IconButton } from \"@mui/material\";\nimport { Button } from \"mds\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport Grid from \"@mui/material/Grid\";\nimport {\n  fsGroupChangePolicyType,\n  ICertificateInfo,\n  ITenantSecurityResponse,\n} from \"../types\";\nimport {\n  containerForHeader,\n  createTenantCommon,\n  formFieldStyles,\n  modalBasic,\n  spacingUtils,\n  tenantDetailsStyles,\n  wizardCommon,\n} from \"../../Common/FormComponents/common/styleLibrary\";\n\nimport { KeyPair } from \"../ListTenants/utils\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport { AddIcon, ConfirmModalIcon } from \"mds\";\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\nimport FormSwitchWrapper from \"../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport FileSelector from \"../../Common/FormComponents/FileSelector/FileSelector\";\nimport api from \"../../../../common/api\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport { Loader } from \"mds\";\nimport TLSCertificate from \"../../Common/TLSCertificate/TLSCertificate\";\nimport SecurityContextSelector from \"../securityContextSelector\";\nimport {\n  setRunAsUser,\n  setFSGroup,\n  setRunAsGroup,\n  setRunAsNonRoot,\n  setFSGroupChangePolicy,\n} from \"../tenantSecurityContextSlice\";\nimport TLSHelpBox from \"../HelpBox/TLSHelpBox\";\nimport { RemoveIcon } from \"mds\";\n\ninterface ITenantSecurity {\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...tenantDetailsStyles,\n    ...spacingUtils,\n    minioCertificateRows: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-start\",\n      borderBottom: \"1px solid #EAEAEA\",\n      \"&:last-child\": {\n        borderBottom: 0,\n      },\n      \"@media (max-width: 900px)\": {\n        flex: 1,\n      },\n    },\n    minioCertsContainer: {\n      marginBottom: 15,\n    },\n    minioCACertsRow: {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-start\",\n\n      borderBottom: \"1px solid #EAEAEA\",\n      \"&:last-child\": {\n        borderBottom: 0,\n      },\n      \"@media (max-width: 900px)\": {\n        flex: 1,\n\n        \"& div label\": {\n          minWidth: 50,\n        },\n      },\n    },\n    rowActions: {\n      display: \"flex\",\n      justifyContent: \"flex-end\",\n      \"@media (max-width: 900px)\": {\n        flex: 1,\n      },\n    },\n    overlayAction: {\n      marginLeft: 10,\n      \"& svg\": {\n        maxWidth: 15,\n        maxHeight: 15,\n      },\n      \"& button\": {\n        background: \"#EAEAEA\",\n      },\n    },\n    loaderAlign: {\n      textAlign: \"center\",\n    },\n    bold: { fontWeight: \"bold\" },\n    italic: { fontStyle: \"italic\" },\n    fileItem: {\n      marginRight: 10,\n      display: \"flex\",\n      \"& div label\": {\n        minWidth: 50,\n      },\n\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n      },\n    },\n    ...containerForHeader(theme.spacing(4)),\n    ...createTenantCommon,\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst TenantSecurity = ({ classes }: ITenantSecurity) => {\n  const dispatch = useAppDispatch();\n\n  const tenant = useSelector((state: AppState) => state.tenants.tenantInfo);\n  const loadingTenant = useSelector(\n    (state: AppState) => state.tenants.loadingTenant\n  );\n\n  const [isSending, setIsSending] = useState<boolean>(false);\n  const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n  const [enableTLS, setEnableTLS] = useState<boolean>(false);\n  const [enableAutoCert, setEnableAutoCert] = useState<boolean>(false);\n  const [enableCustomCerts, setEnableCustomCerts] = useState<boolean>(false);\n  const [certificatesToBeRemoved, setCertificatesToBeRemoved] = useState<\n    string[]\n  >([]);\n  // MinIO certificates\n  const [minioServerCertificates, setMinioServerCertificates] = useState<\n    KeyPair[]\n  >([\n    {\n      id: Date.now().toString(),\n      key: \"\",\n      cert: \"\",\n      encoded_key: \"\",\n      encoded_cert: \"\",\n    },\n  ]);\n  const [minioClientCertificates, setMinioClientCertificates] = useState<\n    KeyPair[]\n  >([\n    {\n      id: Date.now().toString(),\n      key: \"\",\n      cert: \"\",\n      encoded_key: \"\",\n      encoded_cert: \"\",\n    },\n  ]);\n  const [minioCaCertificates, setMinioCaCertificates] = useState<KeyPair[]>([\n    {\n      id: Date.now().toString(),\n      key: \"\",\n      cert: \"\",\n      encoded_key: \"\",\n      encoded_cert: \"\",\n    },\n  ]);\n  const [minioServerCertificateSecrets, setMinioServerCertificateSecrets] =\n    useState<ICertificateInfo[]>([]);\n  const [minioClientCertificateSecrets, setMinioClientCertificateSecrets] =\n    useState<ICertificateInfo[]>([]);\n  const [minioTLSCaCertificateSecrets, setMinioTLSCaCertificateSecrets] =\n    useState<ICertificateInfo[]>([]);\n\n  const runAsGroup = useSelector(\n    (state: AppState) => state.editTenantSecurityContext.runAsGroup\n  );\n  const runAsUser = useSelector(\n    (state: AppState) => state.editTenantSecurityContext.runAsUser\n  );\n  const fsGroup = useSelector(\n    (state: AppState) => state.editTenantSecurityContext.fsGroup\n  );\n  const runAsNonRoot = useSelector(\n    (state: AppState) => state.editTenantSecurityContext.runAsNonRoot\n  );\n  const fsGroupChangePolicy = useSelector(\n    (state: AppState) => state.editTenantSecurityContext.fsGroupChangePolicy\n  );\n\n  const getTenantSecurityInfo = useCallback(() => {\n    api\n      .invoke(\n        \"GET\",\n        `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/security`\n      )\n      .then((res: ITenantSecurityResponse) => {\n        setEnableAutoCert(res.autoCert);\n        setEnableTLS(res.autoCert);\n        if (\n          res.customCertificates.minio ||\n          res.customCertificates.client ||\n          res.customCertificates.minioCAs\n        ) {\n          setEnableCustomCerts(true);\n          setEnableTLS(true);\n        }\n        setMinioServerCertificateSecrets(res.customCertificates.minio || []);\n        setMinioClientCertificateSecrets(res.customCertificates.client || []);\n        setMinioTLSCaCertificateSecrets(res.customCertificates.minioCAs || []);\n        dispatch(setRunAsGroup(res.securityContext.runAsGroup));\n        dispatch(setRunAsUser(res.securityContext.runAsUser));\n        dispatch(setFSGroup(res.securityContext.fsGroup));\n        dispatch(setRunAsNonRoot(res.securityContext.runAsNonRoot));\n        dispatch(\n          setFSGroupChangePolicy(res.securityContext.fsGroupChangePolicy)\n        );\n      })\n      .catch((err: ErrorResponseHandler) => {\n        dispatch(setErrorSnackMessage(err));\n      });\n  }, [tenant, dispatch]);\n\n  useEffect(() => {\n    if (tenant) {\n      getTenantSecurityInfo();\n    }\n  }, [tenant, getTenantSecurityInfo]);\n\n  const updateTenantSecurity = () => {\n    setIsSending(true);\n    let payload = {\n      autoCert: enableAutoCert,\n      customCertificates: {},\n      securityContext: {\n        runAsGroup: runAsGroup,\n        runAsUser: runAsUser,\n        runAsNonRoot: runAsNonRoot,\n        fsGroup: fsGroup,\n        fsGroupChangePolicy: fsGroupChangePolicy,\n      },\n    };\n    if (enableCustomCerts) {\n      payload[\"customCertificates\"] = {\n        secretsToBeDeleted: certificatesToBeRemoved,\n        minioServerCertificates: minioServerCertificates\n          .map((keyPair: KeyPair) => ({\n            crt: keyPair.encoded_cert,\n            key: keyPair.encoded_key,\n          }))\n          .filter((cert: any) => cert.crt && cert.key),\n        minioClientCertificates: minioClientCertificates\n          .map((keyPair: KeyPair) => ({\n            crt: keyPair.encoded_cert,\n            key: keyPair.encoded_key,\n          }))\n          .filter((cert: any) => cert.crt && cert.key),\n        minioCAsCertificates: minioCaCertificates\n          .map((keyPair: KeyPair) => keyPair.encoded_cert)\n          .filter((cert: any) => cert),\n      };\n    } else {\n      payload[\"customCertificates\"] = {\n        secretsToBeDeleted: [\n          ...minioServerCertificateSecrets.map((cert) => cert.name),\n          ...minioClientCertificateSecrets.map((cert) => cert.name),\n          ...minioTLSCaCertificateSecrets.map((cert) => cert.name),\n        ],\n        minioServerCertificates: [],\n        minioClientCertificates: [],\n        minioCAsCertificates: [],\n      };\n    }\n    api\n      .invoke(\n        \"POST\",\n        `/api/v1/namespaces/${tenant?.namespace}/tenants/${tenant?.name}/security`,\n        payload\n      )\n      .then(() => {\n        setIsSending(false);\n        // Close confirmation modal\n        setDialogOpen(false);\n        // Refresh Information and reset forms\n        setMinioServerCertificates([\n          {\n            cert: \"\",\n            encoded_cert: \"\",\n            encoded_key: \"\",\n            id: Date.now().toString(),\n            key: \"\",\n          },\n        ]);\n        setMinioClientCertificates([\n          {\n            cert: \"\",\n            encoded_cert: \"\",\n            encoded_key: \"\",\n            id: Date.now().toString(),\n            key: \"\",\n          },\n        ]);\n        setMinioCaCertificates([\n          {\n            cert: \"\",\n            encoded_cert: \"\",\n            encoded_key: \"\",\n            id: Date.now().toString(),\n            key: \"\",\n          },\n        ]);\n        getTenantSecurityInfo();\n      })\n      .catch((err: ErrorResponseHandler) => {\n        dispatch(setErrorSnackMessage(err));\n        setIsSending(false);\n      });\n  };\n\n  const removeCertificate = (certificateInfo: ICertificateInfo) => {\n    // TLS certificate secrets can be referenced MinIO, Console or KES, we need to remove the secret from all list and update\n    // the arrays\n    // Add certificate to the global list of secrets to be removed\n    setCertificatesToBeRemoved([\n      ...certificatesToBeRemoved,\n      certificateInfo.name,\n    ]);\n\n    // Update MinIO server TLS certificate secrets\n    const updatedMinioServerCertificateSecrets =\n      minioServerCertificateSecrets.filter(\n        (certificateSecret) => certificateSecret.name !== certificateInfo.name\n      );\n    // Update MinIO client TLS certificate secrets\n    const updatedMinioClientCertificateSecrets =\n      minioClientCertificateSecrets.filter(\n        (certificateSecret) => certificateSecret.name !== certificateInfo.name\n      );\n    const updatedMinIOTLSCaCertificateSecrets =\n      minioTLSCaCertificateSecrets.filter(\n        (certificateSecret) => certificateSecret.name !== certificateInfo.name\n      );\n    setMinioServerCertificateSecrets(updatedMinioServerCertificateSecrets);\n    setMinioClientCertificateSecrets(updatedMinioClientCertificateSecrets);\n    setMinioTLSCaCertificateSecrets(updatedMinIOTLSCaCertificateSecrets);\n  };\n\n  const addFileToKeyPair = (\n    type: string,\n    id: string,\n    key: string,\n    fileName: string,\n    value: string\n  ) => {\n    let certificates = minioServerCertificates;\n    let updateCertificates: any = () => {};\n\n    switch (type) {\n      case \"minio\": {\n        certificates = minioServerCertificates;\n        updateCertificates = setMinioServerCertificates;\n        break;\n      }\n      case \"client\": {\n        certificates = minioClientCertificates;\n        updateCertificates = setMinioClientCertificates;\n        break;\n      }\n      case \"minioCAs\": {\n        certificates = minioCaCertificates;\n        updateCertificates = setMinioCaCertificates;\n        break;\n      }\n      default:\n    }\n\n    const NCertList = certificates.map((item: KeyPair) => {\n      if (item.id === id) {\n        return {\n          ...item,\n          [key]: fileName,\n          [`encoded_${key}`]: value,\n        };\n      }\n      return item;\n    });\n    updateCertificates(NCertList);\n  };\n\n  const deleteKeyPair = (type: string, id: string) => {\n    let certificates = minioServerCertificates;\n    let updateCertificates: any = () => {};\n\n    switch (type) {\n      case \"minio\": {\n        certificates = minioServerCertificates;\n        updateCertificates = setMinioServerCertificates;\n        break;\n      }\n      case \"client\": {\n        certificates = minioClientCertificates;\n        updateCertificates = setMinioClientCertificates;\n        break;\n      }\n      case \"minioCAs\": {\n        certificates = minioCaCertificates;\n        updateCertificates = setMinioCaCertificates;\n        break;\n      }\n      default:\n    }\n\n    if (certificates.length > 1) {\n      const cleanCertsList = certificates.filter(\n        (item: KeyPair) => item.id !== id\n      );\n      updateCertificates(cleanCertsList);\n    }\n  };\n\n  const addKeyPair = (type: string) => {\n    let certificates = minioServerCertificates;\n    let updateCertificates: any = () => {};\n\n    switch (type) {\n      case \"minio\": {\n        certificates = minioServerCertificates;\n        updateCertificates = setMinioServerCertificates;\n        break;\n      }\n      case \"client\": {\n        certificates = minioClientCertificates;\n        updateCertificates = setMinioClientCertificates;\n        break;\n      }\n      case \"minioCAs\": {\n        certificates = minioCaCertificates;\n        updateCertificates = setMinioCaCertificates;\n        break;\n      }\n      default:\n    }\n    const updatedCertificates = [\n      ...certificates,\n      {\n        id: Date.now().toString(),\n        key: \"\",\n        cert: \"\",\n        encoded_key: \"\",\n        encoded_cert: \"\",\n      },\n    ];\n    updateCertificates(updatedCertificates);\n  };\n\n  return (\n    <React.Fragment>\n      <ConfirmDialog\n        title={\"Save and Restart\"}\n        confirmText={\"Restart\"}\n        cancelText=\"Cancel\"\n        titleIcon={<ConfirmModalIcon />}\n        isLoading={isSending}\n        onClose={() => setDialogOpen(false)}\n        isOpen={dialogOpen}\n        onConfirm={updateTenantSecurity}\n        confirmationContent={\n          <DialogContentText>\n            Are you sure you want to save the changes and restart the service?\n          </DialogContentText>\n        }\n      />\n      {loadingTenant ? (\n        <div className={classes.loaderAlign}>\n          <Loader />\n        </div>\n      ) : (\n        <Grid container spacing={1}>\n          <Grid item xs={12}>\n            <h1 className={classes.sectionTitle}>Security</h1>\n            <hr className={classes.hrClass} />\n          </Grid>\n          <Grid container spacing={1}>\n            <Grid item xs={12}>\n              <FormSwitchWrapper\n                value=\"enableTLS\"\n                id=\"enableTLS\"\n                name=\"enableTLS\"\n                checked={enableTLS}\n                onChange={(e) => {\n                  const targetD = e.target;\n                  const checked = targetD.checked;\n                  setEnableTLS(checked);\n                }}\n                label={\"TLS\"}\n                description={\n                  \"Securing all the traffic using TLS. This is required for Encryption Configuration\"\n                }\n              />\n            </Grid>\n            {enableTLS && (\n              <Fragment>\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <FormSwitchWrapper\n                    value=\"enableAutoCert\"\n                    id=\"enableAutoCert\"\n                    name=\"enableAutoCert\"\n                    checked={enableAutoCert}\n                    onChange={(e) => {\n                      const targetD = e.target;\n                      const checked = targetD.checked;\n                      setEnableAutoCert(checked);\n                    }}\n                    label={\"AutoCert\"}\n                    description={\n                      \"The internode certificates will be generated and managed by MinIO Operator\"\n                    }\n                  />\n                </Grid>\n                <Grid item xs={12} className={classes.formFieldRow}>\n                  <FormSwitchWrapper\n                    value=\"enableCustomCerts\"\n                    id=\"enableCustomCerts\"\n                    name=\"enableCustomCerts\"\n                    checked={enableCustomCerts}\n                    onChange={(e) => {\n                      const targetD = e.target;\n                      const checked = targetD.checked;\n                      setEnableCustomCerts(checked);\n                    }}\n                    label={\"Custom Certificates\"}\n                    description={\"Certificates used to terminated TLS at MinIO\"}\n                  />\n                </Grid>\n\n                {enableCustomCerts && (\n                  <Fragment>\n                    {!enableAutoCert && (\n                      <Grid item xs={12}>\n                        <TLSHelpBox />\n                      </Grid>\n                    )}\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      <h5>MinIO Server Certificates</h5>\n                    </Grid>\n                    <Grid item xs={12}>\n                      {minioServerCertificateSecrets.map(\n                        (certificateInfo: ICertificateInfo) => (\n                          <TLSCertificate\n                            certificateInfo={certificateInfo}\n                            onDelete={() => removeCertificate(certificateInfo)}\n                          />\n                        )\n                      )}\n                    </Grid>\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      {minioServerCertificates.map((keyPair, index) => (\n                        <Grid\n                          item\n                          xs={12}\n                          key={keyPair.id}\n                          className={classes.minioCertificateRows}\n                        >\n                          <Grid item xs={10} className={classes.fileItem}>\n                            <FileSelector\n                              onChange={(encodedValue, fileName) =>\n                                addFileToKeyPair(\n                                  \"minio\",\n                                  keyPair.id,\n                                  \"cert\",\n                                  fileName,\n                                  encodedValue\n                                )\n                              }\n                              accept=\".cer,.crt,.cert,.pem\"\n                              id=\"tlsCert\"\n                              name=\"tlsCert\"\n                              label=\"Cert\"\n                              value={keyPair.cert}\n                            />\n                            <FileSelector\n                              onChange={(encodedValue, fileName) =>\n                                addFileToKeyPair(\n                                  \"minio\",\n                                  keyPair.id,\n                                  \"key\",\n                                  fileName,\n                                  encodedValue\n                                )\n                              }\n                              accept=\".key,.pem\"\n                              id=\"tlsKey\"\n                              name=\"tlsKey\"\n                              label=\"Key\"\n                              value={keyPair.key}\n                            />\n                          </Grid>\n                          <Grid item xs={2} className={classes.rowActions}>\n                            <div className={classes.overlayAction}>\n                              <IconButton\n                                size={\"small\"}\n                                onClick={() => addKeyPair(\"minio\")}\n                                disabled={\n                                  index !== minioServerCertificates.length - 1\n                                }\n                              >\n                                <AddIcon />\n                              </IconButton>\n                            </div>\n                            <div className={classes.overlayAction}>\n                              <IconButton\n                                size={\"small\"}\n                                onClick={() =>\n                                  deleteKeyPair(\"minio\", keyPair.id)\n                                }\n                                disabled={minioServerCertificates.length <= 1}\n                              >\n                                <RemoveIcon />\n                              </IconButton>\n                            </div>\n                          </Grid>\n                        </Grid>\n                      ))}\n                    </Grid>\n\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      <h5>MinIO Client Certificates</h5>\n                    </Grid>\n                    <Grid item xs={12}>\n                      {minioClientCertificateSecrets.map(\n                        (certificateInfo: ICertificateInfo) => (\n                          <TLSCertificate\n                            certificateInfo={certificateInfo}\n                            onDelete={() => removeCertificate(certificateInfo)}\n                          />\n                        )\n                      )}\n                    </Grid>\n                    <Grid item xs={12} className={classes.formFieldRow}>\n                      {minioClientCertificates.map((keyPair, index) => (\n                        <Grid\n                          item\n                          xs={12}\n                          key={keyPair.id}\n                          className={classes.minioCertificateRows}\n                        >\n                          <Grid item xs={10} className={classes.fileItem}>\n                            <FileSelector\n                              onChange={(encodedValue, fileName) =>\n                                addFileToKeyPair(\n                                  \"client\",\n                                  keyPair.id,\n                                  \"cert\",\n                                  fileName,\n                                  encodedValue\n                                )\n                              }\n                              accept=\".cer,.crt,.cert,.pem\"\n                              id=\"tlsCert\"\n                              name=\"tlsCert\"\n                              label=\"Cert\"\n                              value={keyPair.cert}\n                            />\n                            <FileSelector\n                              onChange={(encodedValue, fileName) =>\n                                addFileToKeyPair(\n                                  \"client\",\n                                  keyPair.id,\n                                  \"key\",\n                                  fileName,\n                                  encodedValue\n                                )\n                              }\n                              accept=\".key,.pem\"\n                              id=\"tlsKey\"\n                              name=\"tlsKey\"\n                              label=\"Key\"\n                              value={keyPair.key}\n                            />\n                          </Grid>\n                          <Grid item xs={2} className={classes.rowActions}>\n                            <div className={classes.overlayAction}>\n                              <IconButton\n                                size={\"small\"}\n                                onClick={() => addKeyPair(\"client\")}\n                                disabled={\n                                  index !== minioClientCertificates.length - 1\n                                }\n                              >\n                                <AddIcon />\n                              </IconButton>\n                            </div>\n                            <div className={classes.overlayAction}>\n                              <IconButton\n                                size={\"small\"}\n                                onClick={() =>\n                                  deleteKeyPair(\"client\", keyPair.id)\n                                }\n                                disabled={minioClientCertificates.length <= 1}\n                              >\n                                <RemoveIcon />\n                              </IconButton>\n                            </div>\n                          </Grid>\n                        </Grid>\n                      ))}\n                    </Grid>\n\n                    <Grid item xs={12}>\n                      <h5>MinIO CA Certificates</h5>\n                    </Grid>\n                    <Grid item xs={12}>\n                      {minioTLSCaCertificateSecrets.map(\n                        (certificateInfo: ICertificateInfo) => (\n                          <TLSCertificate\n                            certificateInfo={certificateInfo}\n                            onDelete={() => removeCertificate(certificateInfo)}\n                          />\n                        )\n                      )}\n                    </Grid>\n                    <Grid item xs={12}>\n                      {minioCaCertificates.map((keyPair: KeyPair, index) => (\n                        <Grid\n                          item\n                          xs={12}\n                          key={keyPair.id}\n                          className={classes.minioCACertsRow}\n                        >\n                          <Grid item xs={10}>\n                            <FileSelector\n                              onChange={(encodedValue, fileName) =>\n                                addFileToKeyPair(\n                                  \"minioCAs\",\n                                  keyPair.id,\n                                  \"cert\",\n                                  fileName,\n                                  encodedValue\n                                )\n                              }\n                              accept=\".cer,.crt,.cert,.pem\"\n                              id=\"tlsCert\"\n                              name=\"tlsCert\"\n                              label=\"Cert\"\n                              value={keyPair.cert}\n                            />\n                          </Grid>\n                          <Grid item xs={2}>\n                            <div className={classes.rowActions}>\n                              <div className={classes.overlayAction}>\n                                <IconButton\n                                  size={\"small\"}\n                                  onClick={() => addKeyPair(\"minioCAs\")}\n                                  disabled={\n                                    index !== minioCaCertificates.length - 1\n                                  }\n                                >\n                                  <AddIcon />\n                                </IconButton>\n                              </div>\n                              <div className={classes.overlayAction}>\n                                <IconButton\n                                  size={\"small\"}\n                                  onClick={() =>\n                                    deleteKeyPair(\"minioCAs\", keyPair.id)\n                                  }\n                                  disabled={minioCaCertificates.length <= 1}\n                                >\n                                  <RemoveIcon />\n                                </IconButton>\n                              </div>\n                            </div>\n                          </Grid>\n                        </Grid>\n                      ))}\n                    </Grid>\n                  </Fragment>\n                )}\n              </Fragment>\n            )}\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <h1 className={classes.sectionTitle}>Security Context</h1>\n              <hr className={classes.hrClass} />\n            </Grid>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <SecurityContextSelector\n                classes={classes}\n                runAsGroup={runAsGroup}\n                runAsUser={runAsUser}\n                fsGroup={fsGroup}\n                runAsNonRoot={runAsNonRoot}\n                fsGroupChangePolicy={fsGroupChangePolicy}\n                setFSGroup={(value: string) => dispatch(setFSGroup(value))}\n                setRunAsUser={(value: string) => dispatch(setRunAsUser(value))}\n                setRunAsGroup={(value: string) =>\n                  dispatch(setRunAsGroup(value))\n                }\n                setRunAsNonRoot={(value: boolean) =>\n                  dispatch(setRunAsNonRoot(value))\n                }\n                setFSGroupChangePolicy={(value: fsGroupChangePolicyType) =>\n                  dispatch(setFSGroupChangePolicy(value))\n                }\n              />\n            </Grid>\n            <Grid\n              item\n              xs={12}\n              sx={{ display: \"flex\", justifyContent: \"flex-end\" }}\n            >\n              <Button\n                id={\"save-security\"}\n                type=\"submit\"\n                variant=\"callAction\"\n                disabled={dialogOpen || isSending}\n                onClick={() => setDialogOpen(true)}\n                label={\"Save\"}\n              />\n            </Grid>\n          </Grid>\n        </Grid>\n      )}\n    </React.Fragment>\n  );\n};\n\nconst mapState = (state: AppState) => ({\n  loadingTenant: state.tenants.loadingTenant,\n  selectedTenant: state.tenants.currentTenant,\n  tenant: state.tenants.tenantInfo,\n});\n\nconst connector = connect(mapState, null);\n\nexport default withStyles(styles)(connector(TenantSecurity));\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport InputBoxWrapper from \"../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport FormSwitchWrapper from \"../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport SelectWrapper from \"../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport { Grid, SelectChangeEvent } from \"@mui/material\";\nimport { useDispatch } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { fsGroupChangePolicyType } from \"./types\";\n\ninterface IEditSecurityContextProps {\n  classes: any;\n  runAsUser: string;\n  runAsGroup: string;\n  fsGroup: string;\n  fsGroupChangePolicy: fsGroupChangePolicyType;\n  runAsNonRoot: boolean;\n  setRunAsUser: any;\n  setRunAsGroup: any;\n  setFSGroup: any;\n  setRunAsNonRoot: any;\n  setFSGroupChangePolicy: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    configSectionItem: {\n      marginRight: 15,\n      marginBottom: 15,\n      \"& .multiContainer\": {\n        border: \"1px solid red\",\n      },\n    },\n  });\n\nconst SecurityContextSelector = ({\n  classes,\n  runAsGroup,\n  runAsUser,\n  fsGroup,\n  fsGroupChangePolicy,\n  runAsNonRoot,\n  setRunAsUser,\n  setRunAsGroup,\n  setFSGroup,\n  setRunAsNonRoot,\n  setFSGroupChangePolicy,\n}: IEditSecurityContextProps) => {\n  const dispatch = useDispatch();\n  return (\n    <Fragment>\n      <fieldset className={`${classes.fieldGroup} ${classes.fieldSpaceTop} `}>\n        <legend className={classes.descriptionText}>Security Context</legend>\n\n        <Grid item xs={12}>\n          <div className={`${classes.multiContainerStackNarrow} `}>\n            <div className={classes.configSectionItem}>\n              <InputBoxWrapper\n                type=\"number\"\n                id=\"securityContext_runAsUser\"\n                name=\"securityContext_runAsUser\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  dispatch(setRunAsUser(e.target.value));\n                }}\n                label=\"Run As User\"\n                value={runAsUser}\n                required\n                min=\"0\"\n              />\n            </div>\n            <div className={classes.configSectionItem}>\n              <InputBoxWrapper\n                type=\"number\"\n                id=\"securityContext_runAsGroup\"\n                name=\"securityContext_runAsGroup\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  dispatch(setRunAsGroup(e.target.value));\n                }}\n                label=\"Run As Group\"\n                value={runAsGroup}\n                required\n                min=\"0\"\n              />\n            </div>\n          </div>\n        </Grid>\n        <Grid item xs={12}>\n          <div className={`${classes.multiContainerStackNarrow} `}>\n            <div className={classes.configSectionItem}>\n              <InputBoxWrapper\n                type=\"number\"\n                id=\"securityContext_fsGroup\"\n                name=\"securityContext_fsGroup\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  dispatch(setFSGroup(e.target.value));\n                }}\n                label=\"FsGroup\"\n                value={fsGroup}\n                required\n                min=\"0\"\n              />\n            </div>\n\n            <div className={classes.configSectionItem}>\n              <SelectWrapper\n                label=\"FsGroupChangePolicy\"\n                id=\"securityContext_fsGroupChangePolicy\"\n                name=\"securityContext_fsGroupChangePolicy\"\n                onChange={(e: SelectChangeEvent<string>) => {\n                  dispatch(setFSGroupChangePolicy(e.target.value));\n                }}\n                value={fsGroupChangePolicy}\n                options={[\n                  {\n                    label: \"Always\",\n                    value: \"Always\",\n                  },\n                  {\n                    label: \"OnRootMismatch\",\n                    value: \"OnRootMismatch\",\n                  },\n                ]}\n              />\n            </div>\n          </div>\n        </Grid>\n        <Grid item xs={12}>\n          <div className={classes.multiContainer}>\n            <FormSwitchWrapper\n              value=\"SecurityContextRunAsNonRoot\"\n              id=\"securityContext_runAsNonRoot\"\n              name=\"securityContext_runAsNonRoot\"\n              checked={runAsNonRoot}\n              onChange={() => {\n                dispatch(setRunAsNonRoot(!runAsNonRoot));\n              }}\n              label={\"Do not run as Root\"}\n            />\n          </div>\n        </Grid>\n      </fieldset>\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(SecurityContextSelector);\n","import React from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport { Theme } from \"@mui/material/styles\";\n\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    errorBlock: {\n      color: theme.palette?.error.main || \"#C83B51\",\n    },\n  });\n\ninterface IErrorBlockProps {\n  classes: any;\n  errorMessage: string;\n  withBreak?: boolean;\n}\n\nconst ErrorBlock = ({\n  classes,\n  errorMessage,\n  withBreak = true,\n}: IErrorBlockProps) => {\n  return (\n    <React.Fragment>\n      {withBreak && <br />}\n      <Typography component=\"p\" variant=\"body1\" className={classes.errorBlock}>\n        {errorMessage}\n      </Typography>\n    </React.Fragment>\n  );\n};\n\nexport default withStyles(styles)(ErrorBlock);\n"],"names":["withStyles","theme","createStyles","fieldBasic","tooltipHelper","valueString","maxWidth","whiteSpace","overflow","textOverflow","marginTop","fileInputField","margin","flexFlow","fileInputStyles","inputLabel","fontWeight","textBoxContainer","border","paddingLeft","label","classes","onChange","id","name","disabled","tooltip","required","error","accept","value","useState","showFileSelector","setShowSelector","Grid","item","xs","className","fieldBottom","fieldContainer","errorInField","InputLabel","htmlFor","fieldLabelError","tooltipContainer","Tooltip","title","placement","type","e","fileName","get","evt","callback","file","target","files","reader","FileReader","readAsDataURL","onload","fileBase64","result","fileArray","toString","split","length","fileProcess","data","IconButton","color","component","onClick","disableRipple","disableFocusRipple","size","Cancel","ErrorBlock","errorMessage","fileReselect","AttachFile","certificateIcon","float","paddingTop","paddingRight","certificateInfo","certificateWrapper","height","userSelect","borderRadius","padding","certificateExpiry","display","alignItems","flexWrap","marginBottom","certificateDomains","certificatesList","textTransform","overflowY","maxHeight","certificatesListItem","borderBottom","minWidth","fontSize","marginRight","opacity","onDelete","certificates","domains","expiry","DateTime","variant","gutterBottom","toFormat","map","dom","index","primary","FeatureItem","icon","description","sx","width","style","fontStyle","params","useParams","tenantNameParam","tenantName","tenantNamespaceParam","tenantNamespace","namespace","useSelector","state","createTenant","fields","nameTenant","flex","href","rel","connector","connect","loadingTenant","tenants","selectedTenant","currentTenant","tenant","tenantInfo","tenantDetailsStyles","spacingUtils","minioCertificateRows","justifyContent","minioCertsContainer","minioCACertsRow","rowActions","overlayAction","marginLeft","background","loaderAlign","textAlign","bold","italic","fileItem","containerForHeader","spacing","createTenantCommon","formFieldStyles","modalBasic","wizardCommon","dispatch","useAppDispatch","isSending","setIsSending","dialogOpen","setDialogOpen","enableTLS","setEnableTLS","enableAutoCert","setEnableAutoCert","enableCustomCerts","setEnableCustomCerts","certificatesToBeRemoved","setCertificatesToBeRemoved","Date","now","key","cert","encoded_key","encoded_cert","minioServerCertificates","setMinioServerCertificates","minioClientCertificates","setMinioClientCertificates","minioCaCertificates","setMinioCaCertificates","minioServerCertificateSecrets","setMinioServerCertificateSecrets","minioClientCertificateSecrets","setMinioClientCertificateSecrets","minioTLSCaCertificateSecrets","setMinioTLSCaCertificateSecrets","runAsGroup","editTenantSecurityContext","runAsUser","fsGroup","runAsNonRoot","fsGroupChangePolicy","getTenantSecurityInfo","useCallback","api","then","res","autoCert","customCertificates","minio","client","minioCAs","setRunAsGroup","securityContext","setRunAsUser","setFSGroup","setRunAsNonRoot","setFSGroupChangePolicy","catch","err","setErrorSnackMessage","useEffect","removeCertificate","updatedMinioServerCertificateSecrets","filter","certificateSecret","updatedMinioClientCertificateSecrets","updatedMinIOTLSCaCertificateSecrets","addFileToKeyPair","updateCertificates","deleteKeyPair","addKeyPair","confirmText","cancelText","titleIcon","isLoading","onClose","isOpen","onConfirm","payload","secretsToBeDeleted","keyPair","crt","minioCAsCertificates","confirmationContent","container","sectionTitle","hrClass","checked","Fragment","formFieldRow","encodedValue","configSectionItem","useDispatch","fieldGroup","fieldSpaceTop","descriptionText","multiContainerStackNarrow","min","options","multiContainer","errorBlock","palette","main","withBreak"],"sourceRoot":""}