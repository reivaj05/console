{"version":3,"file":"static/js/7770.3664e24d.chunk.js","mappings":"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","sources":["screens/Console/Tenants/TenantDetails/KeyPairEdit.tsx","screens/Console/Tenants/TenantDetails/LoggingDetails.tsx","screens/Console/Tenants/TenantDetails/LoggingDBDetails.tsx","screens/Console/Tenants/TenantDetails/TenantAuditLogsScreen.tsx","screens/Console/Tenants/securityContextSelector.tsx","../node_modules/@mui/icons-material/Add.js","../node_modules/@mui/icons-material/Delete.js"],"sourcesContent":["import React, { Fragment, useEffect } from \"react\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { Theme } from \"@mui/material/styles\";\nimport { modalBasic } from \"../../Common/FormComponents/common/styleLibrary\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport { IconButton, Tooltip } from \"@mui/material\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport { IKeyValue } from \"../ListTenants/types\";\nimport {\n  commonFormValidation,\n  IValidation,\n} from \"../../../../utils/validationFunctions\";\nimport { clearValidationError } from \"../utils\";\nimport Grid from \"@mui/material/Grid\";\n\ninterface IKeyPairEditProps {\n  classes: any;\n  paramName: string;\n  error: any;\n  setError: (e: any) => void;\n  newValues: IKeyValue[];\n  setNewValues: (vals: IKeyValue[]) => void;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    bottomContainer: {\n      display: \"flex\",\n      flexGrow: 1,\n      alignItems: \"center\",\n      \"& div\": {\n        flexGrow: 1,\n        width: \"100%\",\n      },\n    },\n    shortened: {\n      gridTemplateColumns: \"auto auto 20px 20px\",\n      display: \"grid\",\n      gridGap: 20,\n      paddingRight: 20,\n    },\n    ...modalBasic,\n  });\n\nconst KeyPairEdit = ({\n  classes,\n  paramName,\n  newValues,\n  setNewValues,\n  error,\n  setError,\n}: IKeyPairEditProps) => {\n  const cleanValidation = (fieldName: string) => {\n    setError(clearValidationError(error, fieldName));\n  };\n\n  useEffect(() => {\n    let keyPairValidation: IValidation[] = [];\n\n    for (var i = 0; i < newValues.length; i++) {\n      keyPairValidation.push({\n        fieldKey: `key-${i.toString()}`,\n        required: false,\n        value: newValues[i].key,\n        pattern: /^[a-zA-Z0-9-_.]{1,63}$/,\n        customPatternMessage: \"Invalid key\",\n      });\n      keyPairValidation.push({\n        fieldKey: `val-${i.toString()}`,\n        required: false,\n        value: newValues[i].value,\n        pattern: /^[a-zA-Z0-9-_.]{1,63}$/,\n        customPatternMessage: \"Invalid value\",\n      });\n    }\n\n    const commonVal = commonFormValidation(keyPairValidation);\n    setError(commonVal);\n  }, [newValues, setError]);\n\n  let keyValueInputs = newValues.map((_, index) => {\n    return (\n      <Fragment key={`keyvalue-${index.toString()}`}>\n        <Grid paddingBottom={1}>\n          <div className={classes.shortened}>\n            <InputBoxWrapper\n              id={`key-${paramName.replace(/ /g, \"\")}-${index.toString()}`}\n              label={\"\"}\n              placeholder={\"Key\"}\n              name={`key-${index.toString()}`}\n              value={newValues[index].key}\n              onChange={(e) => {\n                let tempLabels = [...newValues];\n                tempLabels[index].key = e.target.value;\n                setNewValues(tempLabels);\n                cleanValidation(`key-${index.toString()}`);\n              }}\n              index={index}\n              key={`csv-key-${index.toString()}`}\n              error={error[`key-${index.toString()}`] || \"\"}\n            />\n            <InputBoxWrapper\n              id={`val-${paramName.replace(/ /g, \"\")}-${index.toString()}`}\n              label={\"\"}\n              placeholder={\"Value\"}\n              name={`val-${index.toString()}`}\n              value={newValues[index].value}\n              onChange={(e) => {\n                let tempLabels = [...newValues];\n                tempLabels[index].value = e.target.value;\n                setNewValues(tempLabels);\n                cleanValidation(`val-${index.toString()}`);\n              }}\n              index={index}\n              key={`csv-val-${index.toString()}`}\n              error={error[`val-${index.toString()}`] || \"\"}\n            />\n            <Tooltip title={`Add ${paramName}`} aria-label=\"addlabel\">\n              <IconButton\n                id={`add-${paramName.replace(/ /g, \"\")}-${index.toString()}`}\n                size={\"small\"}\n                onClick={() => {\n                  let tempLabels = [...newValues];\n                  tempLabels.push({ key: \"\", value: \"\" });\n                  setNewValues(tempLabels);\n                }}\n              >\n                <AddIcon />\n              </IconButton>\n            </Tooltip>\n            <Tooltip title=\"Remove\" aria-label=\"removeLabel\">\n              <IconButton\n                id={`remove-${paramName.replace(/ /g, \"\")}-${index.toString()}`}\n                size={\"small\"}\n                style={{ marginLeft: 16 }}\n                onClick={() => {\n                  if (newValues.length === 1) {\n                    setNewValues([{ key: \"\", value: \"\" }]);\n                  }\n                  if (newValues.length > 1) {\n                    let tempLabels = [...newValues];\n                    tempLabels.splice(index, 1);\n                    setNewValues(tempLabels);\n                  }\n                }}\n              >\n                <DeleteIcon />\n              </IconButton>\n            </Tooltip>\n          </div>\n        </Grid>\n      </Fragment>\n    );\n  });\n\n  return <Fragment>{keyValueInputs}</Fragment>;\n};\n\nexport default withStyles(styles)(KeyPairEdit);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n//import {  ISecurityContext} from \"../types\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  containerForHeader,\n  createTenantCommon,\n  formFieldStyles,\n  modalBasic,\n  spacingUtils,\n  tenantDetailsStyles,\n  wizardCommon,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport React, { Fragment, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport api from \"../../../../common/api\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport { useParams } from \"react-router-dom\";\nimport Grid from \"@mui/material/Grid\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport { Button } from \"mds\";\nimport {\n  setErrorSnackMessage,\n  setSnackBarMessage,\n} from \"../../../../systemSlice\";\nimport { IKeyValue, ITenantAuditLogs } from \"../ListTenants/types\";\nimport KeyPairEdit from \"./KeyPairEdit\";\nimport InputUnitMenu from \"../../Common/FormComponents/InputUnitMenu/InputUnitMenu\";\nimport SecurityContextSelector from \"../securityContextSelector\";\nimport { clearValidationError, imagePattern, numericPattern } from \"../utils\";\nimport {\n  setImage,\n  setDiskCapacityGB,\n  setServiceAccountName,\n  setCPURequest,\n  setMemRequest,\n  setRunAsUser,\n  setFSGroup,\n  setRunAsGroup,\n  setRunAsNonRoot,\n  setRefreshLoggingInfo,\n} from \"../TenantDetails/tenantAuditLogSlice\";\nimport { setFSGroupChangePolicy } from \"../tenantSecurityContextSlice\";\nimport { fsGroupChangePolicyType } from \"../types\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...tenantDetailsStyles,\n    ...spacingUtils,\n    bold: { fontWeight: \"bold\" },\n    italic: { fontStyle: \"italic\" },\n    fileItem: {\n      marginRight: 10,\n      display: \"flex\",\n      \"& div label\": {\n        minWidth: 50,\n      },\n\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n      },\n    },\n    ...containerForHeader(theme.spacing(4)),\n    ...createTenantCommon,\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst TenantAuditLogging = ({\n  classes,\n  labels,\n  annotations,\n  nodeSelector,\n}: ITenantAuditLogs) => {\n  const dispatch = useAppDispatch();\n  const { tenantName, tenantNamespace } = useParams();\n  const auditLoggingEnabled = useSelector(\n    (state: AppState) => state.editTenantLogging.auditLoggingEnabled\n  );\n  const image = useSelector((state: AppState) => state.editTenantLogging.image);\n  const diskCapacityGB = useSelector(\n    (state: AppState) => state.editTenantLogging.diskCapacityGB\n  );\n  const cpuRequest = useSelector(\n    (state: AppState) => state.editTenantLogging.cpuRequest\n  );\n  const memRequest = useSelector(\n    (state: AppState) => state.editTenantLogging.memRequest\n  );\n  const serviceAccountName = useSelector(\n    (state: AppState) => state.editTenantLogging.serviceAccountName\n  );\n  const runAsGroup = useSelector(\n    (state: AppState) => state.editTenantLogging.securityContext.runAsGroup\n  );\n  const runAsUser = useSelector(\n    (state: AppState) => state.editTenantLogging.securityContext.runAsUser\n  );\n  const fsGroup = useSelector(\n    (state: AppState) => state.editTenantLogging.securityContext.fsGroup\n  );\n  const runAsNonRoot = useSelector(\n    (state: AppState) => state.editTenantLogging.securityContext.runAsNonRoot\n  );\n  const fsGroupChangePolicy = useSelector(\n    (state: AppState) => state.editTenantSecurityContext.fsGroupChangePolicy\n  );\n\n  const [validationErrors, setValidationErrors] = useState<any>({});\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const [logLabels, setLabels] = useState<IKeyValue[]>(\n    labels != null && labels.length > 0 ? labels : [{ key: \"\", value: \"\" }]\n  );\n  const [logAnnotations, setAnnotations] = useState<IKeyValue[]>(\n    annotations != null && annotations.length > 0\n      ? annotations\n      : [{ key: \"\", value: \"\" }]\n  );\n  const [logNodeSelector, setNodeSelector] = useState<IKeyValue[]>(\n    nodeSelector != null && nodeSelector.length > 0\n      ? nodeSelector\n      : [{ key: \"\", value: \"\" }]\n  );\n\n  const [labelsError, setLabelsError] = useState<any>({});\n  const [annotationsError, setAnnotationsError] = useState<any>({});\n  const [nodeSelectorError, setNodeSelectorError] = useState<any>({});\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  const trim = (x: IKeyValue[]): IKeyValue[] => {\n    let retval: IKeyValue[] = [];\n    for (let i = 0; i < x.length; i++) {\n      if (x[i].key !== \"\") {\n        retval.push(x[i]);\n      }\n    }\n    return retval;\n  };\n\n  const checkValid = (): boolean => {\n    if (\n      Object.keys(validationErrors).length !== 0 ||\n      Object.keys(labelsError).length !== 0 ||\n      Object.keys(annotationsError).length !== 0 ||\n      Object.keys(nodeSelectorError).length !== 0\n    ) {\n      let err: ErrorResponseHandler = {\n        errorMessage: \"Invalid entry\",\n        detailedError: \"\",\n      };\n      dispatch(setErrorSnackMessage(err));\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  const submitLoggingInfo = () => {\n    if (checkValid()) {\n      setLoading(true);\n      const securityContext = {\n        runAsGroup: runAsGroup != null ? runAsGroup : \"\",\n        runAsUser: runAsUser != null ? runAsUser : \"\",\n        fsGroup: fsGroup != null ? fsGroup : \"\",\n        runAsNonRoot: runAsNonRoot != null ? runAsNonRoot : true,\n      };\n\n      api\n        .invoke(\n          \"PUT\",\n          `/api/v1/namespaces/${tenantNamespace}/tenants/${tenantName}/log`,\n          {\n            labels: trim(logLabels),\n            annotations: trim(logAnnotations),\n            nodeSelector: trim(logNodeSelector),\n            image: image,\n            diskCapacityGB: diskCapacityGB.toString(),\n            serviceAccountName: serviceAccountName,\n            logCPURequest: cpuRequest,\n            logMemRequest: memRequest,\n            securityContext: securityContext,\n          }\n        )\n        .then(() => {\n          setRefreshLoggingInfo(true);\n          dispatch(setSnackBarMessage(`Audit Log configuration updated.`));\n          setLoading(false);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setErrorSnackMessage(err);\n          setLoading(false);\n        });\n    }\n  };\n\n  return (\n    <Fragment>\n      {auditLoggingEnabled && (\n        <Fragment>\n          <Grid item xs={12} paddingBottom={2}>\n            <InputBoxWrapper\n              id={`image`}\n              label={\"Image\"}\n              placeholder={\"minio/operator:v4.4.22\"}\n              name={`image`}\n              value={image}\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                if (event.target.validity.valid) {\n                  dispatch(setImage(event.target.value));\n                }\n                cleanValidation(`image`);\n              }}\n              key={`image`}\n              pattern={imagePattern}\n              error={validationErrors[`image`] || \"\"}\n            />\n          </Grid>\n\n          <Grid item xs={12} paddingBottom={2}>\n            <InputBoxWrapper\n              id={`diskCapacityGB`}\n              label={\"Disk Capacity\"}\n              placeholder={\"Disk Capacity\"}\n              name={`diskCapacityGB`}\n              value={!isNaN(diskCapacityGB) ? diskCapacityGB.toString() : \"0\"}\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                if (event.target.validity.valid) {\n                  dispatch(setDiskCapacityGB(parseInt(event.target.value)));\n                }\n                cleanValidation(`diskCapacityGB`);\n              }}\n              key={`diskCapacityGB`}\n              pattern={numericPattern}\n              error={validationErrors[`diskCapacityGB`] || \"\"}\n              overlayObject={\n                <InputUnitMenu\n                  id={\"size-unit\"}\n                  onUnitChange={() => {}}\n                  unitSelected={\"Gi\"}\n                  unitsList={[{ label: \"Gi\", value: \"Gi\" }]}\n                  disabled={true}\n                />\n              }\n            />\n          </Grid>\n          <Grid item xs={12} paddingBottom={2}>\n            <InputBoxWrapper\n              id={`cpuRequest`}\n              label={\"CPU Request\"}\n              placeholder={\"CPU Request\"}\n              name={`cpuRequest`}\n              value={cpuRequest}\n              pattern={numericPattern}\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                if (event.target.validity.valid) {\n                  dispatch(setCPURequest(event.target.value));\n                }\n                cleanValidation(`cpuRequest`);\n              }}\n              key={`cpuRequest`}\n              error={validationErrors[`cpuRequest`] || \"\"}\n            />\n          </Grid>\n\n          <Grid item xs={12} paddingBottom={2}>\n            <InputBoxWrapper\n              id={`memRequest`}\n              label={\"Memory Request\"}\n              placeholder={\"Memory request\"}\n              name={`memRequest`}\n              value={memRequest}\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                if (event.target.validity.valid) {\n                  dispatch(setMemRequest(event.target.value));\n                }\n                cleanValidation(`memRequest`);\n              }}\n              pattern={numericPattern}\n              key={`memRequest`}\n              error={validationErrors[`memRequest`] || \"\"}\n              overlayObject={\n                <InputUnitMenu\n                  id={\"size-unit\"}\n                  onUnitChange={() => {}}\n                  unitSelected={\"Gi\"}\n                  unitsList={[{ label: \"Gi\", value: \"Gi\" }]}\n                  disabled={true}\n                />\n              }\n            />\n          </Grid>\n\n          <Grid item xs={12} paddingBottom={2}>\n            <InputBoxWrapper\n              id={`serviceAccountName`}\n              label={\"Service Account\"}\n              placeholder={\"Service Account Name\"}\n              name={`serviceAccountName`}\n              value={serviceAccountName}\n              onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                if (event.target.validity.valid) {\n                  dispatch(setServiceAccountName(event.target.value));\n                }\n                cleanValidation(`serviceAccountName`);\n              }}\n              key={`serviceAccountName`}\n              pattern={\"^[a-zA-Z0-9-.]{1,253}$\"}\n              error={validationErrors[`serviceAccountName`] || \"\"}\n            />\n          </Grid>\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <SecurityContextSelector\n              classes={classes}\n              runAsGroup={runAsGroup}\n              runAsUser={runAsUser}\n              fsGroup={fsGroup}\n              runAsNonRoot={runAsNonRoot}\n              fsGroupChangePolicy={fsGroupChangePolicy}\n              setFSGroup={(value: string) => dispatch(setFSGroup(value))}\n              setRunAsUser={(value: string) => dispatch(setRunAsUser(value))}\n              setRunAsGroup={(value: string) => dispatch(setRunAsGroup(value))}\n              setRunAsNonRoot={(value: boolean) =>\n                dispatch(setRunAsNonRoot(value))\n              }\n              setFSGroupChangePolicy={(value: fsGroupChangePolicyType) =>\n                dispatch(setFSGroupChangePolicy(value))\n              }\n            />\n          </Grid>\n\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <span className={classes.inputLabel}>Labels</span>\n            <KeyPairEdit\n              newValues={logLabels}\n              setNewValues={setLabels}\n              paramName={\"Labels\"}\n              error={labelsError}\n              setError={setLabelsError}\n            />\n          </Grid>\n\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <span className={classes.inputLabel}>Annotations</span>\n            <KeyPairEdit\n              newValues={logAnnotations}\n              setNewValues={setAnnotations}\n              paramName={\"Annotations\"}\n              error={annotationsError}\n              setError={setAnnotationsError}\n            />\n          </Grid>\n\n          <Grid item xs={12} className={classes.formFieldRow}>\n            <span className={classes.inputLabel}>Node Selector</span>\n            <KeyPairEdit\n              newValues={logNodeSelector}\n              setNewValues={setNodeSelector}\n              paramName={\"Node Selector\"}\n              error={nodeSelectorError}\n              setError={setNodeSelectorError}\n            />\n          </Grid>\n\n          <Grid\n            item\n            xs={12}\n            sx={{ display: \"flex\", justifyContent: \"flex-end\" }}\n          >\n            <Button\n              type=\"submit\"\n              id={\"submit_button\"}\n              variant=\"callAction\"\n              disabled={loading || !checkValid()}\n              onClick={() => submitLoggingInfo()}\n              label={\"Save\"}\n            />\n          </Grid>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(TenantAuditLogging);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  containerForHeader,\n  createTenantCommon,\n  formFieldStyles,\n  modalBasic,\n  spacingUtils,\n  tenantDetailsStyles,\n  wizardCommon,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport React, { Fragment, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport api from \"../../../../common/api\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport { useParams } from \"react-router-dom\";\n\nimport Grid from \"@mui/material/Grid\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport { Button } from \"mds\";\nimport {\n  setErrorSnackMessage,\n  setSnackBarMessage,\n} from \"../../../../systemSlice\";\nimport { IKeyValue, ITenantAuditLogs } from \"../ListTenants/types\";\nimport KeyPairEdit from \"./KeyPairEdit\";\nimport InputUnitMenu from \"../../Common/FormComponents/InputUnitMenu/InputUnitMenu\";\nimport {\n  setDBImage,\n  setDBInitImage,\n  setDBCPURequest,\n  setDBMemRequest,\n  setDBRunAsUser,\n  setDBFSGroup,\n  setDBFSGroupChangePolicy,\n  setDBRunAsGroup,\n  setDBRunAsNonRoot,\n  setRefreshLoggingInfo,\n} from \"./tenantAuditLogSlice\";\n\nimport SecurityContextSelector from \"../securityContextSelector\";\n\nimport { clearValidationError, imagePattern, numericPattern } from \"../utils\";\nimport { fsGroupChangePolicyType } from \"../types\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...tenantDetailsStyles,\n    ...spacingUtils,\n    bold: { fontWeight: \"bold\" },\n    italic: { fontStyle: \"italic\" },\n    fileItem: {\n      marginRight: 10,\n      display: \"flex\",\n      \"& div label\": {\n        minWidth: 50,\n      },\n\n      \"@media (max-width: 900px)\": {\n        flexFlow: \"column\",\n      },\n    },\n    ...containerForHeader(theme.spacing(4)),\n    ...createTenantCommon,\n    ...formFieldStyles,\n    ...modalBasic,\n    ...wizardCommon,\n  });\n\nconst LoggingDBDetails = ({\n  classes,\n  labels,\n  annotations,\n  nodeSelector,\n}: ITenantAuditLogs) => {\n  const dispatch = useAppDispatch();\n  const { tenantName, tenantNamespace } = useParams();\n  const dbImage = useSelector(\n    (state: AppState) => state.editTenantLogging.dbImage\n  );\n  const dbInitImage = useSelector(\n    (state: AppState) => state.editTenantLogging.dbInitImage\n  );\n  const dbCpuRequest = useSelector(\n    (state: AppState) => state.editTenantLogging.dbCPURequest\n  );\n  const dbMemRequest = useSelector(\n    (state: AppState) => state.editTenantLogging.dbMemRequest\n  );\n  const dbServiceAccountName = useSelector(\n    (state: AppState) => state.editTenantLogging.dbServiceAccountName\n  );\n\n  const dbRunAsGroup = useSelector(\n    (state: AppState) => state.editTenantLogging.dbSecurityContext.runAsGroup\n  );\n  const dbRunAsUser = useSelector(\n    (state: AppState) => state.editTenantLogging.dbSecurityContext.runAsUser\n  );\n  const dbFSGroup = useSelector(\n    (state: AppState) => state.editTenantLogging.dbSecurityContext.fsGroup\n  );\n  const dbFSGroupChangePolicy = useSelector(\n    (state: AppState) =>\n      state.editTenantLogging.dbSecurityContext.fsGroupChangePolicy\n  );\n  const dbRunAsNonRoot = useSelector(\n    (state: AppState) => state.editTenantLogging.dbSecurityContext.runAsNonRoot\n  );\n  const [validationErrors, setValidationErrors] = useState<any>({});\n\n  const [dbLabels, setDBLabels] = useState<IKeyValue[]>(\n    labels != null && labels.length > 0 ? labels : [{ key: \"\", value: \"\" }]\n  );\n  const [dbAnnotations, setDBAnnotations] = useState<IKeyValue[]>(\n    annotations != null && annotations.length > 0\n      ? annotations\n      : [{ key: \"\", value: \"\" }]\n  );\n  const [dbNodeSelector, setDBNodeSelector] = useState<IKeyValue[]>(\n    nodeSelector != null && nodeSelector.length > 0\n      ? nodeSelector\n      : [{ key: \"\", value: \"\" }]\n  );\n\n  const [dbLabelsError, setDBLabelsError] = useState<any>({});\n  const [dbAnnotationsError, setDBAnnotationsError] = useState<any>({});\n  const [dbNodeSelectorError, setDBNodeSelectorError] = useState<any>({});\n\n  const cleanValidation = (fieldName: string) => {\n    setValidationErrors(clearValidationError(validationErrors, fieldName));\n  };\n\n  const trim = (x: IKeyValue[]): IKeyValue[] => {\n    let retval: IKeyValue[] = [];\n    for (let i = 0; i < x.length; i++) {\n      if (x[i].key !== \"\") {\n        retval.push(x[i]);\n      }\n    }\n    return retval;\n  };\n\n  const checkValid = (): boolean => {\n    if (\n      Object.keys(validationErrors).length !== 0 ||\n      Object.keys(dbNodeSelectorError).length !== 0 ||\n      Object.keys(dbAnnotationsError).length !== 0 ||\n      Object.keys(dbLabelsError).length !== 0\n    ) {\n      let err: ErrorResponseHandler = {\n        errorMessage: \"Invalid entry\",\n        detailedError: \"\",\n      };\n      dispatch(setErrorSnackMessage(err));\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  const submitLoggingInfo = () => {\n    if (checkValid()) {\n      const dbSecurityContext = {\n        runAsGroup: dbRunAsGroup != null ? dbRunAsGroup : \"\",\n        runAsUser: dbRunAsUser != null ? dbRunAsUser : \"\",\n        fsGroup: dbFSGroup != null ? dbFSGroup : \"\",\n        runAsNonRoot: dbRunAsNonRoot != null ? dbRunAsNonRoot : true,\n        fsGroupChangePolicy:\n          dbFSGroupChangePolicy != null ? dbFSGroupChangePolicy : \"Always\",\n      };\n      api\n        .invoke(\n          \"PUT\",\n          `/api/v1/namespaces/${tenantNamespace}/tenants/${tenantName}/log`,\n          {\n            dbLabels: trim(dbLabels),\n            dbAnnotations: trim(dbAnnotations),\n            dbNodeSelector: trim(dbNodeSelector),\n            dbImage: dbImage,\n            dbInitImage: dbInitImage,\n            dbServiceAccountName: dbServiceAccountName,\n            logDBCPURequest: dbCpuRequest,\n            logDBMemRequest: dbMemRequest,\n            dbSecurityContext: dbSecurityContext,\n          }\n        )\n        .then(() => {\n          setRefreshLoggingInfo(true);\n          dispatch(setSnackBarMessage(`Audit Log DB configuration updated.`));\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setErrorSnackMessage(err);\n        });\n    }\n  };\n\n  return (\n    <Fragment>\n      <Fragment>\n        <Grid item xs={12} paddingBottom={2}>\n          <InputBoxWrapper\n            id={`dbImage`}\n            label={\"DB Postgres Image\"}\n            placeholder={\"library/postgres:13\"}\n            name={`dbImage`}\n            value={dbImage}\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n              if (event.target.validity.valid) {\n                dispatch(setDBImage(event.target.value));\n              }\n              cleanValidation(`dbImage`);\n            }}\n            key={`dbImage`}\n            pattern={imagePattern}\n            error={validationErrors[`dbImage`] || \"\"}\n          />\n        </Grid>\n        <Grid item xs={12} paddingBottom={2}>\n          <InputBoxWrapper\n            id={`dbInitImage`}\n            label={\"DB Init Image\"}\n            placeholder={\"library/busybox:1.33.1\"}\n            name={`dbInitImage`}\n            value={dbInitImage}\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n              if (event.target.validity.valid) {\n                dispatch(setDBInitImage(event.target.value));\n              }\n              cleanValidation(`dbInitImage`);\n            }}\n            key={`dbInitImage`}\n            pattern={imagePattern}\n            error={validationErrors[`dbInitImage`] || \"\"}\n          />\n        </Grid>\n        <Grid item xs={12} paddingBottom={2}>\n          <InputBoxWrapper\n            id={`dbCPURequest`}\n            label={\"DB CPU Request\"}\n            placeholder={\"DB CPU Request\"}\n            name={`dbCPURequest`}\n            value={dbCpuRequest}\n            pattern={numericPattern}\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n              if (event.target.validity.valid) {\n                dispatch(setDBCPURequest(event.target.value));\n              }\n              cleanValidation(`dbCPURequest`);\n            }}\n            key={`dbCPURequest`}\n            error={validationErrors[`dbCPURequest`] || \"\"}\n          />\n        </Grid>\n        <Grid item xs={12} paddingBottom={2}>\n          <InputBoxWrapper\n            id={`dbMemRequest`}\n            label={\"DB Memory Request\"}\n            placeholder={\"DB Memory request\"}\n            name={`dbMemRequest`}\n            value={dbMemRequest}\n            onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n              if (event.target.validity.valid) {\n                dispatch(setDBMemRequest(event.target.value));\n              }\n              cleanValidation(`dbMemRequest`);\n            }}\n            pattern={numericPattern}\n            key={`dbMemRequest`}\n            error={validationErrors[`dbMemRequest`] || \"\"}\n            overlayObject={\n              <InputUnitMenu\n                id={\"size-unit\"}\n                onUnitChange={() => {}}\n                unitSelected={\"Gi\"}\n                unitsList={[{ label: \"Gi\", value: \"Gi\" }]}\n                disabled={true}\n              />\n            }\n          />\n        </Grid>\n\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <span className={classes.inputLabel}>DB Labels</span>\n          <KeyPairEdit\n            newValues={dbLabels}\n            setNewValues={setDBLabels}\n            paramName={\"dbLabels\"}\n            error={dbLabelsError}\n            setError={setDBLabelsError}\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <span className={classes.inputLabel}>DB Annotations</span>\n          <KeyPairEdit\n            newValues={dbAnnotations}\n            setNewValues={setDBAnnotations}\n            paramName={\"dbAnnotations\"}\n            error={dbAnnotationsError}\n            setError={setDBAnnotationsError}\n          />\n        </Grid>\n\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <span className={classes.inputLabel}>DB Node Selector</span>\n          <KeyPairEdit\n            newValues={dbNodeSelector}\n            setNewValues={setDBNodeSelector}\n            paramName={\"DB Node Selector\"}\n            error={dbNodeSelectorError}\n            setError={setDBNodeSelectorError}\n          />\n        </Grid>\n\n        <Grid item xs={12} className={classes.formFieldRow}>\n          <SecurityContextSelector\n            classes={classes}\n            runAsGroup={dbRunAsGroup}\n            runAsUser={dbRunAsUser}\n            fsGroup={dbFSGroup}\n            fsGroupChangePolicy={dbFSGroupChangePolicy}\n            runAsNonRoot={dbRunAsNonRoot}\n            setFSGroup={(value: string) => dispatch(setDBFSGroup(value))}\n            setRunAsUser={(value: string) => dispatch(setDBRunAsUser(value))}\n            setRunAsGroup={(value: string) => dispatch(setDBRunAsGroup(value))}\n            setRunAsNonRoot={(value: boolean) =>\n              dispatch(setDBRunAsNonRoot(value))\n            }\n            setFSGroupChangePolicy={(value: fsGroupChangePolicyType) =>\n              dispatch(setDBFSGroupChangePolicy(value))\n            }\n          />\n        </Grid>\n        <Grid item xs={12} sx={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n          <Button\n            type=\"submit\"\n            id={\"submit_button\"}\n            variant=\"callAction\"\n            disabled={!checkValid()}\n            onClick={() => submitLoggingInfo()}\n            label={\"Save\"}\n          />\n        </Grid>\n      </Fragment>\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(LoggingDBDetails);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { Theme } from \"@mui/material/styles\";\nimport { useParams } from \"react-router-dom\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { containerForHeader } from \"../../Common/FormComponents/common/styleLibrary\";\nimport Grid from \"@mui/material/Grid\";\nimport Tabs from \"@mui/material/Tabs\";\nimport Tab from \"@mui/material/Tab\";\nimport { DialogContentText } from \"@mui/material\";\nimport ConfirmDialog from \"../../Common/ModalWrapper/ConfirmDialog\";\nimport api from \"../../../../common/api\";\nimport { useSelector } from \"react-redux\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport { setErrorSnackMessage } from \"../../../../systemSlice\";\nimport FormSwitchWrapper from \"../../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport { ITenantLogsStruct } from \"../ListTenants/types\";\nimport { IKeyValue } from \"../ListTenants/types\";\n\nimport LoggingDetails from \"./LoggingDetails\";\nimport LoggingDBDetails from \"./LoggingDBDetails\";\nimport {\n  setAuditLoggingEnabled,\n  setDBImage,\n  setDBInitImage,\n  setDBServiceAccountName,\n  setDBCPURequest,\n  setDBMemRequest,\n  setDBRunAsUser,\n  setDBFSGroup,\n  setDBRunAsGroup,\n  setDBRunAsNonRoot,\n  setImage,\n  setDiskCapacityGB,\n  setServiceAccountName,\n  setCPURequest,\n  setMemRequest,\n  setRunAsUser,\n  setFSGroup,\n  setRunAsGroup,\n  setRunAsNonRoot,\n  resetAuditLogForm,\n} from \"../TenantDetails/tenantAuditLogSlice\";\n\ninterface ILoggingScreenProps {\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    breadcrumLink: {\n      textDecoration: \"none\",\n      color: \"black\",\n    },\n    ...containerForHeader(theme.spacing(4)),\n  });\n\nconst LoggingScreen = ({ classes }: ILoggingScreenProps) => {\n  const { tenantNamespace, tenantName } = useParams();\n  const [curTab, setCurTab] = useState<number>(0);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [toggleConfirmOpen, setToggleConfirmOpen] = useState<boolean>(false);\n  const [refreshLoggingInfo, setRefreshLoggingInfo] = useState<boolean>(true);\n  const [dbLabels, setDBLabels] = useState<IKeyValue[]>([\n    { key: \"\", value: \"\" },\n  ]);\n  const [dbAnnotations, setDBAnnotations] = useState<IKeyValue[]>([\n    { key: \"\", value: \"\" },\n  ]);\n  const [dbNodeSelector, setDBNodeSelector] = useState<IKeyValue[]>([\n    { key: \"\", value: \"\" },\n  ]);\n  const [labels, setLabels] = useState<IKeyValue[]>([{ key: \"\", value: \"\" }]);\n  const [annotations, setAnnotations] = useState<IKeyValue[]>([\n    { key: \"\", value: \"\" },\n  ]);\n  const [nodeSelector, setNodeSelector] = useState<IKeyValue[]>([\n    { key: \"\", value: \"\" },\n  ]);\n  const dispatch = useAppDispatch();\n  const auditLoggingEnabled = useSelector(\n    (state: AppState) => state.editTenantLogging.auditLoggingEnabled\n  );\n  function a11yProps(index: any) {\n    return {\n      id: `simple-tab-${index}`,\n      \"aria-controls\": `simple-tabpanel-${index}`,\n    };\n  }\n\n  const setLoggingInfo = (res: ITenantLogsStruct) => {\n    if (res !== null) {\n      dispatch(setAuditLoggingEnabled(res !== null && !res.disabled));\n      res.dbServiceAccountName != null &&\n        dispatch(setDBServiceAccountName(res.dbServiceAccountName));\n      res.dbImage != null && dispatch(setDBImage(res.dbImage));\n      res.dbInitImage != null && dispatch(setDBInitImage(res.dbInitImage));\n      res.logDBCPURequest != null &&\n        dispatch(setDBCPURequest(res.logDBCPURequest));\n      if (res.logDBMemRequest) {\n        dispatch(\n          setDBMemRequest(\n            Math.floor(parseInt(res.logDBMemRequest, 10)).toString()\n          )\n        );\n      } else {\n        dispatch(setDBMemRequest(\"0\"));\n      }\n      if (res.dbSecurityContext) {\n        dispatch(setDBRunAsGroup(res.dbSecurityContext.runAsGroup));\n        dispatch(setDBRunAsUser(res.dbSecurityContext.runAsUser));\n        dispatch(setDBFSGroup(res.dbSecurityContext.fsGroup));\n        dispatch(setDBRunAsNonRoot(res.dbSecurityContext.runAsNonRoot));\n      }\n      res.image != null && dispatch(setImage(res.image));\n      res.serviceAccountName != null &&\n        dispatch(setServiceAccountName(res.serviceAccountName));\n      res.logCPURequest != null && dispatch(setCPURequest(res.logCPURequest));\n      if (res.logMemRequest) {\n        dispatch(\n          setMemRequest(Math.floor(parseInt(res.logMemRequest, 10)).toString())\n        );\n      } else {\n        dispatch(setMemRequest(\"0\"));\n      }\n      if (res.securityContext) {\n        dispatch(setRunAsGroup(res.securityContext.runAsGroup));\n        dispatch(setRunAsUser(res.securityContext.runAsUser));\n        dispatch(setFSGroup(res.securityContext.fsGroup));\n        dispatch(setRunAsNonRoot(res.securityContext.runAsNonRoot));\n      }\n\n      res.diskCapacityGB != null &&\n        dispatch(setDiskCapacityGB(res.diskCapacityGB));\n      res.labels != null\n        ? setLabels(res.labels)\n        : setLabels([{ key: \"\", value: \"\" }]);\n      res.annotations != null\n        ? setAnnotations(res.annotations)\n        : setAnnotations([{ key: \"\", value: \"\" }]);\n      res.nodeSelector != null\n        ? setNodeSelector(res.nodeSelector)\n        : setNodeSelector([{ key: \"\", value: \"\" }]);\n      res.dbLabels != null\n        ? setDBLabels(res.dbLabels)\n        : setDBLabels([{ key: \"\", value: \"\" }]);\n      res.dbAnnotations != null\n        ? setDBAnnotations(res.dbAnnotations)\n        : setDBAnnotations([{ key: \"\", value: \"\" }]);\n      res.dbNodeSelector != null\n        ? setDBNodeSelector(res.dbNodeSelector)\n        : setDBNodeSelector([{ key: \"\", value: \"\" }]);\n      setRefreshLoggingInfo(false);\n    }\n  };\n\n  useEffect(() => {\n    if (refreshLoggingInfo) {\n      api\n        .invoke(\n          \"GET\",\n          `/api/v1/namespaces/${tenantNamespace}/tenants/${tenantName}/log`\n        )\n        .then((res: ITenantLogsStruct) => {\n          if (res !== null) {\n            dispatch(setAuditLoggingEnabled(res.auditLoggingEnabled));\n            setLoggingInfo(res);\n            setRefreshLoggingInfo(false);\n          }\n        })\n        .catch((err: ErrorResponseHandler) => {\n          dispatch(setErrorSnackMessage(err));\n          setRefreshLoggingInfo(false);\n        });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [refreshLoggingInfo]);\n\n  useEffect(() => {\n    if (loading) {\n      setLoading(false);\n    }\n  }, [loading, refreshLoggingInfo]);\n\n  const toggleLogging = () => {\n    dispatch(resetAuditLogForm());\n    if (!auditLoggingEnabled) {\n      api\n        .invoke(\n          \"POST\",\n          `/api/v1/namespaces/${tenantNamespace}/tenants/${tenantName}/enable-logging`\n        )\n        .then(() => {\n          setRefreshLoggingInfo(true);\n          setToggleConfirmOpen(false);\n          setAuditLoggingEnabled(true);\n        })\n        .catch((err: ErrorResponseHandler) => {\n          dispatch(\n            setErrorSnackMessage({\n              errorMessage: \"Error enabling logging\",\n              detailedError: err.detailedError,\n            })\n          );\n        });\n    } else {\n      api\n        .invoke(\n          \"POST\",\n          `/api/v1/namespaces/${tenantNamespace}/tenants/${tenantName}/disable-logging`\n        )\n        .then(() => {\n          setAuditLoggingEnabled(false);\n          setRefreshLoggingInfo(true);\n          setToggleConfirmOpen(false);\n          dispatch(resetAuditLogForm());\n        })\n        .catch((err: ErrorResponseHandler) => {\n          dispatch(\n            setErrorSnackMessage({\n              errorMessage: \"Error disabling logging\",\n              detailedError: err.detailedError,\n            })\n          );\n        });\n    }\n  };\n\n  return (\n    <Fragment>\n      <Grid item xs>\n        {toggleConfirmOpen && (\n          <ConfirmDialog\n            isOpen={toggleConfirmOpen}\n            title={\n              !auditLoggingEnabled\n                ? \"Enable Audit Logging for this tenant?\"\n                : \"Disable Audit Logging for this tenant?\"\n            }\n            confirmText={!auditLoggingEnabled ? \"Enable\" : \"Disable\"}\n            cancelText=\"Cancel\"\n            onClose={() => setToggleConfirmOpen(false)}\n            onConfirm={toggleLogging}\n            confirmationContent={\n              <DialogContentText>\n                {!auditLoggingEnabled\n                  ? \"A small Postgres server will be started per the configuration provided, which will collect the audit logs for your tenant.\"\n                  : \" Current configuration will be lost, and defaults reset if reenabled.\"}\n              </DialogContentText>\n            }\n          />\n        )}\n      </Grid>\n      <Grid container>\n        <Grid item xs>\n          <h1 className={classes.sectionTitle}>Audit Logs</h1>\n        </Grid>\n        <Grid>\n          <FormSwitchWrapper\n            label={\"\"}\n            indicatorLabels={[\"Enabled\", \"Disabled\"]}\n            checked={auditLoggingEnabled}\n            value={\"tenant_logging\"}\n            id=\"tenant_logging\"\n            name=\"tenant_logging\"\n            onChange={() => {\n              setToggleConfirmOpen(true);\n            }}\n            description=\"\"\n          />\n        </Grid>\n      </Grid>\n      <Grid container>\n        {auditLoggingEnabled && (\n          <Fragment>\n            <Grid item xs={9}>\n              <Tabs\n                value={curTab}\n                onChange={(e: React.ChangeEvent<{}>, newValue: number) => {\n                  setCurTab(newValue);\n                }}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                aria-label=\"cluster-tabs\"\n                variant=\"scrollable\"\n                scrollButtons=\"auto\"\n              >\n                <Tab label=\"Configuration\" {...a11yProps(0)} />\n                <Tab label=\"DB Configuration\" {...a11yProps(1)} />\n              </Tabs>\n            </Grid>\n            <Grid item xs={12}>\n              <hr className={classes.hrClass} />\n            </Grid>\n            {curTab === 0 && (\n              <LoggingDetails\n                classes={classes}\n                labels={labels}\n                annotations={annotations}\n                nodeSelector={nodeSelector}\n              />\n            )}\n            {curTab === 1 && (\n              <LoggingDBDetails\n                classes={classes}\n                labels={dbLabels}\n                annotations={dbAnnotations}\n                nodeSelector={dbNodeSelector}\n              />\n            )}\n          </Fragment>\n        )}\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(LoggingScreen);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { Fragment } from \"react\";\nimport InputBoxWrapper from \"../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport FormSwitchWrapper from \"../Common/FormComponents/FormSwitchWrapper/FormSwitchWrapper\";\nimport SelectWrapper from \"../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport { Grid, SelectChangeEvent } from \"@mui/material\";\nimport { useDispatch } from \"react-redux\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport { fsGroupChangePolicyType } from \"./types\";\n\ninterface IEditSecurityContextProps {\n  classes: any;\n  runAsUser: string;\n  runAsGroup: string;\n  fsGroup: string;\n  fsGroupChangePolicy: fsGroupChangePolicyType;\n  runAsNonRoot: boolean;\n  setRunAsUser: any;\n  setRunAsGroup: any;\n  setFSGroup: any;\n  setRunAsNonRoot: any;\n  setFSGroupChangePolicy: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    configSectionItem: {\n      marginRight: 15,\n      marginBottom: 15,\n      \"& .multiContainer\": {\n        border: \"1px solid red\",\n      },\n    },\n  });\n\nconst SecurityContextSelector = ({\n  classes,\n  runAsGroup,\n  runAsUser,\n  fsGroup,\n  fsGroupChangePolicy,\n  runAsNonRoot,\n  setRunAsUser,\n  setRunAsGroup,\n  setFSGroup,\n  setRunAsNonRoot,\n  setFSGroupChangePolicy,\n}: IEditSecurityContextProps) => {\n  const dispatch = useDispatch();\n  return (\n    <Fragment>\n      <fieldset className={`${classes.fieldGroup} ${classes.fieldSpaceTop} `}>\n        <legend className={classes.descriptionText}>Security Context</legend>\n\n        <Grid item xs={12}>\n          <div className={`${classes.multiContainerStackNarrow} `}>\n            <div className={classes.configSectionItem}>\n              <InputBoxWrapper\n                type=\"number\"\n                id=\"securityContext_runAsUser\"\n                name=\"securityContext_runAsUser\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  dispatch(setRunAsUser(e.target.value));\n                }}\n                label=\"Run As User\"\n                value={runAsUser}\n                required\n                min=\"0\"\n              />\n            </div>\n            <div className={classes.configSectionItem}>\n              <InputBoxWrapper\n                type=\"number\"\n                id=\"securityContext_runAsGroup\"\n                name=\"securityContext_runAsGroup\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  dispatch(setRunAsGroup(e.target.value));\n                }}\n                label=\"Run As Group\"\n                value={runAsGroup}\n                required\n                min=\"0\"\n              />\n            </div>\n          </div>\n        </Grid>\n        <Grid item xs={12}>\n          <div className={`${classes.multiContainerStackNarrow} `}>\n            <div className={classes.configSectionItem}>\n              <InputBoxWrapper\n                type=\"number\"\n                id=\"securityContext_fsGroup\"\n                name=\"securityContext_fsGroup\"\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  dispatch(setFSGroup(e.target.value));\n                }}\n                label=\"FsGroup\"\n                value={fsGroup}\n                required\n                min=\"0\"\n              />\n            </div>\n\n            <div className={classes.configSectionItem}>\n              <SelectWrapper\n                label=\"FsGroupChangePolicy\"\n                id=\"securityContext_fsGroupChangePolicy\"\n                name=\"securityContext_fsGroupChangePolicy\"\n                onChange={(e: SelectChangeEvent<string>) => {\n                  dispatch(setFSGroupChangePolicy(e.target.value));\n                }}\n                value={fsGroupChangePolicy}\n                options={[\n                  {\n                    label: \"Always\",\n                    value: \"Always\",\n                  },\n                  {\n                    label: \"OnRootMismatch\",\n                    value: \"OnRootMismatch\",\n                  },\n                ]}\n              />\n            </div>\n          </div>\n        </Grid>\n        <Grid item xs={12}>\n          <div className={classes.multiContainer}>\n            <FormSwitchWrapper\n              value=\"SecurityContextRunAsNonRoot\"\n              id=\"securityContext_runAsNonRoot\"\n              name=\"securityContext_runAsNonRoot\"\n              checked={runAsNonRoot}\n              onChange={() => {\n                dispatch(setRunAsNonRoot(!runAsNonRoot));\n              }}\n              label={\"Do not run as Root\"}\n            />\n          </div>\n        </Grid>\n      </fieldset>\n    </Fragment>\n  );\n};\n\nexport default withStyles(styles)(SecurityContextSelector);\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"\n}), 'Add');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _jsxRuntime = require(\"react/jsx-runtime\");\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"\n}), 'Delete');\n\nexports.default = _default;"],"names":["withStyles","theme","createStyles","bottomContainer","display","flexGrow","alignItems","width","shortened","gridTemplateColumns","gridGap","paddingRight","modalBasic","classes","paramName","newValues","setNewValues","error","setError","cleanValidation","fieldName","clearValidationError","useEffect","keyPairValidation","i","length","push","fieldKey","toString","required","value","key","pattern","customPatternMessage","commonVal","commonFormValidation","keyValueInputs","map","_","index","Fragment","paddingBottom","className","id","replace","label","placeholder","name","onChange","e","tempLabels","target","title","size","onClick","style","marginLeft","splice","tenantDetailsStyles","spacingUtils","bold","fontWeight","italic","fontStyle","fileItem","marginRight","minWidth","flexFlow","containerForHeader","spacing","createTenantCommon","formFieldStyles","wizardCommon","labels","annotations","nodeSelector","dispatch","useAppDispatch","useParams","tenantName","tenantNamespace","auditLoggingEnabled","useSelector","state","editTenantLogging","image","diskCapacityGB","cpuRequest","memRequest","serviceAccountName","runAsGroup","securityContext","runAsUser","fsGroup","runAsNonRoot","fsGroupChangePolicy","editTenantSecurityContext","useState","validationErrors","setValidationErrors","loading","setLoading","logLabels","setLabels","logAnnotations","setAnnotations","logNodeSelector","setNodeSelector","labelsError","setLabelsError","annotationsError","setAnnotationsError","nodeSelectorError","setNodeSelectorError","trim","x","retval","checkValid","Object","keys","setErrorSnackMessage","errorMessage","detailedError","Grid","item","xs","InputBoxWrapper","event","validity","valid","setImage","imagePattern","isNaN","setDiskCapacityGB","parseInt","numericPattern","overlayObject","InputUnitMenu","onUnitChange","unitSelected","unitsList","disabled","setCPURequest","setMemRequest","setServiceAccountName","formFieldRow","setFSGroup","setRunAsUser","setRunAsGroup","setRunAsNonRoot","setFSGroupChangePolicy","inputLabel","KeyPairEdit","sx","justifyContent","type","variant","api","logCPURequest","logMemRequest","then","setRefreshLoggingInfo","setSnackBarMessage","catch","err","submitLoggingInfo","dbImage","dbInitImage","dbCpuRequest","dbCPURequest","dbMemRequest","dbServiceAccountName","dbRunAsGroup","dbSecurityContext","dbRunAsUser","dbFSGroup","dbFSGroupChangePolicy","dbRunAsNonRoot","dbLabels","setDBLabels","dbAnnotations","setDBAnnotations","dbNodeSelector","setDBNodeSelector","dbLabelsError","setDBLabelsError","dbAnnotationsError","setDBAnnotationsError","dbNodeSelectorError","setDBNodeSelectorError","setDBImage","setDBInitImage","setDBCPURequest","setDBMemRequest","setDBFSGroup","setDBRunAsUser","setDBRunAsGroup","setDBRunAsNonRoot","setDBFSGroupChangePolicy","logDBCPURequest","logDBMemRequest","breadcrumLink","textDecoration","color","curTab","setCurTab","toggleConfirmOpen","setToggleConfirmOpen","refreshLoggingInfo","a11yProps","res","setAuditLoggingEnabled","setDBServiceAccountName","Math","floor","setLoggingInfo","ConfirmDialog","isOpen","confirmText","cancelText","onClose","onConfirm","resetAuditLogForm","confirmationContent","DialogContentText","container","sectionTitle","FormSwitchWrapper","indicatorLabels","checked","description","Tabs","newValue","indicatorColor","textColor","scrollButtons","Tab","hrClass","LoggingDetails","configSectionItem","marginBottom","border","useDispatch","fieldGroup","fieldSpaceTop","descriptionText","multiContainerStackNarrow","min","options","multiContainer","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}