{"version":3,"file":"static/js/9297.ab07c841.chunk.js","mappings":"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","sources":["screens/Console/Common/ModalWrapper/ModalWrapper.tsx","screens/Console/DirectPV/FormatErrorsResult.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport { Dialog, DialogContent, DialogTitle } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  deleteDialogStyles,\n  snackBarCommon,\n} from \"../FormComponents/common/styleLibrary\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport MainError from \"../MainError/MainError\";\nimport { setModalSnackMessage } from \"../../../../systemSlice\";\n\ninterface IModalProps {\n  classes: any;\n  onClose: () => void;\n  modalOpen: boolean;\n  title: string | React.ReactNode;\n  children: any;\n  wideLimit?: boolean;\n  noContentPadding?: boolean;\n  titleIcon?: React.ReactNode;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...deleteDialogStyles,\n    content: {\n      padding: 25,\n      paddingBottom: 0,\n    },\n    customDialogSize: {\n      width: \"100%\",\n      maxWidth: 765,\n    },\n    ...snackBarCommon,\n  });\n\nconst ModalWrapper = ({\n  onClose,\n  modalOpen,\n  title,\n  children,\n  classes,\n  wideLimit = true,\n  noContentPadding,\n  titleIcon = null,\n}: IModalProps) => {\n  const dispatch = useAppDispatch();\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\n\n  const modalSnackMessage = useSelector(\n    (state: AppState) => state.system.modalSnackBar\n  );\n\n  useEffect(() => {\n    dispatch(setModalSnackMessage(\"\"));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (modalSnackMessage) {\n      if (modalSnackMessage.message === \"\") {\n        setOpenSnackbar(false);\n        return;\n      }\n      // Open SnackBar\n      if (modalSnackMessage.type !== \"error\") {\n        setOpenSnackbar(true);\n      }\n    }\n  }, [modalSnackMessage]);\n\n  const closeSnackBar = () => {\n    setOpenSnackbar(false);\n    dispatch(setModalSnackMessage(\"\"));\n  };\n\n  const customSize = wideLimit\n    ? {\n        classes: {\n          paper: classes.customDialogSize,\n        },\n      }\n    : { maxWidth: \"lg\" as const, fullWidth: true };\n\n  let message = \"\";\n\n  if (modalSnackMessage) {\n    message = modalSnackMessage.detailedErrorMsg;\n    if (\n      modalSnackMessage.detailedErrorMsg === \"\" ||\n      modalSnackMessage.detailedErrorMsg.length < 5\n    ) {\n      message = modalSnackMessage.message;\n    }\n  }\n\n  return (\n    <Dialog\n      open={modalOpen}\n      classes={classes}\n      {...customSize}\n      scroll={\"paper\"}\n      onClose={(event, reason) => {\n        if (reason !== \"backdropClick\") {\n          onClose(); // close on Esc but not on click outside\n        }\n      }}\n      className={classes.root}\n    >\n      <DialogTitle className={classes.title}>\n        <div className={classes.titleText}>\n          {titleIcon} {title}\n        </div>\n        <div className={classes.closeContainer}>\n          <IconButton\n            aria-label=\"close\"\n            id={\"close\"}\n            className={classes.closeButton}\n            onClick={onClose}\n            disableRipple\n            size=\"small\"\n          >\n            <CloseIcon />\n          </IconButton>\n        </div>\n      </DialogTitle>\n\n      <MainError isModal={true} />\n      <Snackbar\n        open={openSnackbar}\n        className={classes.snackBarModal}\n        onClose={() => {\n          closeSnackBar();\n        }}\n        message={message}\n        ContentProps={{\n          className: `${classes.snackBar} ${\n            modalSnackMessage && modalSnackMessage.type === \"error\"\n              ? classes.errorSnackBar\n              : \"\"\n          }`,\n        }}\n        autoHideDuration={\n          modalSnackMessage && modalSnackMessage.type === \"error\" ? 10000 : 5000\n        }\n      />\n      <DialogContent className={noContentPadding ? \"\" : classes.content}>\n        {children}\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default withStyles(styles)(ModalWrapper);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2022 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { Grid, Theme } from \"@mui/material\";\nimport { Button } from \"mds\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport ModalWrapper from \"../Common/ModalWrapper/ModalWrapper\";\nimport TableWrapper from \"../Common/TableWrapper/TableWrapper\";\nimport { IDirectPVFormatResItem } from \"./types\";\nimport { modalStyleUtils } from \"../Common/FormComponents/common/styleLibrary\";\nimport { DriveFormatErrorsIcon } from \"mds\";\nimport { encodeURLString } from \"../../../common/utils\";\n\ninterface IFormatErrorsProps {\n  open: boolean;\n  onCloseFormatErrorsList: () => void;\n  errorsList: IDirectPVFormatResItem[];\n  classes: any;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    buttonContainer: {\n      textAlign: \"right\",\n    },\n    errorsList: {\n      height: \"calc(100vh - 280px)\",\n    },\n    ...modalStyleUtils,\n  });\n\nconst download = (filename: string, text: string) => {\n  let element = document.createElement(\"a\");\n  element.setAttribute(\n    \"href\",\n    \"data:application/json;charset=utf-8,\" + encodeURLString(text)\n  );\n  element.setAttribute(\"download\", filename);\n\n  element.style.display = \"none\";\n  document.body.appendChild(element);\n\n  element.click();\n\n  document.body.removeChild(element);\n};\n\nconst FormatErrorsResult = ({\n  open,\n  onCloseFormatErrorsList,\n  errorsList,\n  classes,\n}: IFormatErrorsProps) => {\n  return (\n    <ModalWrapper\n      modalOpen={open}\n      title={\"Format Errors\"}\n      onClose={onCloseFormatErrorsList}\n      titleIcon={<DriveFormatErrorsIcon />}\n    >\n      <Grid container>\n        <Grid item xs={12} className={classes.modalFormScrollable}>\n          There were some issues trying to format the selected CSI Drives,\n          please fix the issues and try again.\n          <br />\n          <TableWrapper\n            columns={[\n              {\n                label: \"Node\",\n                elementKey: \"node\",\n              },\n              { label: \"Drive\", elementKey: \"drive\" },\n              { label: \"Message\", elementKey: \"error\" },\n            ]}\n            entityName=\"Format Errors\"\n            idField=\"drive\"\n            records={errorsList}\n            isLoading={false}\n            customPaperHeight={classes.errorsList}\n            textSelectable\n            noBackground\n          />\n        </Grid>\n        <Grid item xs={12} className={classes.modalButtonBar}>\n          <Button\n            id={\"download-results\"}\n            variant=\"regular\"\n            onClick={() => {\n              download(\"csiFormatErrors.json\", JSON.stringify([...errorsList]));\n            }}\n            label={\"Download\"}\n          />\n          <Button\n            id={\"finish\"}\n            onClick={onCloseFormatErrorsList}\n            variant=\"callAction\"\n            label={\"Donw\"}\n          />\n        </Grid>\n      </Grid>\n    </ModalWrapper>\n  );\n};\n\nexport default withStyles(styles)(FormatErrorsResult);\n"],"names":["withStyles","theme","createStyles","deleteDialogStyles","content","padding","paddingBottom","customDialogSize","width","maxWidth","snackBarCommon","onClose","modalOpen","title","children","classes","wideLimit","noContentPadding","titleIcon","dispatch","useAppDispatch","useState","openSnackbar","setOpenSnackbar","modalSnackMessage","useSelector","state","system","modalSnackBar","useEffect","setModalSnackMessage","message","type","customSize","paper","fullWidth","detailedErrorMsg","length","open","scroll","event","reason","className","root","titleText","closeContainer","id","closeButton","onClick","disableRipple","size","isModal","snackBarModal","ContentProps","snackBar","errorSnackBar","autoHideDuration","buttonContainer","textAlign","errorsList","height","modalStyleUtils","onCloseFormatErrorsList","container","item","xs","modalFormScrollable","columns","label","elementKey","entityName","idField","records","isLoading","customPaperHeight","textSelectable","noBackground","modalButtonBar","variant","filename","text","element","document","createElement","setAttribute","encodeURLString","style","display","body","appendChild","click","removeChild","download","JSON","stringify"],"sourceRoot":""}