{"version":3,"file":"static/js/8391.0411f28f.chunk.js","mappings":"kTAqMA,WAAeA,EAAAA,EAAAA,IA/JA,SAACC,GAAD,OACbC,EAAAA,EAAAA,IAAa,kBACRC,EAAAA,IACAC,EAAAA,IAHQ,GA+Jf,EAhJ+B,SAAC,GAMK,IALnCC,EAKkC,EALlCA,QACAC,EAIkC,EAJlCA,KACAC,EAGkC,EAHlCA,cACAC,EAEkC,EAFlCA,eACAC,EACkC,EADlCA,qBAEMC,GAAWC,EAAAA,EAAAA,MACjB,GAA8BC,EAAAA,EAAAA,WAAkB,GAAhD,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAgCF,EAAAA,EAAAA,UAAiB,IAAjD,eAAOG,EAAP,KAAiBC,EAAjB,KACA,GAA4CJ,EAAAA,EAAAA,UAAiB,YAA7D,eAAOK,EAAP,KAAuBC,EAAvB,MAEAC,EAAAA,EAAAA,YAAU,WACJZ,IAC8B,WAA5BA,EAAca,UAChBF,EAAkB,WAElBA,EAAkB,WAClBF,EAAYT,EAAcc,iBAG/B,GAAE,CAACd,IAmCJ,OACE,SAAC,IAAD,CACEe,UAAWhB,EACXiB,QAAS,WACPd,GACD,EACDe,MAAM,2BACNC,WAAW,SAAC,MAAD,IANb,UAQE,iBACEC,YAAU,EACVC,aAAa,MACbC,SAAU,SAACC,GACcA,EA7CvBC,iBACFjB,IAGmB,aAAnBI,EACFc,EAAAA,EAAAA,OACU,OADV,0BACqCvB,EADrC,wBAEGwB,MAAK,WACJlB,GAAW,GACXL,GACD,IACAwB,OAAM,SAACC,GACNpB,GAAW,GACXJ,GAASyB,EAAAA,EAAAA,IAA0BD,GACpC,IAEHH,EAAAA,EAAAA,OACU,OADV,0BACqCvB,EADrC,sBACyE,CACrE4B,QAASnB,EACTF,SAAUA,IAEXiB,MAAK,WACJlB,GAAW,GACXL,GACD,IACAwB,OAAM,SAACC,GACNpB,GAAW,GACXJ,GAASyB,EAAAA,EAAAA,IAA0BD,GACpC,IAkBA,EALH,UAOE,UAAC,KAAD,CAAMG,WAAS,EAAf,WACE,UAAC,KAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,UAAWnC,EAAQoC,oBAAtC,WACE,SAAC,KAAD,CAAMH,MAAI,EAACC,GAAI,GAAIC,UAAWnC,EAAQqC,aAAtC,UACE,SAAC,IAAD,CACEC,SAAU,SAACd,GACTX,EAAkBW,EAAEe,OAAOC,MAC5B,EACDC,GAAG,yBACHC,KAAK,yBACLC,MAAO,kBACPH,MAAO5B,EACPgC,QAAS,CACP,CACED,MAAO,WACPH,MAAO,YAET,CACEG,MAAO,SACPH,MAAO,UAET,CACEG,MAAO,UACPH,MAAO,gBAMK,YAAnB5B,IACC,SAAC,KAAD,CAAMqB,MAAI,EAACC,GAAI,GAAIC,UAAWnC,EAAQqC,aAAtC,UACE,SAAC,IAAD,CACEI,GAAG,aACHC,KAAK,aACLC,MAAM,aACNH,MAAO9B,EACP4B,SAAU,SAACd,GACTb,EAAYa,EAAEe,OAAOC,MACtB,UAKT,UAAC,KAAD,CAAMP,MAAI,EAACC,GAAI,GAAIC,UAAWnC,EAAQ6C,eAAtC,WACE,SAAC,KAAD,CACEJ,GAAI,SACJK,KAAK,SACLC,QAAQ,UACRC,QAAS,WACP5C,GACD,EACD6C,SAAUzC,EACVmC,MAAO,YAET,SAAC,KAAD,CACEF,GAAI,OACJK,KAAK,SACLC,QAAQ,aACRE,SAAUzC,EACVmC,MAAO,YAGVnC,IACC,SAAC,KAAD,CAAMyB,MAAI,EAACC,GAAI,GAAf,UACE,SAAC,IAAD,YAOb,G,qNCtBD,KAAevC,EAAAA,EAAAA,IAlIA,SAACC,GAAD,OACbC,EAAAA,EAAAA,IAAa,kBACRqD,EAAAA,IADO,IAEVC,QAAS,CACPC,QAAS,GACTC,cAAe,GAEjBC,iBAAkB,CAChBC,MAAO,OACPC,SAAU,MAETC,EAAAA,IAXQ,GAkIf,EApHqB,SAAC,GASF,IARlBvC,EAQiB,EARjBA,QACAD,EAOiB,EAPjBA,UACAE,EAMiB,EANjBA,MACAuC,EAKiB,EALjBA,SACA1D,EAIiB,EAJjBA,QAIiB,IAHjB2D,UAAAA,OAGiB,SAFjBC,EAEiB,EAFjBA,iBAEiB,IADjBxC,UAAAA,OACiB,MADL,KACK,EACXf,GAAWC,EAAAA,EAAAA,MACjB,GAAwCC,EAAAA,EAAAA,WAAkB,GAA1D,eAAOsD,EAAP,KAAqBC,EAArB,KAEMC,GAAoBC,EAAAA,EAAAA,KACxB,SAACC,GAAD,OAAqBA,EAAMC,OAAOC,aAAlC,KAGFrD,EAAAA,EAAAA,YAAU,WACRT,GAAS+D,EAAAA,EAAAA,IAAqB,IAC/B,GAAE,CAAC/D,KAEJS,EAAAA,EAAAA,YAAU,WACR,GAAIiD,EAAmB,CACrB,GAAkC,KAA9BA,EAAkBM,QAEpB,YADAP,GAAgB,GAIa,UAA3BC,EAAkBjB,MACpBgB,GAAgB,EAEnB,CACF,GAAE,CAACC,IAEJ,IAKMO,EAAaX,EACf,CACE3D,QAAS,CACPuE,MAAOvE,EAAQsD,mBAGnB,CAAEE,SAAU,KAAegB,WAAW,GAEtCH,EAAU,GAYd,OAVIN,IACFM,EAAUN,EAAkBU,kBAEa,KAAvCV,EAAkBU,kBAClBV,EAAkBU,iBAAiBC,OAAS,KAE5CL,EAAUN,EAAkBM,WAK9B,UAAC,KAAD,gBACEpE,KAAMgB,EACNjB,QAASA,GACLsE,GAHN,IAIEK,OAAQ,QACRzD,QAAS,SAAC0D,EAAOC,GACA,kBAAXA,GACF3D,GAEH,EACDiB,UAAWnC,EAAQ8E,KAVrB,WAYE,UAAC,IAAD,CAAa3C,UAAWnC,EAAQmB,MAAhC,WACE,iBAAKgB,UAAWnC,EAAQ+E,UAAxB,UACG3D,EADH,IACeD,MAEf,gBAAKgB,UAAWnC,EAAQgF,eAAxB,UACE,SAAC,IAAD,CACE,aAAW,QACXvC,GAAI,QACJN,UAAWnC,EAAQiF,YACnBjC,QAAS9B,EACTgE,eAAa,EACbC,KAAK,QANP,UAQE,SAAC,IAAD,YAKN,SAAC,IAAD,CAAWC,SAAS,KACpB,SAAC,IAAD,CACEnF,KAAM4D,EACN1B,UAAWnC,EAAQqF,cACnBnE,QAAS,WA3Db4C,GAAgB,GAChBzD,GAAS+D,EAAAA,EAAAA,IAAqB,IA4DzB,EACDC,QAASA,EACTiB,aAAc,CACZnD,UAAU,GAAD,OAAKnC,EAAQuF,SAAb,YACPxB,GAAgD,UAA3BA,EAAkBjB,KACnC9C,EAAQwF,cACR,KAGRC,iBACE1B,GAAgD,UAA3BA,EAAkBjB,KAAmB,IAAQ,OAGtE,SAAC,IAAD,CAAeX,UAAWyB,EAAmB,GAAK5D,EAAQmD,QAA1D,SACGO,OAIR,G","sources":["screens/Console/Buckets/BucketDetails/EnableBucketEncryption.tsx","screens/Console/Common/ModalWrapper/ModalWrapper.tsx"],"sourcesContent":["// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport React, { useEffect, useState } from \"react\";\nimport Grid from \"@mui/material/Grid\";\nimport { LinearProgress, SelectChangeEvent } from \"@mui/material\";\nimport { Button } from \"mds\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  formFieldStyles,\n  modalStyleUtils,\n} from \"../../Common/FormComponents/common/styleLibrary\";\nimport { BucketEncryptionInfo } from \"../types\";\nimport { ErrorResponseHandler } from \"../../../../common/types\";\nimport api from \"../../../../common/api\";\nimport ModalWrapper from \"../../Common/ModalWrapper/ModalWrapper\";\nimport InputBoxWrapper from \"../../Common/FormComponents/InputBoxWrapper/InputBoxWrapper\";\nimport SelectWrapper from \"../../Common/FormComponents/SelectWrapper/SelectWrapper\";\nimport { BucketEncryptionIcon } from \"../../../../icons\";\n\nimport { setModalErrorSnackMessage } from \"../../../../systemSlice\";\nimport { useAppDispatch } from \"../../../../store\";\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...modalStyleUtils,\n    ...formFieldStyles,\n  });\n\ninterface IEnableBucketEncryptionProps {\n  classes: any;\n  open: boolean;\n  encryptionEnabled: boolean;\n  encryptionCfg: BucketEncryptionInfo | null;\n  selectedBucket: string;\n  closeModalAndRefresh: () => void;\n}\n\nconst EnableBucketEncryption = ({\n  classes,\n  open,\n  encryptionCfg,\n  selectedBucket,\n  closeModalAndRefresh,\n}: IEnableBucketEncryptionProps) => {\n  const dispatch = useAppDispatch();\n  const [loading, setLoading] = useState<boolean>(false);\n  const [kmsKeyID, setKmsKeyID] = useState<string>(\"\");\n  const [encryptionType, setEncryptionType] = useState<string>(\"disabled\");\n\n  useEffect(() => {\n    if (encryptionCfg) {\n      if (encryptionCfg.algorithm === \"AES256\") {\n        setEncryptionType(\"sse-s3\");\n      } else {\n        setEncryptionType(\"sse-kms\");\n        setKmsKeyID(encryptionCfg.kmsMasterKeyID);\n      }\n    }\n  }, [encryptionCfg]);\n\n  const enableBucketEncryption = (event: React.FormEvent) => {\n    event.preventDefault();\n    if (loading) {\n      return;\n    }\n    if (encryptionType === \"disabled\") {\n      api\n        .invoke(\"POST\", `/api/v1/buckets/${selectedBucket}/encryption/disable`)\n        .then(() => {\n          setLoading(false);\n          closeModalAndRefresh();\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setLoading(false);\n          dispatch(setModalErrorSnackMessage(err));\n        });\n    } else {\n      api\n        .invoke(\"POST\", `/api/v1/buckets/${selectedBucket}/encryption/enable`, {\n          encType: encryptionType,\n          kmsKeyID: kmsKeyID,\n        })\n        .then(() => {\n          setLoading(false);\n          closeModalAndRefresh();\n        })\n        .catch((err: ErrorResponseHandler) => {\n          setLoading(false);\n          dispatch(setModalErrorSnackMessage(err));\n        });\n    }\n  };\n\n  return (\n    <ModalWrapper\n      modalOpen={open}\n      onClose={() => {\n        closeModalAndRefresh();\n      }}\n      title=\"Enable Bucket Encryption\"\n      titleIcon={<BucketEncryptionIcon />}\n    >\n      <form\n        noValidate\n        autoComplete=\"off\"\n        onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n          enableBucketEncryption(e);\n        }}\n      >\n        <Grid container>\n          <Grid item xs={12} className={classes.modalFormScrollable}>\n            <Grid item xs={12} className={classes.formFieldRow}>\n              <SelectWrapper\n                onChange={(e: SelectChangeEvent<string>) => {\n                  setEncryptionType(e.target.value as string);\n                }}\n                id=\"select-encryption-type\"\n                name=\"select-encryption-type\"\n                label={\"Encryption Type\"}\n                value={encryptionType}\n                options={[\n                  {\n                    label: \"Disabled\",\n                    value: \"disabled\",\n                  },\n                  {\n                    label: \"SSE-S3\",\n                    value: \"sse-s3\",\n                  },\n                  {\n                    label: \"SSE-KMS\",\n                    value: \"sse-kms\",\n                  },\n                ]}\n              />\n            </Grid>\n\n            {encryptionType === \"sse-kms\" && (\n              <Grid item xs={12} className={classes.formFieldRow}>\n                <InputBoxWrapper\n                  id=\"kms-key-id\"\n                  name=\"kms-key-id\"\n                  label=\"KMS Key ID\"\n                  value={kmsKeyID}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                    setKmsKeyID(e.target.value);\n                  }}\n                />\n              </Grid>\n            )}\n          </Grid>\n          <Grid item xs={12} className={classes.modalButtonBar}>\n            <Button\n              id={\"cancel\"}\n              type=\"submit\"\n              variant=\"regular\"\n              onClick={() => {\n                closeModalAndRefresh();\n              }}\n              disabled={loading}\n              label={\"Cancel\"}\n            />\n            <Button\n              id={\"save\"}\n              type=\"submit\"\n              variant=\"callAction\"\n              disabled={loading}\n              label={\"Save\"}\n            />\n          </Grid>\n          {loading && (\n            <Grid item xs={12}>\n              <LinearProgress />\n            </Grid>\n          )}\n        </Grid>\n      </form>\n    </ModalWrapper>\n  );\n};\n\nexport default withStyles(styles)(EnableBucketEncryption);\n","// This file is part of MinIO Console Server\n// Copyright (c) 2021 MinIO, Inc.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport { Dialog, DialogContent, DialogTitle } from \"@mui/material\";\nimport { Theme } from \"@mui/material/styles\";\nimport createStyles from \"@mui/styles/createStyles\";\nimport withStyles from \"@mui/styles/withStyles\";\nimport {\n  deleteDialogStyles,\n  snackBarCommon,\n} from \"../FormComponents/common/styleLibrary\";\nimport { AppState, useAppDispatch } from \"../../../../store\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport MainError from \"../MainError/MainError\";\nimport { setModalSnackMessage } from \"../../../../systemSlice\";\n\ninterface IModalProps {\n  classes: any;\n  onClose: () => void;\n  modalOpen: boolean;\n  title: string | React.ReactNode;\n  children: any;\n  wideLimit?: boolean;\n  noContentPadding?: boolean;\n  titleIcon?: React.ReactNode;\n}\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    ...deleteDialogStyles,\n    content: {\n      padding: 25,\n      paddingBottom: 0,\n    },\n    customDialogSize: {\n      width: \"100%\",\n      maxWidth: 765,\n    },\n    ...snackBarCommon,\n  });\n\nconst ModalWrapper = ({\n  onClose,\n  modalOpen,\n  title,\n  children,\n  classes,\n  wideLimit = true,\n  noContentPadding,\n  titleIcon = null,\n}: IModalProps) => {\n  const dispatch = useAppDispatch();\n  const [openSnackbar, setOpenSnackbar] = useState<boolean>(false);\n\n  const modalSnackMessage = useSelector(\n    (state: AppState) => state.system.modalSnackBar\n  );\n\n  useEffect(() => {\n    dispatch(setModalSnackMessage(\"\"));\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (modalSnackMessage) {\n      if (modalSnackMessage.message === \"\") {\n        setOpenSnackbar(false);\n        return;\n      }\n      // Open SnackBar\n      if (modalSnackMessage.type !== \"error\") {\n        setOpenSnackbar(true);\n      }\n    }\n  }, [modalSnackMessage]);\n\n  const closeSnackBar = () => {\n    setOpenSnackbar(false);\n    dispatch(setModalSnackMessage(\"\"));\n  };\n\n  const customSize = wideLimit\n    ? {\n        classes: {\n          paper: classes.customDialogSize,\n        },\n      }\n    : { maxWidth: \"lg\" as const, fullWidth: true };\n\n  let message = \"\";\n\n  if (modalSnackMessage) {\n    message = modalSnackMessage.detailedErrorMsg;\n    if (\n      modalSnackMessage.detailedErrorMsg === \"\" ||\n      modalSnackMessage.detailedErrorMsg.length < 5\n    ) {\n      message = modalSnackMessage.message;\n    }\n  }\n\n  return (\n    <Dialog\n      open={modalOpen}\n      classes={classes}\n      {...customSize}\n      scroll={\"paper\"}\n      onClose={(event, reason) => {\n        if (reason !== \"backdropClick\") {\n          onClose(); // close on Esc but not on click outside\n        }\n      }}\n      className={classes.root}\n    >\n      <DialogTitle className={classes.title}>\n        <div className={classes.titleText}>\n          {titleIcon} {title}\n        </div>\n        <div className={classes.closeContainer}>\n          <IconButton\n            aria-label=\"close\"\n            id={\"close\"}\n            className={classes.closeButton}\n            onClick={onClose}\n            disableRipple\n            size=\"small\"\n          >\n            <CloseIcon />\n          </IconButton>\n        </div>\n      </DialogTitle>\n\n      <MainError isModal={true} />\n      <Snackbar\n        open={openSnackbar}\n        className={classes.snackBarModal}\n        onClose={() => {\n          closeSnackBar();\n        }}\n        message={message}\n        ContentProps={{\n          className: `${classes.snackBar} ${\n            modalSnackMessage && modalSnackMessage.type === \"error\"\n              ? classes.errorSnackBar\n              : \"\"\n          }`,\n        }}\n        autoHideDuration={\n          modalSnackMessage && modalSnackMessage.type === \"error\" ? 10000 : 5000\n        }\n      />\n      <DialogContent className={noContentPadding ? \"\" : classes.content}>\n        {children}\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default withStyles(styles)(ModalWrapper);\n"],"names":["withStyles","theme","createStyles","modalStyleUtils","formFieldStyles","classes","open","encryptionCfg","selectedBucket","closeModalAndRefresh","dispatch","useAppDispatch","useState","loading","setLoading","kmsKeyID","setKmsKeyID","encryptionType","setEncryptionType","useEffect","algorithm","kmsMasterKeyID","modalOpen","onClose","title","titleIcon","noValidate","autoComplete","onSubmit","e","preventDefault","api","then","catch","err","setModalErrorSnackMessage","encType","container","item","xs","className","modalFormScrollable","formFieldRow","onChange","target","value","id","name","label","options","modalButtonBar","type","variant","onClick","disabled","deleteDialogStyles","content","padding","paddingBottom","customDialogSize","width","maxWidth","snackBarCommon","children","wideLimit","noContentPadding","openSnackbar","setOpenSnackbar","modalSnackMessage","useSelector","state","system","modalSnackBar","setModalSnackMessage","message","customSize","paper","fullWidth","detailedErrorMsg","length","scroll","event","reason","root","titleText","closeContainer","closeButton","disableRipple","size","isModal","snackBarModal","ContentProps","snackBar","errorSnackBar","autoHideDuration"],"sourceRoot":""}